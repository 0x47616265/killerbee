
RZUSBSTICK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  0000682c  000068c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000682c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000010da  00800196  00800196  00006956  2**0
                  ALLOC
  3 .stab         000008f4  00000000  00000000  00006958  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010c  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007358  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000a98  00000000  00000000  00007369  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001f74  00000000  00000000  00007e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000d383  00000000  00000000  00009d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003863  00000000  00000000  000170f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00009827  00000000  00000000  0001a95b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001090  00000000  00000000  00024184  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000046ef  00000000  00000000  00025214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005c6d  00000000  00000000  00029903  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00002ceb  00000000  00000000  0002f570  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0003225b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__vector_10>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_16>
      44:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__vector_17>
      48:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__vector_18>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__vector_20>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      98:	e4 09       	sbc	r30, r4
      9a:	fc 06       	cpc	r15, r28
      9c:	25 07       	cpc	r18, r21
      9e:	22 08       	sbc	r2, r2
      a0:	22 08       	sbc	r2, r2
      a2:	22 08       	sbc	r2, r2
      a4:	22 08       	sbc	r2, r2
      a6:	c9 07       	cpc	r28, r25
      a8:	18 08       	sbc	r1, r8
      aa:	1c 08       	sbc	r1, r12
      ac:	1f 08       	sbc	r1, r15
      ae:	22 08       	sbc	r2, r2
      b0:	22 08       	sbc	r2, r2
      b2:	2c 08       	sbc	r2, r12
      b4:	3e 08       	sbc	r3, r14
      b6:	41 08       	sbc	r4, r1
      b8:	ee 09       	sbc	r30, r14
      ba:	ee 09       	sbc	r30, r14
      bc:	ee 09       	sbc	r30, r14
      be:	ee 09       	sbc	r30, r14
      c0:	ee 09       	sbc	r30, r14
      c2:	ee 09       	sbc	r30, r14
      c4:	ee 09       	sbc	r30, r14
      c6:	ee 09       	sbc	r30, r14
      c8:	48 08       	sbc	r4, r8
      ca:	ee 09       	sbc	r30, r14
      cc:	ee 09       	sbc	r30, r14
      ce:	ee 09       	sbc	r30, r14
      d0:	ee 09       	sbc	r30, r14
      d2:	ee 09       	sbc	r30, r14
      d4:	ee 09       	sbc	r30, r14
      d6:	ee 09       	sbc	r30, r14
      d8:	ee 09       	sbc	r30, r14
      da:	74 08       	sbc	r7, r4
      dc:	c6 08       	sbc	r12, r6
      de:	ee 08       	sbc	r14, r14
      e0:	01 09       	sbc	r16, r1
      e2:	47 09       	sbc	r20, r7
      e4:	96 09       	sbc	r25, r6
      e6:	d6 09       	sbc	r29, r6

000000e8 <jammer_frame>:
      e8:	ba 26 78 5b ce 74 b8 16 2a ef f3 cc 8b 4e 53 0a     .&x[.t..*....NS.
      f8:	e2 d7 b7 3c 56 4c b5 66 db 1e 57 ee e6 f4 43 1a     ...<VL.f..W...C.
     108:	06 df cd 9f 86 3e 8a 79 3a 04 09 7c 1f bb 12 a0     .....>.y:..|....
     118:	77 9b 40 fc 00 ad 31 6f 9a a6 9e 15 0d 6c 44 70     w.@...1o.....lDp
     128:	35 f0 64 d6 7e 48 3d 50 62 2f c6 30 e7 60 f8 dc     5.d.~H=Pb/.0.`..
     138:	5c 5f 08 c3 b9 13 a8 be e9 7a 81 65 bc d2 2e 55     \_.......z.e...U
     148:	e5 90 f7 a7 7b c2 c1 ea 4a ae 93 f2 ff b3 c5 67     ....{...J......g
     158:	39 98 49 05 2c 3f 38 8d d3 ca 2d e0 b2 00 00 00     9.I.,?8...-.....

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d0 e2       	ldi	r29, 0x20	; 32
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	ec e2       	ldi	r30, 0x2C	; 44
     17c:	f8 e6       	ldi	r31, 0x68	; 104
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0b bf       	out	0x3b, r16	; 59
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x14>
     184:	07 90       	elpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a6 39       	cpi	r26, 0x96	; 150
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0x10>

0000018e <__do_clear_bss>:
     18e:	12 e1       	ldi	r17, 0x12	; 18
     190:	a6 e9       	ldi	r26, 0x96	; 150
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a0 37       	cpi	r26, 0x70	; 112
     19a:	b1 07       	cpc	r27, r17
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 85 01 	call	0x30a	; 0x30a <main>
     1a2:	0c 94 bf 33 	jmp	0x677e	; 0x677e <exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <__lshrdi3>:
     1aa:	0f 93       	push	r16
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	60 97       	sbiw	r28, 0x10	; 16
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	cd bf       	out	0x3d, r28	; 61
     1c0:	00 23       	and	r16, r16
     1c2:	09 f4       	brne	.+2      	; 0x1c6 <__lshrdi3+0x1c>
     1c4:	59 c0       	rjmp	.+178    	; 0x278 <__lshrdi3+0xce>
     1c6:	29 83       	std	Y+1, r18	; 0x01
     1c8:	3a 83       	std	Y+2, r19	; 0x02
     1ca:	4b 83       	std	Y+3, r20	; 0x03
     1cc:	5c 83       	std	Y+4, r21	; 0x04
     1ce:	6d 83       	std	Y+5, r22	; 0x05
     1d0:	7e 83       	std	Y+6, r23	; 0x06
     1d2:	8f 83       	std	Y+7, r24	; 0x07
     1d4:	98 87       	std	Y+8, r25	; 0x08
     1d6:	e0 e2       	ldi	r30, 0x20	; 32
     1d8:	e0 1b       	sub	r30, r16
     1da:	2d 81       	ldd	r18, Y+5	; 0x05
     1dc:	3e 81       	ldd	r19, Y+6	; 0x06
     1de:	4f 81       	ldd	r20, Y+7	; 0x07
     1e0:	58 85       	ldd	r21, Y+8	; 0x08
     1e2:	1e 16       	cp	r1, r30
     1e4:	bc f0       	brlt	.+46     	; 0x214 <__lshrdi3+0x6a>
     1e6:	1d 86       	std	Y+13, r1	; 0x0d
     1e8:	1e 86       	std	Y+14, r1	; 0x0e
     1ea:	1f 86       	std	Y+15, r1	; 0x0f
     1ec:	18 8a       	std	Y+16, r1	; 0x10
     1ee:	8e 2f       	mov	r24, r30
     1f0:	99 27       	eor	r25, r25
     1f2:	87 fd       	sbrc	r24, 7
     1f4:	90 95       	com	r25
     1f6:	90 95       	com	r25
     1f8:	81 95       	neg	r24
     1fa:	9f 4f       	sbci	r25, 0xFF	; 255
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__lshrdi3+0x5c>
     1fe:	56 95       	lsr	r21
     200:	47 95       	ror	r20
     202:	37 95       	ror	r19
     204:	27 95       	ror	r18
     206:	8a 95       	dec	r24
     208:	d2 f7       	brpl	.-12     	; 0x1fe <__lshrdi3+0x54>
     20a:	29 87       	std	Y+9, r18	; 0x09
     20c:	3a 87       	std	Y+10, r19	; 0x0a
     20e:	4b 87       	std	Y+11, r20	; 0x0b
     210:	5c 87       	std	Y+12, r21	; 0x0c
     212:	2a c0       	rjmp	.+84     	; 0x268 <__lshrdi3+0xbe>
     214:	ca 01       	movw	r24, r20
     216:	b9 01       	movw	r22, r18
     218:	00 2e       	mov	r0, r16
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__lshrdi3+0x7a>
     21c:	96 95       	lsr	r25
     21e:	87 95       	ror	r24
     220:	77 95       	ror	r23
     222:	67 95       	ror	r22
     224:	0a 94       	dec	r0
     226:	d2 f7       	brpl	.-12     	; 0x21c <__lshrdi3+0x72>
     228:	6d 87       	std	Y+13, r22	; 0x0d
     22a:	7e 87       	std	Y+14, r23	; 0x0e
     22c:	8f 87       	std	Y+15, r24	; 0x0f
     22e:	98 8b       	std	Y+16, r25	; 0x10
     230:	da 01       	movw	r26, r20
     232:	c9 01       	movw	r24, r18
     234:	04 c0       	rjmp	.+8      	; 0x23e <__lshrdi3+0x94>
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	aa 1f       	adc	r26, r26
     23c:	bb 1f       	adc	r27, r27
     23e:	ea 95       	dec	r30
     240:	d2 f7       	brpl	.-12     	; 0x236 <__lshrdi3+0x8c>
     242:	29 81       	ldd	r18, Y+1	; 0x01
     244:	3a 81       	ldd	r19, Y+2	; 0x02
     246:	4b 81       	ldd	r20, Y+3	; 0x03
     248:	5c 81       	ldd	r21, Y+4	; 0x04
     24a:	04 c0       	rjmp	.+8      	; 0x254 <__lshrdi3+0xaa>
     24c:	56 95       	lsr	r21
     24e:	47 95       	ror	r20
     250:	37 95       	ror	r19
     252:	27 95       	ror	r18
     254:	0a 95       	dec	r16
     256:	d2 f7       	brpl	.-12     	; 0x24c <__lshrdi3+0xa2>
     258:	82 2b       	or	r24, r18
     25a:	93 2b       	or	r25, r19
     25c:	a4 2b       	or	r26, r20
     25e:	b5 2b       	or	r27, r21
     260:	89 87       	std	Y+9, r24	; 0x09
     262:	9a 87       	std	Y+10, r25	; 0x0a
     264:	ab 87       	std	Y+11, r26	; 0x0b
     266:	bc 87       	std	Y+12, r27	; 0x0c
     268:	29 85       	ldd	r18, Y+9	; 0x09
     26a:	3a 85       	ldd	r19, Y+10	; 0x0a
     26c:	4b 85       	ldd	r20, Y+11	; 0x0b
     26e:	5c 85       	ldd	r21, Y+12	; 0x0c
     270:	6d 85       	ldd	r22, Y+13	; 0x0d
     272:	7e 85       	ldd	r23, Y+14	; 0x0e
     274:	8f 85       	ldd	r24, Y+15	; 0x0f
     276:	98 89       	ldd	r25, Y+16	; 0x10
     278:	60 96       	adiw	r28, 0x10	; 16
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
     284:	cf 91       	pop	r28
     286:	df 91       	pop	r29
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <error_handler>:
    return false;
}


static void error_handler(void) {
    LED_RED_ON();
     28c:	5d 98       	cbi	0x0b, 5	; 11
    cli();
     28e:	f8 94       	cli
     290:	ff cf       	rjmp	.-2      	; 0x290 <error_handler+0x4>

00000292 <avr_init>:

bool avr_init(void) {
    
    
    /* Enable power reduction on all peripheral modules. */
    PRR0 = (1 << PRTWI)  |   // Disable TWI.
     292:	8d ee       	ldi	r24, 0xED	; 237
     294:	80 93 64 00 	sts	0x0064, r24
	       (1 << PRTIM0) |   // Disable TIMER0.
           (1 << PRTIM1) |   // Disable TIMER1.
           (1 << PRSPI)  |   // Disable SPI.
	       (1 << PRADC);     // Disable ADC.
    
    PRR1 = (1 << PRUSB)  |   // Disable USB.
     298:	89 e8       	ldi	r24, 0x89	; 137
     29a:	80 93 65 00 	sts	0x0065, r24
	       (1 << PRTIM3) |   // Disable TIMER3.
	       (1 << PRUSART1);  // Disable USART1.
	
	ACSR |= (1 << ACD);      // Disable Analog Comparator.
     29e:	80 b7       	in	r24, 0x30	; 48
     2a0:	80 68       	ori	r24, 0x80	; 128
     2a2:	80 bf       	out	0x30, r24	; 48
	
	DIDR0 = (1 << ADC7D) |   // Disable digital input buffer for analog input pins.
     2a4:	80 ef       	ldi	r24, 0xF0	; 240
     2a6:	80 93 7e 00 	sts	0x007E, r24
	        (1 << ADC6D) |   // Disable digital input buffer for analog input pins.
	        (1 << ADC5D) |   // Disable digital input buffer for analog input pins.
	        (1 << ADC4D);    // Disable digital input buffer for analog input pins.
    
	/* Initialize the VRT Runtime Framework. */
	if (true != vrt_init()) {
     2aa:	0e 94 5f 29 	call	0x52be	; 0x52be <vrt_init>
     2ae:	88 23       	and	r24, r24
     2b0:	41 f1       	breq	.+80     	; 0x302 <avr_init+0x70>
    } else if (true != vrt_mem_init()) {
     2b2:	0e 94 3f 28 	call	0x507e	; 0x507e <vrt_mem_init>
     2b6:	88 23       	and	r24, r24
     2b8:	21 f1       	breq	.+72     	; 0x302 <avr_init+0x70>
    } else if (true != vrt_mem_add_partition(partition_buffer1, BLOCK_SIZE_1, BLOCK_COUNT_1, &partition1)) {
     2ba:	86 e9       	ldi	r24, 0x96	; 150
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	60 e2       	ldi	r22, 0x20	; 32
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	45 e0       	ldi	r20, 0x05	; 5
     2c4:	26 e3       	ldi	r18, 0x36	; 54
     2c6:	32 e0       	ldi	r19, 0x02	; 2
     2c8:	0e 94 47 28 	call	0x508e	; 0x508e <vrt_mem_add_partition>
     2cc:	88 23       	and	r24, r24
     2ce:	c9 f0       	breq	.+50     	; 0x302 <avr_init+0x70>
    } else if (true != vrt_mem_add_partition(partition_buffer2, BLOCK_SIZE_2, BLOCK_COUNT_2, &partition2)) {
     2d0:	82 e4       	ldi	r24, 0x42	; 66
     2d2:	92 e0       	ldi	r25, 0x02	; 2
     2d4:	63 e9       	ldi	r22, 0x93	; 147
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	4f e0       	ldi	r20, 0x0F	; 15
     2da:	2f ed       	ldi	r18, 0xDF	; 223
     2dc:	3a e0       	ldi	r19, 0x0A	; 10
     2de:	0e 94 47 28 	call	0x508e	; 0x508e <vrt_mem_add_partition>
     2e2:	88 23       	and	r24, r24
     2e4:	71 f0       	breq	.+28     	; 0x302 <avr_init+0x70>
    } else if (true != vrt_timer_init()) {
     2e6:	0e 94 8f 32 	call	0x651e	; 0x651e <vrt_timer_init>
     2ea:	88 23       	and	r24, r24
     2ec:	61 f0       	breq	.+24     	; 0x306 <avr_init+0x74>
    } else {
        /* AVR successfully initialized. */
        LED_INIT();
     2ee:	57 9a       	sbi	0x0a, 7	; 10
     2f0:	6f 9a       	sbi	0x0d, 7	; 13
     2f2:	6e 9a       	sbi	0x0d, 6	; 13
     2f4:	55 9a       	sbi	0x0a, 5	; 10
     2f6:	5f 98       	cbi	0x0b, 7	; 11
     2f8:	77 9a       	sbi	0x0e, 7	; 14
     2fa:	76 9a       	sbi	0x0e, 6	; 14
     2fc:	5d 9a       	sbi	0x0b, 5	; 11
        return true;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	08 95       	ret
    }
    
    return false;
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	08 95       	ret
     306:	80 e0       	ldi	r24, 0x00	; 0
}
     308:	08 95       	ret

0000030a <main>:
void main(void) {
#else
int main(void) {
#endif
    /* Ensure that the Watchdog is not running. */
    wdt_disable();
     30a:	88 e1       	ldi	r24, 0x18	; 24
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	80 93 60 00 	sts	0x0060, r24
     314:	10 92 60 00 	sts	0x0060, r1
     318:	0f be       	out	0x3f, r0	; 63
    
	/* Initialize system. */
	if (true != avr_init()) {
     31a:	0e 94 49 01 	call	0x292	; 0x292 <avr_init>
     31e:	88 23       	and	r24, r24
     320:	69 f0       	breq	.+26     	; 0x33c <main+0x32>
		error_handler();
	} else if (true != eep_init()) {
     322:	0e 94 40 10 	call	0x2080	; 0x2080 <eep_init>
     326:	88 23       	and	r24, r24
     328:	19 f4       	brne	.+6      	; 0x330 <main+0x26>
        eep_deinit();
     32a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eep_deinit>
     32e:	06 c0       	rjmp	.+12     	; 0x33c <main+0x32>
        error_handler();
    } else if (true != cmd_if_init()) {
     330:	0e 94 0c 0a 	call	0x1418	; 0x1418 <cmd_if_init>
     334:	88 23       	and	r24, r24
     336:	21 f4       	brne	.+8      	; 0x340 <main+0x36>
        cmd_if_deinit();
     338:	0e 94 80 0a 	call	0x1500	; 0x1500 <cmd_if_deinit>
        error_handler();
     33c:	0e 94 46 01 	call	0x28c	; 0x28c <error_handler>
    }
	
    /* Disable modules that are not needed any more. */
    eep_deinit();
     340:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eep_deinit>
    
    LED_ORANGE_ON();
     344:	76 98       	cbi	0x0e, 6	; 14
        
    /* Enable interrupts. */
    sei();
     346:	78 94       	sei
    
	/* Endless application loop. */
	for(;;) {
        /* Dispatch events from the event queue. */
		vrt_dispatch_event();
     348:	0e 94 bb 29 	call	0x5376	; 0x5376 <vrt_dispatch_event>
        
        /* Poll modules that require this. */
        vrt_timer_task();
     34c:	0e 94 8d 33 	call	0x671a	; 0x671a <vrt_timer_task>
        usb_task();
     350:	0e 94 ca 0c 	call	0x1994	; 0x1994 <usb_task>
        air_capture_task();
     354:	0e 94 2b 03 	call	0x656	; 0x656 <air_capture_task>
        cmd_if_task();
     358:	0e 94 a5 0a 	call	0x154a	; 0x154a <cmd_if_task>
     35c:	f5 cf       	rjmp	.-22     	; 0x348 <main+0x3e>

0000035e <air_capture_scan_callback>:
 *
 *  \param[in] isr_event Event signaled by the radio transceiver.
 */
static void air_capture_scan_callback(uint8_t isr_event) {
    /* Not implemented yet. */
}
     35e:	08 95       	ret

00000360 <air_capture_transmission_callback>:
 *  the highest possible speed.
 *
 *  \param[in] isr_event Event signaled by the radio transceiver.
 */
static void air_capture_transmission_callback(uint8_t isr_event) {
    if (RF230_TRX_END_MASK == (isr_event & RF230_TRX_END_MASK)) {
     360:	83 ff       	sbrs	r24, 3
     362:	27 c0       	rjmp	.+78     	; 0x3b2 <air_capture_transmission_callback+0x52>
        RF230_QUICK_CLEAR_ISR_CALLBACK();
     364:	10 92 59 0c 	sts	0x0C59, r1
     368:	10 92 58 0c 	sts	0x0C58, r1
    
        /* Force radio transceiver to TRX_OFF mode and set AirCapture state to AC_IDLE. */
        RF230_QUICK_SUBREGISTER_WRITE(0x02, 0x1f, 0, CMD_FORCE_TRX_OFF);
     36c:	28 98       	cbi	0x05, 0	; 5
     36e:	82 e8       	ldi	r24, 0x82	; 130
     370:	8e bd       	out	0x2e, r24	; 46
     372:	0d b4       	in	r0, 0x2d	; 45
     374:	07 fe       	sbrs	r0, 7
     376:	fd cf       	rjmp	.-6      	; 0x372 <air_capture_transmission_callback+0x12>
     378:	8e b5       	in	r24, 0x2e	; 46
     37a:	8e bd       	out	0x2e, r24	; 46
     37c:	0d b4       	in	r0, 0x2d	; 45
     37e:	07 fe       	sbrs	r0, 7
     380:	fd cf       	rjmp	.-6      	; 0x37c <air_capture_transmission_callback+0x1c>
     382:	8e b5       	in	r24, 0x2e	; 46
     384:	28 9a       	sbi	0x05, 0	; 5
     386:	28 98       	cbi	0x05, 0	; 5
     388:	92 ec       	ldi	r25, 0xC2	; 194
     38a:	9e bd       	out	0x2e, r25	; 46
     38c:	80 7e       	andi	r24, 0xE0	; 224
     38e:	83 60       	ori	r24, 0x03	; 3
     390:	0d b4       	in	r0, 0x2d	; 45
     392:	07 fe       	sbrs	r0, 7
     394:	fd cf       	rjmp	.-6      	; 0x390 <air_capture_transmission_callback+0x30>
     396:	9e b5       	in	r25, 0x2e	; 46
     398:	8e bd       	out	0x2e, r24	; 46
     39a:	0d b4       	in	r0, 0x2d	; 45
     39c:	07 fe       	sbrs	r0, 7
     39e:	fd cf       	rjmp	.-6      	; 0x39a <air_capture_transmission_callback+0x3a>
     3a0:	8e b5       	in	r24, 0x2e	; 46
     3a2:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	8a 95       	dec	r24
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <air_capture_transmission_callback+0x46>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <air_capture_transmission_callback+0x4c>
        delay_us(TIME_CMD_FORCE_TRX_OFF);
        ac_state = AC_IDLE;
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	80 93 09 01 	sts	0x0109, r24
     3b2:	08 95       	ret

000003b4 <air_capture_callback>:
 *  exploit that it takes 16 cycles to clock out one byte over the SPI as master at
 *  the highest possible speed.
 *
 *  \param[in] isr_event Event signaled by the radio transceiver.
 */
static void air_capture_callback(uint8_t isr_event) {
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
    /* Mask the two different events interesting in this application:
     * - TRX_END: Complete frame received.
     * - RX_START: SFD of new frame received.
     */
    if (RF230_TRX_END_MASK == (isr_event & RF230_TRX_END_MASK)) {
     3b8:	83 ff       	sbrs	r24, 3
     3ba:	75 c0       	rjmp	.+234    	; 0x4a6 <air_capture_callback+0xf2>
    /* End of frame indicated. Upload it if there is packets in the pool left. */
        if (0 == items_free) { nmbr_of_frames_missed++; return; }
     3bc:	90 91 ee 0a 	lds	r25, 0x0AEE
     3c0:	99 23       	and	r25, r25
     3c2:	51 f4       	brne	.+20     	; 0x3d8 <air_capture_callback+0x24>
     3c4:	80 91 f5 0a 	lds	r24, 0x0AF5
     3c8:	90 91 f6 0a 	lds	r25, 0x0AF6
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	90 93 f6 0a 	sts	0x0AF6, r25
     3d2:	80 93 f5 0a 	sts	0x0AF5, r24
     3d6:	8d c0       	rjmp	.+282    	; 0x4f2 <air_capture_callback+0x13e>
        
        RF230_SS_LOW();
     3d8:	28 98       	cbi	0x05, 0	; 5
        
        SPDR = RF230_TRX_CMD_FR; // Send Frame Read Command.
     3da:	80 e2       	ldi	r24, 0x20	; 32
     3dc:	8e bd       	out	0x2e, r24	; 46
        
        /* Get ACDU while waiting for SPI to finish data transmission. */
        acdu_t *this_acdu = acdu_fifo[fifo_head];
     3de:	80 91 eb 0a 	lds	r24, 0x0AEB
     3e2:	e8 2f       	mov	r30, r24
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	ee 0f       	add	r30, r30
     3e8:	ff 1f       	adc	r31, r31
     3ea:	e9 50       	subi	r30, 0x09	; 9
     3ec:	f5 4f       	sbci	r31, 0xF5	; 245
     3ee:	01 90       	ld	r0, Z+
     3f0:	f0 81       	ld	r31, Z
     3f2:	e0 2d       	mov	r30, r0
        if ((AC_ACDU_FIFO_SIZE - 1) == fifo_head) {
     3f4:	89 30       	cpi	r24, 0x09	; 9
     3f6:	19 f4       	brne	.+6      	; 0x3fe <air_capture_callback+0x4a>
            fifo_head = 0;
     3f8:	10 92 eb 0a 	sts	0x0AEB, r1
     3fc:	03 c0       	rjmp	.+6      	; 0x404 <air_capture_callback+0x50>
        } else {
            fifo_head++;
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	80 93 eb 0a 	sts	0x0AEB, r24
        } // END: if ((AC_ACDU_FIFO_SIZE - 1) == fifo_head) ...
        
        items_used++;
     404:	80 91 ed 0a 	lds	r24, 0x0AED
     408:	8f 5f       	subi	r24, 0xFF	; 255
     40a:	80 93 ed 0a 	sts	0x0AED, r24
        items_free--;
     40e:	91 50       	subi	r25, 0x01	; 1
     410:	90 93 ee 0a 	sts	0x0AEE, r25
        
        /* Poll to ensure that data was sent. */
        RF230_WAIT_FOR_SPI_TX_COMPLETE();
     414:	0d b4       	in	r0, 0x2d	; 45
     416:	07 fe       	sbrs	r0, 7
     418:	fd cf       	rjmp	.-6      	; 0x414 <air_capture_callback+0x60>
        uint8_t frame_length = SPDR;
     41a:	8e b5       	in	r24, 0x2e	; 46
        
        SPDR = frame_length;
     41c:	8e bd       	out	0x2e, r24	; 46
        
        /* Set ACDU ID and RSSI while waiting for SPI to finish data transmission. */
        this_acdu->ac_id = EVENT_STREAM_AC_DATA;
     41e:	80 e5       	ldi	r24, 0x50	; 80
     420:	80 83       	st	Z, r24
        this_acdu->rssi = acdu_rssi;
     422:	80 91 0b 0b 	lds	r24, 0x0B0B
     426:	86 83       	std	Z+6, r24	; 0x06
        
        uint8_t *frame = this_acdu->frame;
        
        /* Poll to ensure that data was sent. */
        RF230_WAIT_FOR_SPI_TX_COMPLETE();
     428:	0d b4       	in	r0, 0x2d	; 45
     42a:	07 fe       	sbrs	r0, 7
     42c:	fd cf       	rjmp	.-6      	; 0x428 <air_capture_callback+0x74>
        frame_length = (SPDR & 0x7F); // Real frame length returned from the radio transceiver. And with mask to avoid overflow.
     42e:	2e b5       	in	r18, 0x2e	; 46
     430:	2f 77       	andi	r18, 0x7F	; 127
        
        /* Calculate the length of the stored ACDU in bytes. The mystical 10 bytes
         * added is the length of the non-variable length fields in an ACDU.
         */
        this_acdu->length = frame_length + 10;
     432:	82 2f       	mov	r24, r18
     434:	86 5f       	subi	r24, 0xF6	; 246
     436:	81 83       	std	Z+1, r24	; 0x01
        *frame = frame_length;
     438:	20 87       	std	Z+8, r18	; 0x08
        frame++;
     43a:	ef 01       	movw	r28, r30
     43c:	29 96       	adiw	r28, 0x09	; 9
        
        frame_length++; // Add one byte to the length for LQI.
     43e:	89 50       	subi	r24, 0x09	; 9
        
        SPDR = frame_length;
     440:	8e bd       	out	0x2e, r24	; 46
        
        /* Set ACDU timestamp while waiting for SPI to finish data transmission. */
        this_acdu->time_stamp = acdu_time_stamp;
     442:	80 91 0c 0b 	lds	r24, 0x0B0C
     446:	90 91 0d 0b 	lds	r25, 0x0B0D
     44a:	a0 91 0e 0b 	lds	r26, 0x0B0E
     44e:	b0 91 0f 0b 	lds	r27, 0x0B0F
     452:	82 83       	std	Z+2, r24	; 0x02
     454:	93 83       	std	Z+3, r25	; 0x03
     456:	a4 83       	std	Z+4, r26	; 0x04
     458:	b5 83       	std	Z+5, r27	; 0x05
        
        /* Poll to ensure that data was sent. */
        RF230_WAIT_FOR_SPI_TX_COMPLETE();   
     45a:	0d b4       	in	r0, 0x2d	; 45
     45c:	07 fe       	sbrs	r0, 7
     45e:	fd cf       	rjmp	.-6      	; 0x45a <air_capture_callback+0xa6>
 *  exploit that it takes 16 cycles to clock out one byte over the SPI as master at
 *  the highest possible speed.
 *
 *  \param[in] isr_event Event signaled by the radio transceiver.
 */
static void air_capture_callback(uint8_t isr_event) {
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	82 0f       	add	r24, r18
     466:	91 1d       	adc	r25, r1
        /* Poll to ensure that data was sent. */
        RF230_WAIT_FOR_SPI_TX_COMPLETE();   
        
        /* Upload frame. */
        do {
            uint8_t const temp_data = SPDR;
     468:	2e b5       	in	r18, 0x2e	; 46
            SPDR = temp_data; // Any data will do, and tempData is readily available. Saving cycles.
     46a:	2e bd       	out	0x2e, r18	; 46
            
            *frame = temp_data;      
     46c:	29 93       	st	Y+, r18
                
            frame++;
            frame_length--;
            RF230_WAIT_FOR_SPI_TX_COMPLETE();
     46e:	0d b4       	in	r0, 0x2d	; 45
     470:	07 fe       	sbrs	r0, 7
     472:	fd cf       	rjmp	.-6      	; 0x46e <air_capture_callback+0xba>
        } while (0 != frame_length);
     474:	c8 17       	cp	r28, r24
     476:	d9 07       	cpc	r29, r25
     478:	b9 f7       	brne	.-18     	; 0x468 <air_capture_callback+0xb4>

        RF230_SS_HIGH();
     47a:	28 9a       	sbi	0x05, 0	; 5
        
        /* Read CRC flag. */
        RF230_QUICK_SUBREGISTER_READ(RG_PHY_RSSI , 0x80, 7, (this_acdu->crc));
     47c:	28 98       	cbi	0x05, 0	; 5
     47e:	86 e8       	ldi	r24, 0x86	; 134
     480:	8e bd       	out	0x2e, r24	; 46
     482:	0d b4       	in	r0, 0x2d	; 45
     484:	07 fe       	sbrs	r0, 7
     486:	fd cf       	rjmp	.-6      	; 0x482 <air_capture_callback+0xce>
     488:	8e b5       	in	r24, 0x2e	; 46
     48a:	87 83       	std	Z+7, r24	; 0x07
     48c:	8e bd       	out	0x2e, r24	; 46
     48e:	0d b4       	in	r0, 0x2d	; 45
     490:	07 fe       	sbrs	r0, 7
     492:	fd cf       	rjmp	.-6      	; 0x48e <air_capture_callback+0xda>
     494:	8e b5       	in	r24, 0x2e	; 46
     496:	87 83       	std	Z+7, r24	; 0x07
     498:	28 9a       	sbi	0x05, 0	; 5
     49a:	87 81       	ldd	r24, Z+7	; 0x07
     49c:	88 1f       	adc	r24, r24
     49e:	88 27       	eor	r24, r24
     4a0:	88 1f       	adc	r24, r24
     4a2:	87 83       	std	Z+7, r24	; 0x07
     4a4:	26 c0       	rjmp	.+76     	; 0x4f2 <air_capture_callback+0x13e>
    } else if (RF230_RX_START_MASK == (isr_event & RF230_RX_START_MASK)) {
     4a6:	82 ff       	sbrs	r24, 2
     4a8:	1f c0       	rjmp	.+62     	; 0x4e8 <air_capture_callback+0x134>
        /* Start of frame indicated. Read RSSI and timestamp the frame. */
        acdu_time_stamp = vrt_timer_get_tick_cnt() / AC_TICK_PER_US;
     4aa:	0e 94 cd 32 	call	0x659a	; 0x659a <vrt_timer_get_tick_cnt>
     4ae:	96 95       	lsr	r25
     4b0:	87 95       	ror	r24
     4b2:	77 95       	ror	r23
     4b4:	67 95       	ror	r22
     4b6:	60 93 0c 0b 	sts	0x0B0C, r22
     4ba:	70 93 0d 0b 	sts	0x0B0D, r23
     4be:	80 93 0e 0b 	sts	0x0B0E, r24
     4c2:	90 93 0f 0b 	sts	0x0B0F, r25
        RF230_QUICK_SUBREGISTER_READ(0x06, 0x1F, 0, acdu_rssi);
     4c6:	28 98       	cbi	0x05, 0	; 5
     4c8:	86 e8       	ldi	r24, 0x86	; 134
     4ca:	8e bd       	out	0x2e, r24	; 46
     4cc:	0d b4       	in	r0, 0x2d	; 45
     4ce:	07 fe       	sbrs	r0, 7
     4d0:	fd cf       	rjmp	.-6      	; 0x4cc <air_capture_callback+0x118>
     4d2:	8e b5       	in	r24, 0x2e	; 46
     4d4:	8e bd       	out	0x2e, r24	; 46
     4d6:	0d b4       	in	r0, 0x2d	; 45
     4d8:	07 fe       	sbrs	r0, 7
     4da:	fd cf       	rjmp	.-6      	; 0x4d6 <air_capture_callback+0x122>
     4dc:	8e b5       	in	r24, 0x2e	; 46
     4de:	28 9a       	sbi	0x05, 0	; 5
     4e0:	8f 71       	andi	r24, 0x1F	; 31
     4e2:	80 93 0b 0b 	sts	0x0B0B, r24
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <air_capture_callback+0x13e>
    } else {
        /* Unknow interrupt occured for this mode. No special handling will
         * be done, except incrementing a statistical variable.
         */
        ac_unknown_isr++;
     4e8:	80 91 10 0b 	lds	r24, 0x0B10
     4ec:	8f 5f       	subi	r24, 0xFF	; 255
     4ee:	80 93 10 0b 	sts	0x0B10, r24
    } // END: if (RF230_TRX_END_MASK == (isr_event & RF230_TRX_END_MASK)) ...
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <air_capture_init>:
    
    return rf230_init_status;
}


bool air_capture_init(void) {
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
    /* Initialize local variable. */
    nmbr_of_frames        = 0;
     4fc:	10 92 f4 0a 	sts	0x0AF4, r1
     500:	10 92 f3 0a 	sts	0x0AF3, r1
    nmbr_of_frames_missed = 0;
     504:	10 92 f6 0a 	sts	0x0AF6, r1
     508:	10 92 f5 0a 	sts	0x0AF5, r1
    acdu_rssi             = 0;
     50c:	10 92 0b 0b 	sts	0x0B0B, r1
    acdu_time_stamp       = 0;
     510:	10 92 0c 0b 	sts	0x0B0C, r1
     514:	10 92 0d 0b 	sts	0x0B0D, r1
     518:	10 92 0e 0b 	sts	0x0B0E, r1
     51c:	10 92 0f 0b 	sts	0x0B0F, r1
    ac_unknown_isr        = 0;
     520:	10 92 10 0b 	sts	0x0B10, r1
    
    fifo_head  = 0;
     524:	10 92 eb 0a 	sts	0x0AEB, r1
    fifo_tail  = 0;
     528:	10 92 ec 0a 	sts	0x0AEC, r1
    items_used = 0;
     52c:	10 92 ed 0a 	sts	0x0AED, r1
    items_free = AC_ACDU_FIFO_SIZE;
     530:	8a e0       	ldi	r24, 0x0A	; 10
     532:	80 93 ee 0a 	sts	0x0AEE, r24
    
    bytes_left = 0;
     536:	10 92 ef 0a 	sts	0x0AEF, r1
    packets_left = 0;
     53a:	10 92 f0 0a 	sts	0x0AF0, r1
    data_ptr = NULL;
     53e:	10 92 f2 0a 	sts	0x0AF2, r1
     542:	10 92 f1 0a 	sts	0x0AF1, r1
 *
 *  \retval true The radio transceiver was started successfully.
 *  \retval false The radio transceiver could not be started.
 */
static bool init_rf(void) {
    (bool)rf230_init();
     546:	0e 94 26 12 	call	0x244c	; 0x244c <rf230_init>
     54a:	8b ef       	ldi	r24, 0xFB	; 251
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <air_capture_init+0x56>
     552:	00 c0       	rjmp	.+0      	; 0x554 <air_capture_init+0x5c>
     554:	00 00       	nop
    
    delay_us(TIME_TO_ENTER_P_ON);
    
    rf230_set_tst_low();
     556:	2e 98       	cbi	0x05, 6	; 5
    rf230_set_rst_low();
     558:	2d 98       	cbi	0x05, 5	; 5
    rf230_set_slptr_low();
     55a:	2c 98       	cbi	0x05, 4	; 5
     55c:	90 e1       	ldi	r25, 0x10	; 16
     55e:	9a 95       	dec	r25
     560:	f1 f7       	brne	.-4      	; 0x55e <air_capture_init+0x66>
    delay_us(TIME_RESET);    
    rf230_set_rst_high();
     562:	2d 9a       	sbi	0x05, 5	; 5
     564:	8f e5       	ldi	r24, 0x5F	; 95
     566:	99 e0       	ldi	r25, 0x09	; 9
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <air_capture_init+0x70>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <air_capture_init+0x76>
     56e:	00 00       	nop
     570:	8f e5       	ldi	r24, 0x5F	; 95
     572:	99 e0       	ldi	r25, 0x09	; 9
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <air_capture_init+0x7c>
     578:	00 c0       	rjmp	.+0      	; 0x57a <air_capture_init+0x82>
     57a:	00 00       	nop
    
    /* Could be that we were sleeping before we got here. */
    delay_us(TIME_SLEEP_TO_TRX_OFF);
    
    /* Force transition to TRX_OFF and verify. */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	6f e1       	ldi	r22, 0x1F	; 31
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	23 e0       	ldi	r18, 0x03	; 3
     584:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
     588:	8b ef       	ldi	r24, 0xFB	; 251
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <air_capture_init+0x94>
     590:	00 c0       	rjmp	.+0      	; 0x592 <air_capture_init+0x9a>
     592:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    bool rf230_init_status = false;
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	6f e1       	ldi	r22, 0x1F	; 31
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
     59e:	88 30       	cpi	r24, 0x08	; 8
     5a0:	71 f5       	brne	.+92     	; 0x5fe <air_capture_init+0x106>
    } else {
        
        /* Enable automatic CRC generation and set the ISR mask. */
        rf230_subregister_write(SR_CLKM_SHA_SEL, 0);
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	68 e0       	ldi	r22, 0x08	; 8
     5a6:	43 e0       	ldi	r20, 0x03	; 3
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        rf230_subregister_write(SR_CLKM_CTRL, 0);
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	67 e0       	ldi	r22, 0x07	; 7
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        rf230_subregister_write(SR_TX_AUTO_CRC_ON, 1);
     5ba:	85 e0       	ldi	r24, 0x05	; 5
     5bc:	60 e8       	ldi	r22, 0x80	; 128
     5be:	47 e0       	ldi	r20, 0x07	; 7
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        rf230_register_write(RG_IRQ_MASK, AC_SUPPORTED_INTERRUPT_MASK);
     5c6:	8e e0       	ldi	r24, 0x0E	; 14
     5c8:	6c e0       	ldi	r22, 0x0C	; 12
     5ca:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
        
        RF230_ENABLE_TRX_ISR();
     5ce:	80 91 6f 00 	lds	r24, 0x006F
     5d2:	80 62       	ori	r24, 0x20	; 32
     5d4:	80 93 6f 00 	sts	0x006F, r24
     5d8:	c7 ef       	ldi	r28, 0xF7	; 247
     5da:	da e0       	ldi	r29, 0x0A	; 10
    }
    
    /* Set-up the fifo of ACDUs: allocate memory and store the pointers in the FIFO. */
    for (uint8_t i = 0; i < AC_ACDU_FIFO_SIZE; i++) {
        
        acdu_t *acdu = (acdu_t *)vrt_mem_alloc(sizeof(acdu_t));
     5dc:	89 e8       	ldi	r24, 0x89	; 137
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
        
        if (NULL == acdu) {
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	59 f0       	breq	.+22     	; 0x5fe <air_capture_init+0x106>
            goto init_failed;
        } else {
            acdu_fifo[i] = acdu;
     5e8:	89 93       	st	Y+, r24
     5ea:	99 93       	st	Y+, r25
    if (true != init_rf()) {
        goto init_failed;
    }
    
    /* Set-up the fifo of ACDUs: allocate memory and store the pointers in the FIFO. */
    for (uint8_t i = 0; i < AC_ACDU_FIFO_SIZE; i++) {
     5ec:	9b e0       	ldi	r25, 0x0B	; 11
     5ee:	cb 30       	cpi	r28, 0x0B	; 11
     5f0:	d9 07       	cpc	r29, r25
     5f2:	a1 f7       	brne	.-24     	; 0x5dc <air_capture_init+0xe4>
        } else {
            acdu_fifo[i] = acdu;
        }
    }
    
    ac_state = AC_IDLE;
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	80 93 09 01 	sts	0x0109, r24
    return true;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	0f c0       	rjmp	.+30     	; 0x61c <air_capture_init+0x124>
    /* Following label defines what to do if if the initialization fails. */
    init_failed:
    
    
    /* Disable the radio transceiver and release the memory. */
    rf230_deinit();
     5fe:	0e 94 3d 12 	call	0x247a	; 0x247a <rf230_deinit>
     602:	c7 ef       	ldi	r28, 0xF7	; 247
     604:	da e0       	ldi	r29, 0x0A	; 10
    for (uint8_t i = 0; (i < AC_ACDU_FIFO_SIZE); i++) {
        vrt_mem_free(acdu_fifo[i]);
     606:	88 81       	ld	r24, Y
     608:	99 81       	ldd	r25, Y+1	; 0x01
     60a:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
        acdu_fifo[i] = (acdu_t *)NULL;
     60e:	19 92       	st	Y+, r1
     610:	19 92       	st	Y+, r1
    init_failed:
    
    
    /* Disable the radio transceiver and release the memory. */
    rf230_deinit();
    for (uint8_t i = 0; (i < AC_ACDU_FIFO_SIZE); i++) {
     612:	8b e0       	ldi	r24, 0x0B	; 11
     614:	cb 30       	cpi	r28, 0x0B	; 11
     616:	d8 07       	cpc	r29, r24
     618:	b1 f7       	brne	.-20     	; 0x606 <air_capture_init+0x10e>
        vrt_mem_free(acdu_fifo[i]);
        acdu_fifo[i] = (acdu_t *)NULL;
    }
    
    return false;
     61a:	80 e0       	ldi	r24, 0x00	; 0
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <air_capture_deinit>:


void air_capture_deinit(void) {
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
    /* Ensure that the AirCapture application has been running and memory allocated
     * before it can be teared down.
     */
    if (AC_NOT_INITIALIZED != ac_state) {
     626:	80 91 09 01 	lds	r24, 0x0109
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	89 f0       	breq	.+34     	; 0x650 <air_capture_deinit+0x2e>
     62e:	c7 ef       	ldi	r28, 0xF7	; 247
     630:	da e0       	ldi	r29, 0x0A	; 10
        /* Free allocated memory. */
        for (uint8_t i = 0; (i < AC_ACDU_FIFO_SIZE); i++) {
            vrt_mem_free(acdu_fifo[i]);
     632:	88 81       	ld	r24, Y
     634:	99 81       	ldd	r25, Y+1	; 0x01
     636:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
            acdu_fifo[i] = (acdu_t *)NULL;
     63a:	19 92       	st	Y+, r1
     63c:	19 92       	st	Y+, r1
    /* Ensure that the AirCapture application has been running and memory allocated
     * before it can be teared down.
     */
    if (AC_NOT_INITIALIZED != ac_state) {
        /* Free allocated memory. */
        for (uint8_t i = 0; (i < AC_ACDU_FIFO_SIZE); i++) {
     63e:	8b e0       	ldi	r24, 0x0B	; 11
     640:	cb 30       	cpi	r28, 0x0B	; 11
     642:	d8 07       	cpc	r29, r24
     644:	b1 f7       	brne	.-20     	; 0x632 <air_capture_deinit+0x10>
        }
        
        /* Deinit the radio transceiver and set the internal status variable to
         * reflect the new state.
         */
        rf230_deinit();
     646:	0e 94 3d 12 	call	0x247a	; 0x247a <rf230_deinit>
        ac_state = AC_NOT_INITIALIZED;
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	80 93 09 01 	sts	0x0109, r24
    } // END: if (AC_NOT_INITIALIZED != ac_state) ...
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <air_capture_task>:

/* This function must be called periodically to get captured data from the 
 * RF230 device driver over the USB interface to the connected PC. Or scan data 
 * to the PC.
 */
void air_capture_task(void) {
     656:	df 93       	push	r29
     658:	cf 93       	push	r28
     65a:	0f 92       	push	r0
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
    /* The air_capture_task function has two main function to fullfill:
     * - If the ac_state equals AC_BUSY_CAPTURING it will send AirCapture data if available.
     * - If the ac_state equals AC_BUSY_SCANNING it will send scan data if available.
     */
    if (AC_BUSY_CAPTURING == ac_state) { 
     660:	80 91 09 01 	lds	r24, 0x0109
     664:	84 30       	cpi	r24, 0x04	; 4
     666:	09 f0       	breq	.+2      	; 0x66a <air_capture_task+0x14>
     668:	95 c0       	rjmp	.+298    	; 0x794 <air_capture_task+0x13e>
        /* Check if there is data to be transmitted. */
        if (0 == items_used) {
     66a:	80 91 ed 0a 	lds	r24, 0x0AED
     66e:	88 23       	and	r24, r24
     670:	09 f4       	brne	.+2      	; 0x674 <air_capture_task+0x1e>
     672:	98 c0       	rjmp	.+304    	; 0x7a4 <air_capture_task+0x14e>
            return;
        }
        
        /* Select the event EP. */
        UENUM = EP_EVENT;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	80 93 e9 00 	sts	0x00E9, r24
        
        /* Check that it is possible to fill at least one bank (64 bytes) in the
         * DPRAM.
         */
        if ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
     67a:	80 91 e8 00 	lds	r24, 0x00E8
     67e:	80 ff       	sbrs	r24, 0
     680:	91 c0       	rjmp	.+290    	; 0x7a4 <air_capture_task+0x14e>
            return;
        }
        
        /* ACK TX_IN. */
        UEINTX &= ~(1 << TXINI);
     682:	80 91 e8 00 	lds	r24, 0x00E8
     686:	8e 7f       	andi	r24, 0xFE	; 254
     688:	80 93 e8 00 	sts	0x00E8, r24
         * One acdu must be taken from the fifo's tail, however the tail's
         * position will not be updated until the complete acdu is written. This
         * scheme is used to prevent data loss in the event pump, with varying
         * poll frequency from the PC.
         */
        if (0 == bytes_left) {
     68c:	80 91 ef 0a 	lds	r24, 0x0AEF
     690:	88 23       	and	r24, r24
     692:	71 f5       	brne	.+92     	; 0x6f0 <air_capture_task+0x9a>
            if (0 == packets_left) {
     694:	80 91 f0 0a 	lds	r24, 0x0AF0
     698:	88 23       	and	r24, r24
     69a:	09 f5       	brne	.+66     	; 0x6de <air_capture_task+0x88>
                /* Get new acdu, since all bytes and all packets in transaction
                 * are sent. The calculations below assumes an EP size of 64 bytes.
                 * The driver has been implemented for USB bulk transmission.
                 */
                data_ptr = (uint8_t *)acdu_fifo[fifo_tail];
     69c:	e0 91 ec 0a 	lds	r30, 0x0AEC
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	e9 50       	subi	r30, 0x09	; 9
     6a8:	f5 4f       	sbci	r31, 0xF5	; 245
     6aa:	01 90       	ld	r0, Z+
     6ac:	f0 81       	ld	r31, Z
     6ae:	e0 2d       	mov	r30, r0
     6b0:	f0 93 f2 0a 	sts	0x0AF2, r31
     6b4:	e0 93 f1 0a 	sts	0x0AF1, r30
                bytes_left = *(data_ptr + 1);
     6b8:	21 81       	ldd	r18, Z+1	; 0x01
     6ba:	20 93 ef 0a 	sts	0x0AEF, r18
                packets_left = (uint8_t)(((uint16_t)(bytes_left + 64 - 1)) >> 6);
     6be:	82 2f       	mov	r24, r18
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	cf 96       	adiw	r24, 0x3f	; 63
     6c4:	46 e0       	ldi	r20, 0x06	; 6
     6c6:	96 95       	lsr	r25
     6c8:	87 95       	ror	r24
     6ca:	4a 95       	dec	r20
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <air_capture_task+0x70>
     6ce:	80 93 f0 0a 	sts	0x0AF0, r24
                if (0 == (bytes_left % 64)) { packets_left++ ; }
     6d2:	2f 73       	andi	r18, 0x3F	; 63
     6d4:	69 f4       	brne	.+26     	; 0x6f0 <air_capture_task+0x9a>
     6d6:	8f 5f       	subi	r24, 0xFF	; 255
     6d8:	80 93 f0 0a 	sts	0x0AF0, r24
     6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <air_capture_task+0x9a>
            } else if (1 == packets_left) {
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	31 f4       	brne	.+12     	; 0x6ee <air_capture_task+0x98>
                /* Send Zero Length Packet and then update tail pointer. */
                UEINTX &= ~(1 << FIFOCON);
     6e2:	80 91 e8 00 	lds	r24, 0x00E8
     6e6:	8f 77       	andi	r24, 0x7F	; 127
     6e8:	80 93 e8 00 	sts	0x00E8, r24
     6ec:	30 c0       	rjmp	.+96     	; 0x74e <air_capture_task+0xf8>
                return;
            } else {
                /* Turn the orange LED on to signal a level 2. error. The 
                 * application should be restarted.
                 */
                LED_ORANGE_ON();
     6ee:	76 98       	cbi	0x0e, 6	; 14
     6f0:	80 91 ef 0a 	lds	r24, 0x0AEF
     6f4:	81 50       	subi	r24, 0x01	; 1
     6f6:	e0 91 f1 0a 	lds	r30, 0x0AF1
     6fa:	f0 91 f2 0a 	lds	r31, 0x0AF2
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <air_capture_task+0xac>
        /* At least one byte to send. */
        do {
            UEDATX = *data_ptr;
            data_ptr++;
            bytes_left--;
        } while ((0 != bytes_left) && ((UEINTX & (1 << RWAL)) == (1 << RWAL)));
     700:	82 2f       	mov	r24, r18
            }// END: if (0 == packets_left) ...
        } // END: if ((0 == bytes_left) ...
        
        /* At least one byte to send. */
        do {
            UEDATX = *data_ptr;
     702:	91 91       	ld	r25, Z+
     704:	90 93 f1 00 	sts	0x00F1, r25
            data_ptr++;
            bytes_left--;
        } while ((0 != bytes_left) && ((UEINTX & (1 << RWAL)) == (1 << RWAL)));
     708:	88 23       	and	r24, r24
     70a:	39 f4       	brne	.+14     	; 0x71a <air_capture_task+0xc4>
     70c:	e0 93 f1 0a 	sts	0x0AF1, r30
     710:	f0 93 f2 0a 	sts	0x0AF2, r31
     714:	10 92 ef 0a 	sts	0x0AEF, r1
     718:	0c c0       	rjmp	.+24     	; 0x732 <air_capture_task+0xdc>
     71a:	90 91 e8 00 	lds	r25, 0x00E8
     71e:	28 2f       	mov	r18, r24
     720:	21 50       	subi	r18, 0x01	; 1
     722:	95 fd       	sbrc	r25, 5
     724:	ed cf       	rjmp	.-38     	; 0x700 <air_capture_task+0xaa>
     726:	e0 93 f1 0a 	sts	0x0AF1, r30
     72a:	f0 93 f2 0a 	sts	0x0AF2, r31
     72e:	80 93 ef 0a 	sts	0x0AEF, r24
        
        /* Either 64 bytes or the last byte in a packet is written. */
        packets_left--;
     732:	90 91 f0 0a 	lds	r25, 0x0AF0
     736:	91 50       	subi	r25, 0x01	; 1
     738:	90 93 f0 0a 	sts	0x0AF0, r25
        
        /* ACK writing to the bank. */
        UEINTX &= ~(1 << FIFOCON);
     73c:	20 91 e8 00 	lds	r18, 0x00E8
     740:	2f 77       	andi	r18, 0x7F	; 127
     742:	20 93 e8 00 	sts	0x00E8, r18
        
        /* Check if it is time to move tail. */
        if ((0 == bytes_left) && (0 == packets_left)) {
     746:	88 23       	and	r24, r24
     748:	69 f5       	brne	.+90     	; 0x7a4 <air_capture_task+0x14e>
     74a:	99 23       	and	r25, r25
     74c:	59 f5       	brne	.+86     	; 0x7a4 <air_capture_task+0x14e>
            ENTER_CRITICAL_REGION();
     74e:	8f b7       	in	r24, 0x3f	; 63
     750:	89 83       	std	Y+1, r24	; 0x01
     752:	f8 94       	cli
                
            if ((AC_ACDU_FIFO_SIZE - 1) == fifo_tail) {
     754:	80 91 ec 0a 	lds	r24, 0x0AEC
     758:	89 30       	cpi	r24, 0x09	; 9
     75a:	19 f4       	brne	.+6      	; 0x762 <air_capture_task+0x10c>
                fifo_tail = 0;
     75c:	10 92 ec 0a 	sts	0x0AEC, r1
     760:	03 c0       	rjmp	.+6      	; 0x768 <air_capture_task+0x112>
            } else {
                fifo_tail++;
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	80 93 ec 0a 	sts	0x0AEC, r24
            } // END: if ((AC_ACDU_FIFO_SIZE - 1) == fifo_tail) ...
                
            items_used--;
     768:	80 91 ed 0a 	lds	r24, 0x0AED
     76c:	81 50       	subi	r24, 0x01	; 1
     76e:	80 93 ed 0a 	sts	0x0AED, r24
            items_free++;
     772:	80 91 ee 0a 	lds	r24, 0x0AEE
     776:	8f 5f       	subi	r24, 0xFF	; 255
     778:	80 93 ee 0a 	sts	0x0AEE, r24
                
            nmbr_of_frames++;
     77c:	80 91 f3 0a 	lds	r24, 0x0AF3
     780:	90 91 f4 0a 	lds	r25, 0x0AF4
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	90 93 f4 0a 	sts	0x0AF4, r25
     78a:	80 93 f3 0a 	sts	0x0AF3, r24
                
            LEAVE_CRITICAL_REGION(); 
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	8f bf       	out	0x3f, r24	; 63
     792:	08 c0       	rjmp	.+16     	; 0x7a4 <air_capture_task+0x14e>
        } // END: if ((0 == bytes_left) && (0 == packets_left)) ...
    } else if (AC_BUSY_SCANNING == ac_state) {
     794:	80 31       	cpi	r24, 0x10	; 16
     796:	31 f4       	brne	.+12     	; 0x7a4 <air_capture_task+0x14e>
        /* Not implemented yet, so only a dummy is written for debug purposes. */
        usb_ep_write(EP_EVENT, 8, (uint8_t *)"SCANSCAN");
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	68 e0       	ldi	r22, 0x08	; 8
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	51 e0       	ldi	r21, 0x01	; 1
     7a0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <usb_ep_write>
    } else {
        /* Do nothing. Any other state than AC_BUSY_CAPTURING and AC_BUSY_SCANNING
         * does not require any handling.
         */
    } // END: if (AC_BUSY_CAPTURING != ac_state) ...
}
     7a4:	0f 90       	pop	r0
     7a6:	cf 91       	pop	r28
     7a8:	df 91       	pop	r29
     7aa:	08 95       	ret

000007ac <air_capture_set_channel>:

/* This function will set new channel for the radio transceiver to work on. */
bool air_capture_set_channel(uint8_t channel) {
     7ac:	1f 93       	push	r17
     7ae:	18 2f       	mov	r17, r24
    
    /* Perform sanity checks to see if it is  possible to run the function. */
    if (AC_IDLE != ac_state) { return false; }
     7b0:	80 91 09 01 	lds	r24, 0x0109
     7b4:	82 30       	cpi	r24, 0x02	; 2
     7b6:	49 f5       	brne	.+82     	; 0x80a <air_capture_set_channel+0x5e>
    if ((channel < AC_MIN_CHANNEL) || (channel > AC_MAX_CHANNEL)) { return false; }
     7b8:	81 2f       	mov	r24, r17
     7ba:	8b 50       	subi	r24, 0x0B	; 11
     7bc:	80 31       	cpi	r24, 0x10	; 16
     7be:	28 f5       	brcc	.+74     	; 0x80a <air_capture_set_channel+0x5e>
     7c0:	8f e5       	ldi	r24, 0x5F	; 95
     7c2:	99 e0       	ldi	r25, 0x09	; 9
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <air_capture_set_channel+0x18>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <air_capture_set_channel+0x1e>
     7ca:	00 00       	nop
    /* Fix for timing issue with setting channel immediately after setting CMD_MODE_AC - JLW */
    /* Could be that we were sleeping before we got here. */
    delay_us(TIME_SLEEP_TO_TRX_OFF);

    /* Force TRX_OFF mode and wait for transition to complete. */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	6f e1       	ldi	r22, 0x1F	; 31
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	23 e0       	ldi	r18, 0x03	; 3
     7d4:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
     7d8:	8b ef       	ldi	r24, 0xFB	; 251
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <air_capture_set_channel+0x30>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <air_capture_set_channel+0x36>
     7e2:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    /* Set channel and verify. */
    bool ac_set_channel_status = false;
    if (TRX_OFF == rf230_subregister_read(SR_TRX_STATUS)) {
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	6f e1       	ldi	r22, 0x1F	; 31
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
     7ee:	88 30       	cpi	r24, 0x08	; 8
     7f0:	61 f4       	brne	.+24     	; 0x80a <air_capture_set_channel+0x5e>
        /* Set the new channel and verify. */
        rf230_subregister_write(SR_CHANNEL, channel);
     7f2:	6f e1       	ldi	r22, 0x1F	; 31
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	21 2f       	mov	r18, r17
     7f8:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        if (channel != rf230_subregister_read(SR_CHANNEL)) {
     7fc:	88 e0       	ldi	r24, 0x08	; 8
     7fe:	6f e1       	ldi	r22, 0x1F	; 31
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
         */
    } // END: if (AC_BUSY_CAPTURING != ac_state) ...
}

/* This function will set new channel for the radio transceiver to work on. */
bool air_capture_set_channel(uint8_t channel) {
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	18 13       	cpse	r17, r24
    /* Force TRX_OFF mode and wait for transition to complete. */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    /* Set channel and verify. */
    bool ac_set_channel_status = false;
     80a:	90 e0       	ldi	r25, 0x00	; 0
            ac_set_channel_status = true;
        } // END: if (channel != rf230_subregister_read(SR_CHANNEL)) ...
    } // END: if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_set_channel_status;
}
     80c:	89 2f       	mov	r24, r25
     80e:	1f 91       	pop	r17
     810:	08 95       	ret

00000812 <air_capture_open_stream>:

/* This function will try to start capturing frames from the air. */
bool air_capture_open_stream(void) {
     812:	df 93       	push	r29
     814:	cf 93       	push	r28
     816:	0f 92       	push	r0
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
    /* Check that the AirCapture application is initialized and not busy. */
    if (AC_IDLE != ac_state) { return false; }
     81c:	80 91 09 01 	lds	r24, 0x0109
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	09 f0       	breq	.+2      	; 0x826 <air_capture_open_stream+0x14>
     824:	48 c0       	rjmp	.+144    	; 0x8b6 <air_capture_open_stream+0xa4>
    
    /* Initialize the frame pool in the RF230 device driver and set the radio 
     * transceiver in receive mode. 
     */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
     826:	6f e1       	ldi	r22, 0x1F	; 31
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	23 e0       	ldi	r18, 0x03	; 3
     82c:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
     830:	8b ef       	ldi	r24, 0xFB	; 251
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <air_capture_open_stream+0x22>
     838:	00 c0       	rjmp	.+0      	; 0x83a <air_capture_open_stream+0x28>
     83a:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    bool ac_open_stream_status = false;
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) { 
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	6f e1       	ldi	r22, 0x1F	; 31
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
     846:	88 30       	cpi	r24, 0x08	; 8
     848:	b1 f5       	brne	.+108    	; 0x8b6 <air_capture_open_stream+0xa4>
    } else {
        /* Do transition from TRX_OFF to RF_ON. */
        rf230_subregister_write(SR_TRX_CMD, RX_ON);
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	6f e1       	ldi	r22, 0x1F	; 31
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	26 e0       	ldi	r18, 0x06	; 6
     852:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
     856:	87 e6       	ldi	r24, 0x67	; 103
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <air_capture_open_stream+0x48>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <air_capture_open_stream+0x4e>
     860:	00 00       	nop
        delay_us(TIME_TRX_OFF_TO_PLL_ACTIVE);
        
        /* Verify that the state transition to RX_ON was successful. */
        if (RX_ON != rf230_subregister_read(SR_TRX_STATUS)) {
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	6f e1       	ldi	r22, 0x1F	; 31
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
     86c:	86 30       	cpi	r24, 0x06	; 6
     86e:	19 f5       	brne	.+70     	; 0x8b6 <air_capture_open_stream+0xa4>
        } else {
            /* Reset the event FIFO. */
            ENTER_CRITICAL_REGION();
     870:	8f b7       	in	r24, 0x3f	; 63
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	f8 94       	cli
            
            fifo_head = 0;
     876:	10 92 eb 0a 	sts	0x0AEB, r1
            fifo_tail = 0;
     87a:	10 92 ec 0a 	sts	0x0AEC, r1
            items_used = 0;
     87e:	10 92 ed 0a 	sts	0x0AED, r1
            items_free = AC_ACDU_FIFO_SIZE;
     882:	8a e0       	ldi	r24, 0x0A	; 10
     884:	80 93 ee 0a 	sts	0x0AEE, r24
            
            bytes_left = 0;
     888:	10 92 ef 0a 	sts	0x0AEF, r1
            packets_left = 0;
     88c:	10 92 f0 0a 	sts	0x0AF0, r1
            data_ptr = NULL;
     890:	10 92 f2 0a 	sts	0x0AF2, r1
     894:	10 92 f1 0a 	sts	0x0AF1, r1
            
            nmbr_of_frames = 0;
     898:	10 92 f4 0a 	sts	0x0AF4, r1
     89c:	10 92 f3 0a 	sts	0x0AF3, r1
            
            LEAVE_CRITICAL_REGION();
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	8f bf       	out	0x3f, r24	; 63
            
            /* Set callback for captured frames and update AirCapture status. */
            rf230_set_callback_handler(air_capture_callback);
     8a4:	8a ed       	ldi	r24, 0xDA	; 218
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 20 13 	call	0x2640	; 0x2640 <rf230_set_callback_handler>
            ac_state = AC_BUSY_CAPTURING;
     8ac:	84 e0       	ldi	r24, 0x04	; 4
     8ae:	80 93 09 01 	sts	0x0109, r24
            ac_open_stream_status = true;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <air_capture_open_stream+0xa6>
     * transceiver in receive mode. 
     */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    bool ac_open_stream_status = false;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
            ac_open_stream_status = true;
        } // END: if (RX_ON != rf230_subregister_read(SR_TRX_STATUS)) ...
    } // END: if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_open_stream_status;
}
     8b8:	0f 90       	pop	r0
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	08 95       	ret

000008c0 <air_capture_close_stream>:

/* This function stops the radio transceiver from capturing frames. */
bool air_capture_close_stream(void) {
    /* Perform sanity checks to see if it is  possible to run the function. */
    if (AC_BUSY_CAPTURING != ac_state) { return false; }
     8c0:	80 91 09 01 	lds	r24, 0x0109
     8c4:	84 30       	cpi	r24, 0x04	; 4
     8c6:	d1 f4       	brne	.+52     	; 0x8fc <air_capture_close_stream+0x3c>
    
    /* Close stream. */
    rf230_clear_callback_handler();
     8c8:	0e 94 44 13 	call	0x2688	; 0x2688 <rf230_clear_callback_handler>
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	6f e1       	ldi	r22, 0x1F	; 31
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	23 e0       	ldi	r18, 0x03	; 3
     8d4:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
     8d8:	8b ef       	ldi	r24, 0xFB	; 251
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <air_capture_close_stream+0x1c>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <air_capture_close_stream+0x22>
     8e2:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    /* Verify that the TRX_OFF state was entered. */
    bool ac_close_stream_status = false;
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) { 
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	6f e1       	ldi	r22, 0x1F	; 31
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
     8ee:	88 30       	cpi	r24, 0x08	; 8
     8f0:	39 f4       	brne	.+14     	; 0x900 <air_capture_close_stream+0x40>
    } else {
        ac_state = AC_IDLE;
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	80 93 09 01 	sts	0x0109, r24
        ac_close_stream_status = true;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	08 95       	ret
}

/* This function stops the radio transceiver from capturing frames. */
bool air_capture_close_stream(void) {
    /* Perform sanity checks to see if it is  possible to run the function. */
    if (AC_BUSY_CAPTURING != ac_state) { return false; }
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	08 95       	ret
    rf230_clear_callback_handler();
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    /* Verify that the TRX_OFF state was entered. */
    bool ac_close_stream_status = false;
     900:	80 e0       	ldi	r24, 0x00	; 0
        ac_state = AC_IDLE;
        ac_close_stream_status = true;
    } // END: if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_close_stream_status;
}
     902:	08 95       	ret

00000904 <air_capture_start_channel_scan>:
/* This function is used to start a scan on the current channel. */
bool air_capture_start_channel_scan(uint8_t scan_type, uint8_t scan_duration) {
    /* Not implemented yet. Below code is just to prevent generation of warning
     * in the compiler.
     */
    rf230_set_callback_handler(air_capture_scan_callback);
     904:	8f ea       	ldi	r24, 0xAF	; 175
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	0e 94 20 13 	call	0x2640	; 0x2640 <rf230_set_callback_handler>
    rf230_clear_callback_handler();
     90c:	0e 94 44 13 	call	0x2688	; 0x2688 <rf230_clear_callback_handler>
    return false;
}
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	08 95       	ret

00000914 <air_capture_stop_channel_scan>:

/* This function will stop the scan even if it is not yet finished. */
bool air_capture_stop_channel_scan(void) {
    /* Perform sanity checks to see if it is  possible to run the function. */
    if (AC_BUSY_SCANNING != ac_state) { return false; }
     914:	80 91 09 01 	lds	r24, 0x0109
     918:	80 31       	cpi	r24, 0x10	; 16
     91a:	d1 f4       	brne	.+52     	; 0x950 <air_capture_stop_channel_scan+0x3c>
    
    /* Stop scan. */
    rf230_clear_callback_handler();
     91c:	0e 94 44 13 	call	0x2688	; 0x2688 <rf230_clear_callback_handler>
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	6f e1       	ldi	r22, 0x1F	; 31
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	23 e0       	ldi	r18, 0x03	; 3
     928:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
     92c:	8b ef       	ldi	r24, 0xFB	; 251
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <air_capture_stop_channel_scan+0x1c>
     934:	00 c0       	rjmp	.+0      	; 0x936 <air_capture_stop_channel_scan+0x22>
     936:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    /* Verify that the TRX_OFF state was entered. */
    bool ac_stop_scan_status = false;    
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) { 
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	6f e1       	ldi	r22, 0x1F	; 31
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
     942:	88 30       	cpi	r24, 0x08	; 8
     944:	39 f4       	brne	.+14     	; 0x954 <air_capture_stop_channel_scan+0x40>
    } else {
        ac_state = AC_IDLE;
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	80 93 09 01 	sts	0x0109, r24
        ac_stop_scan_status = true;
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	08 95       	ret
}

/* This function will stop the scan even if it is not yet finished. */
bool air_capture_stop_channel_scan(void) {
    /* Perform sanity checks to see if it is  possible to run the function. */
    if (AC_BUSY_SCANNING != ac_state) { return false; }
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	08 95       	ret
    rf230_clear_callback_handler();
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    /* Verify that the TRX_OFF state was entered. */
    bool ac_stop_scan_status = false;    
     954:	80 e0       	ldi	r24, 0x00	; 0
        ac_state = AC_IDLE;
        ac_stop_scan_status = true;
    } // END: if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_stop_scan_status;
}
     956:	08 95       	ret

00000958 <air_capture_inject_frame>:

/* This function will inject an user defined frame onto the current channel. */
uint8_t air_capture_inject_frame(uint8_t length, uint8_t *frame) {
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	18 2f       	mov	r17, r24
     960:	eb 01       	movw	r28, r22

    /* Perform sanity checks to see if it is  possible to run the function. */
    if ((0 == length) || (RF230_MAX_FRAME_LENGTH < length)) { return 1; }
     962:	18 16       	cp	r1, r24
     964:	7c f5       	brge	.+94     	; 0x9c4 <air_capture_inject_frame+0x6c>
    if (NULL == frame) { return 2; }
     966:	20 97       	sbiw	r28, 0x00	; 0
     968:	79 f1       	breq	.+94     	; 0x9c8 <air_capture_inject_frame+0x70>
    
    /* Check that the AirCapture application is initialized and not busy. */
    if (AC_IDLE != ac_state) { return 3; }
     96a:	80 91 09 01 	lds	r24, 0x0109
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	69 f5       	brne	.+90     	; 0x9cc <air_capture_inject_frame+0x74>
    
    /* Check that the radio transceiver is in TRX_OFF. */
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) { return 4; }
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	6f e1       	ldi	r22, 0x1F	; 31
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
     97c:	88 30       	cpi	r24, 0x08	; 8
     97e:	41 f5       	brne	.+80     	; 0x9d0 <air_capture_inject_frame+0x78>
    
    /* Go to PLL_ON and send the frame. */
    rf230_subregister_write(SR_TRX_CMD, CMD_PLL_ON);
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	6f e1       	ldi	r22, 0x1F	; 31
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	29 e0       	ldi	r18, 0x09	; 9
     988:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
     98c:	87 e6       	ldi	r24, 0x67	; 103
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	f1 f7       	brne	.-4      	; 0x990 <air_capture_inject_frame+0x38>
     994:	00 c0       	rjmp	.+0      	; 0x996 <air_capture_inject_frame+0x3e>
     996:	00 00       	nop
    delay_us(TIME_TRX_OFF_TO_PLL_ACTIVE);
    
    bool ac_inject_frame_status = false;
    
    /* Verify that the PLL_ON state was entered. */
    if (PLL_ON != rf230_subregister_read(SR_TRX_STATUS)) { 
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	6f e1       	ldi	r22, 0x1F	; 31
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
     9a2:	89 30       	cpi	r24, 0x09	; 9
     9a4:	b9 f4       	brne	.+46     	; 0x9d4 <air_capture_inject_frame+0x7c>
    } else {
        rf230_set_callback_handler(air_capture_transmission_callback);
     9a6:	80 eb       	ldi	r24, 0xB0	; 176
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	0e 94 20 13 	call	0x2640	; 0x2640 <rf230_set_callback_handler>
        
        /* Send frame with pin start. */
        rf230_set_slptr_high();
     9ae:	2c 9a       	sbi	0x05, 4	; 5
        rf230_set_slptr_low();
     9b0:	2c 98       	cbi	0x05, 4	; 5
        rf230_frame_write(length, frame);
     9b2:	81 2f       	mov	r24, r17
     9b4:	be 01       	movw	r22, r28
     9b6:	0e 94 b4 12 	call	0x2568	; 0x2568 <rf230_frame_write>
        
        /* Update state information. */
        ac_state = AC_BUSY_TRANSMITTING;
     9ba:	80 e2       	ldi	r24, 0x20	; 32
     9bc:	80 93 09 01 	sts	0x0109, r24
        ac_inject_frame_status = true;
    } // END: if (PLL_ON != rf230_subregister_read(SR_TRX_STATUS)) ...
	
	if (ac_inject_frame_status == true) {
		return 0;
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <air_capture_inject_frame+0x7e>

/* This function will inject an user defined frame onto the current channel. */
uint8_t air_capture_inject_frame(uint8_t length, uint8_t *frame) {

    /* Perform sanity checks to see if it is  possible to run the function. */
    if ((0 == length) || (RF230_MAX_FRAME_LENGTH < length)) { return 1; }
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	07 c0       	rjmp	.+14     	; 0x9d6 <air_capture_inject_frame+0x7e>
    if (NULL == frame) { return 2; }
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <air_capture_inject_frame+0x7e>
    
    /* Check that the AirCapture application is initialized and not busy. */
    if (AC_IDLE != ac_state) { return 3; }
     9cc:	83 e0       	ldi	r24, 0x03	; 3
     9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <air_capture_inject_frame+0x7e>
    
    /* Check that the radio transceiver is in TRX_OFF. */
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) { return 4; }
     9d0:	84 e0       	ldi	r24, 0x04	; 4
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <air_capture_inject_frame+0x7e>
    } // END: if (PLL_ON != rf230_subregister_read(SR_TRX_STATUS)) ...
	
	if (ac_inject_frame_status == true) {
		return 0;
	} else {
	    	return 5;
     9d4:	85 e0       	ldi	r24, 0x05	; 5
	}
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	08 95       	ret

000009de <air_capture_jammer_on>:

/* This function starts the jammer. */
bool air_capture_jammer_on(void) {
     9de:	1f 93       	push	r17
    /* Check that the AirCapture application is initialized and not busy. */
    if (AC_IDLE != ac_state) { return false; }
     9e0:	80 91 09 01 	lds	r24, 0x0109
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	a1 f5       	brne	.+104    	; 0xa50 <air_capture_jammer_on+0x72>
    
    /* Check that the radio transceiver is in TRX_OFF. */
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) { return false; }
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	6f e1       	ldi	r22, 0x1F	; 31
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
     9f2:	18 2f       	mov	r17, r24
     9f4:	88 30       	cpi	r24, 0x08	; 8
     9f6:	61 f5       	brne	.+88     	; 0xa50 <air_capture_jammer_on+0x72>
    
    /* Download set of randomized data and start PBRS mode. See Appendix A in the
     * RF230's datasheet for detailed instructions on how to use the different
     * internal test modes.
     */
    rf230_frame_write_P(sizeof(jammer_frame), jammer_frame);
     9f8:	8f e7       	ldi	r24, 0x7F	; 127
     9fa:	68 ee       	ldi	r22, 0xE8	; 232
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <rf230_frame_write_P>
    rf230_register_write(0x36, 0x0F);
     a02:	86 e3       	ldi	r24, 0x36	; 54
     a04:	6f e0       	ldi	r22, 0x0F	; 15
     a06:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    rf230_register_write(0x3D, 0x00);
     a0a:	8d e3       	ldi	r24, 0x3D	; 61
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    rf230_set_tst_high();
     a12:	2e 9a       	sbi	0x05, 6	; 5
    
    /* Do state transition to PLL_ON and verify. */
    rf230_subregister_write(SR_TRX_CMD, CMD_PLL_ON);
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	6f e1       	ldi	r22, 0x1F	; 31
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	29 e0       	ldi	r18, 0x09	; 9
     a1c:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
     a20:	87 e6       	ldi	r24, 0x67	; 103
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <air_capture_jammer_on+0x46>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <air_capture_jammer_on+0x4c>
     a2a:	00 00       	nop
    delay_us(TIME_TRX_OFF_TO_PLL_ACTIVE);
    
    bool ac_jammer_on_status = false;
    if (PLL_ON != rf230_subregister_read(SR_TRX_STATUS)) { 
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	6f e1       	ldi	r22, 0x1F	; 31
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
     a36:	89 30       	cpi	r24, 0x09	; 9
     a38:	19 f0       	breq	.+6      	; 0xa40 <air_capture_jammer_on+0x62>
        /* Reset the radio transceiver. */
        (bool)rf230_init();
     a3a:	0e 94 26 12 	call	0x244c	; 0x244c <rf230_init>
     a3e:	08 c0       	rjmp	.+16     	; 0xa50 <air_capture_jammer_on+0x72>
    } else {
        /* Start PBRS mode and update AirCapture status. */
        rf230_register_write(0x02, 0x02);
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	62 e0       	ldi	r22, 0x02	; 2
     a44:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
        ac_state = AC_BUSY_JAMMING;
     a48:	10 93 09 01 	sts	0x0109, r17
        ac_jammer_on_status = true;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <air_capture_jammer_on+0x74>
bool air_capture_jammer_on(void) {
    /* Check that the AirCapture application is initialized and not busy. */
    if (AC_IDLE != ac_state) { return false; }
    
    /* Check that the radio transceiver is in TRX_OFF. */
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) { return false; }
     a50:	80 e0       	ldi	r24, 0x00	; 0
        ac_state = AC_BUSY_JAMMING;
        ac_jammer_on_status = true;
    } // END: if (PLL_ON != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_jammer_on_status;
}
     a52:	1f 91       	pop	r17
     a54:	08 95       	ret

00000a56 <air_capture_jammer_off>:

/* This function stops the jammer. */
bool air_capture_jammer_off(void) {
    /* Perform sanity checks to see if it is  possible to run the function. */
    if (AC_BUSY_JAMMING != ac_state) { return false; }
     a56:	80 91 09 01 	lds	r24, 0x0109
     a5a:	88 30       	cpi	r24, 0x08	; 8
     a5c:	49 f4       	brne	.+18     	; 0xa70 <air_capture_jammer_off+0x1a>
    
    /* Stop scan: Reset the radio transceiver by re-initializing it. */ 
    bool ac_jammer_off_status = false;
    if (true != rf230_init()) {
     a5e:	0e 94 26 12 	call	0x244c	; 0x244c <rf230_init>
     a62:	88 23       	and	r24, r24
     a64:	39 f0       	breq	.+14     	; 0xa74 <air_capture_jammer_off+0x1e>
    } else {
        ac_state = AC_IDLE;
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	80 93 09 01 	sts	0x0109, r24
        ac_jammer_off_status = true;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	08 95       	ret
}

/* This function stops the jammer. */
bool air_capture_jammer_off(void) {
    /* Perform sanity checks to see if it is  possible to run the function. */
    if (AC_BUSY_JAMMING != ac_state) { return false; }
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	08 95       	ret
    
    /* Stop scan: Reset the radio transceiver by re-initializing it. */ 
    bool ac_jammer_off_status = false;
     a74:	80 e0       	ldi	r24, 0x00	; 0
        ac_state = AC_IDLE;
        ac_jammer_off_status = true;
    } // END: if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) ...
    
    return ac_jammer_off_status;
}
     a76:	08 95       	ret

00000a78 <cmd_nwk_data_confirm_callback>:
                           /* NWK Layer callbacks */


static void cmd_nwk_data_confirm_callback(nlde_data_conf_t *ndc) {
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     a78:	24 e0       	ldi	r18, 0x04	; 4
     a7a:	20 93 e9 00 	sts	0x00E9, r18
    Usb_send_control_in();
     a7e:	20 91 e8 00 	lds	r18, 0x00E8
     a82:	2e 7f       	andi	r18, 0xFE	; 254
     a84:	20 93 e8 00 	sts	0x00E8, r18
    
    if (NWK_SUCCESS != (ndc->Status)) {
     a88:	fc 01       	movw	r30, r24
     a8a:	80 81       	ld	r24, Z
     a8c:	88 23       	and	r24, r24
     a8e:	11 f0       	breq	.+4      	; 0xa94 <cmd_nwk_data_confirm_callback+0x1c>
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
     a90:	8b e8       	ldi	r24, 0x8B	; 139
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <cmd_nwk_data_confirm_callback+0x1e>
    } else {
        Usb_write_byte(RESP_SUCCESS);
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	80 93 f1 00 	sts	0x00F1, r24
    }
    
    Usb_send_in();
     a9a:	80 91 e8 00 	lds	r24, 0x00E8
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	80 93 e8 00 	sts	0x00E8, r24
            
    /* Free any allocated memory. */
    MEM_FREE(ndr);
     aa4:	80 91 23 0b 	lds	r24, 0x0B23
     aa8:	90 91 24 0b 	lds	r25, 0x0B24
     aac:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
}
     ab0:	08 95       	ret

00000ab2 <cmd_nwk_leave_confirm_callback>:
}


static void cmd_nwk_leave_confirm_callback(nlme_leave_conf_t *nlc) {
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     ab2:	24 e0       	ldi	r18, 0x04	; 4
     ab4:	20 93 e9 00 	sts	0x00E9, r18
    Usb_send_control_in();
     ab8:	20 91 e8 00 	lds	r18, 0x00E8
     abc:	2e 7f       	andi	r18, 0xFE	; 254
     abe:	20 93 e8 00 	sts	0x00E8, r18
    
    if (NWK_SUCCESS != (nlc->Status)) {
     ac2:	fc 01       	movw	r30, r24
     ac4:	80 85       	ldd	r24, Z+8	; 0x08
     ac6:	88 23       	and	r24, r24
     ac8:	11 f0       	breq	.+4      	; 0xace <cmd_nwk_leave_confirm_callback+0x1c>
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
     aca:	8b e8       	ldi	r24, 0x8B	; 139
     acc:	01 c0       	rjmp	.+2      	; 0xad0 <cmd_nwk_leave_confirm_callback+0x1e>
    } else {
        Usb_write_byte(RESP_SUCCESS);
     ace:	80 e8       	ldi	r24, 0x80	; 128
     ad0:	80 93 f1 00 	sts	0x00F1, r24
    }
    
    Usb_send_in();
     ad4:	80 91 e8 00 	lds	r24, 0x00E8
     ad8:	8f 77       	andi	r24, 0x7F	; 127
     ada:	80 93 e8 00 	sts	0x00E8, r24
            
    /* Free any allocated memory. Allocated in: cmd_if_process_nlme_leave_request. */
    MEM_FREE(nlr);
     ade:	80 91 2a 0b 	lds	r24, 0x0B2A
     ae2:	90 91 2b 0b 	lds	r25, 0x0B2B
     ae6:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
}
     aea:	08 95       	ret

00000aec <cmd_nwk_discovery_confirm_callback>:
}


static void cmd_nwk_discovery_confirm_callback(nlme_network_discovery_conf_t *ndc) {
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     aec:	24 e0       	ldi	r18, 0x04	; 4
     aee:	20 93 e9 00 	sts	0x00E9, r18
    Usb_send_control_in();
     af2:	20 91 e8 00 	lds	r18, 0x00E8
     af6:	2e 7f       	andi	r18, 0xFE	; 254
     af8:	20 93 e8 00 	sts	0x00E8, r18
    
    if (NWK_SUCCESS != (ndc->Status)) {
     afc:	fc 01       	movw	r30, r24
     afe:	ef 5b       	subi	r30, 0xBF	; 191
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	80 81       	ld	r24, Z
     b04:	88 23       	and	r24, r24
     b06:	11 f0       	breq	.+4      	; 0xb0c <cmd_nwk_discovery_confirm_callback+0x20>
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
     b08:	8b e8       	ldi	r24, 0x8B	; 139
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <cmd_nwk_discovery_confirm_callback+0x22>
    } else {
        Usb_write_byte(RESP_SUCCESS);
     b0c:	80 e8       	ldi	r24, 0x80	; 128
     b0e:	80 93 f1 00 	sts	0x00F1, r24
    }
    
    Usb_send_in();
     b12:	80 91 e8 00 	lds	r24, 0x00E8
     b16:	8f 77       	andi	r24, 0x7F	; 127
     b18:	80 93 e8 00 	sts	0x00E8, r24
            
    /* Free any allocated memory. Allocated in: cmd_if_process_nlme_discovery_request. */
    MEM_FREE(nndr);
     b1c:	80 91 2c 0b 	lds	r24, 0x0B2C
     b20:	90 91 2d 0b 	lds	r25, 0x0B2D
     b24:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
}
     b28:	08 95       	ret

00000b2a <usb_transaction_done>:
                           /* USB callbacks */


static void usb_transaction_done(uint16_t length, uint8_t *data) {
    /* Check that the minimum command length of one byte is received. */
    if (0 == length) {
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	99 f4       	brne	.+38     	; 0xb54 <usb_transaction_done+0x2a>
        /* Wrong length of command. */
        Usb_select_endpoint(EP_IN);
     b2e:	84 e0       	ldi	r24, 0x04	; 4
     b30:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
     b34:	80 91 e8 00 	lds	r24, 0x00E8
     b38:	8e 7f       	andi	r24, 0xFE	; 254
     b3a:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_SYNTACTICAL_ERROR);
     b3e:	81 e8       	ldi	r24, 0x81	; 129
     b40:	80 93 f1 00 	sts	0x00F1, r24
        Usb_send_in();
     b44:	80 91 e8 00 	lds	r24, 0x00E8
     b48:	8f 77       	andi	r24, 0x7F	; 127
     b4a:	80 93 e8 00 	sts	0x00E8, r24
        
        usb_ep_ack_transaction();
     b4e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <usb_ep_ack_transaction>
     b52:	08 95       	ret
    } else if (false == vrt_post_event(cmd_if_dispatch, (void *)data)) {
     b54:	85 ed       	ldi	r24, 0xD5	; 213
     b56:	96 e0       	ldi	r25, 0x06	; 6
     b58:	0e 94 85 29 	call	0x530a	; 0x530a <vrt_post_event>
     b5c:	88 23       	and	r24, r24
     b5e:	91 f4       	brne	.+36     	; 0xb84 <usb_transaction_done+0x5a>
        /* Command could not be posted into the event system, notify the user about this. */
        Usb_select_endpoint(EP_IN);
     b60:	84 e0       	ldi	r24, 0x04	; 4
     b62:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
     b66:	80 91 e8 00 	lds	r24, 0x00E8
     b6a:	8e 7f       	andi	r24, 0xFE	; 254
     b6c:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_VRT_KERNEL_ERROR);
     b70:	85 e9       	ldi	r24, 0x95	; 149
     b72:	80 93 f1 00 	sts	0x00F1, r24
        Usb_send_in();
     b76:	80 91 e8 00 	lds	r24, 0x00E8
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	80 93 e8 00 	sts	0x00E8, r24
        
        usb_ep_ack_transaction();
     b80:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <usb_ep_ack_transaction>
     b84:	08 95       	ret

00000b86 <cmd_nwk_leave_indication>:
    /* Free any allocated memory. Allocated in: cmd_if_process_nlme_leave_request. */
    MEM_FREE(nlr);
}


static void cmd_nwk_leave_indication(nlme_leave_ind_t *nli) {
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
    /* Check if there is room to add this NWK_EVENT. */
    if (0 == items_free) { nwk_events_missed++; return; }
     b90:	20 91 22 0b 	lds	r18, 0x0B22
     b94:	22 23       	and	r18, r18
     b96:	51 f4       	brne	.+20     	; 0xbac <cmd_nwk_leave_indication+0x26>
     b98:	80 91 25 0b 	lds	r24, 0x0B25
     b9c:	90 91 26 0b 	lds	r25, 0x0B26
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	90 93 26 0b 	sts	0x0B26, r25
     ba6:	80 93 25 0b 	sts	0x0B25, r24
     baa:	2e c0       	rjmp	.+92     	; 0xc08 <cmd_nwk_leave_indication+0x82>
    
    uint8_t *this_event = nwk_event_fifo[fifo_head];
     bac:	e0 91 27 0b 	lds	r30, 0x0B27
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	ea 5e       	subi	r30, 0xEA	; 234
     bb8:	f4 4f       	sbci	r31, 0xF4	; 244
     bba:	01 90       	ld	r0, Z+
     bbc:	f0 81       	ld	r31, Z
     bbe:	e0 2d       	mov	r30, r0
    
    ENTER_CRITICAL_REGION();
     bc0:	2f b7       	in	r18, 0x3f	; 63
     bc2:	29 83       	std	Y+1, r18	; 0x01
     bc4:	f8 94       	cli
    
    if ((NWK_EVENT_FIFO_SIZE - 1) == fifo_head) {
     bc6:	20 91 27 0b 	lds	r18, 0x0B27
     bca:	24 30       	cpi	r18, 0x04	; 4
     bcc:	19 f4       	brne	.+6      	; 0xbd4 <cmd_nwk_leave_indication+0x4e>
        fifo_head = 0;
     bce:	10 92 27 0b 	sts	0x0B27, r1
     bd2:	03 c0       	rjmp	.+6      	; 0xbda <cmd_nwk_leave_indication+0x54>
    } else {
        fifo_head++;
     bd4:	2f 5f       	subi	r18, 0xFF	; 255
     bd6:	20 93 27 0b 	sts	0x0B27, r18
    }
        
    items_used++;
     bda:	20 91 12 0b 	lds	r18, 0x0B12
     bde:	2f 5f       	subi	r18, 0xFF	; 255
     be0:	20 93 12 0b 	sts	0x0B12, r18
    items_free--;
     be4:	20 91 22 0b 	lds	r18, 0x0B22
     be8:	21 50       	subi	r18, 0x01	; 1
     bea:	20 93 22 0b 	sts	0x0B22, r18
    
    LEAVE_CRITICAL_REGION();
     bee:	29 81       	ldd	r18, Y+1	; 0x01
     bf0:	2f bf       	out	0x3f, r18	; 63
    
    uint8_t index = 0;
    
    /* Start building the New Leave event. */
    this_event[index++] = EVENT_NWK_LEAVE;
     bf2:	25 e5       	ldi	r18, 0x55	; 85
     bf4:	20 83       	st	Z, r18
    this_event[index++] = 10;
     bf6:	2a e0       	ldi	r18, 0x0A	; 10
     bf8:	21 83       	std	Z+1, r18	; 0x01
    memcpy((void *)(&this_event[index]), (void *)(&(nli->DeviceAddress)), sizeof(uint64_t));
     bfa:	32 96       	adiw	r30, 0x02	; 2
     bfc:	dc 01       	movw	r26, r24
     bfe:	88 e0       	ldi	r24, 0x08	; 8
     c00:	0d 90       	ld	r0, X+
     c02:	01 92       	st	Z+, r0
     c04:	81 50       	subi	r24, 0x01	; 1
     c06:	e1 f7       	brne	.-8      	; 0xc00 <cmd_nwk_leave_indication+0x7a>
    index += sizeof(uint64_t);
}
     c08:	0f 90       	pop	r0
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <cmd_nwk_join_indication>:
    /* Free any allocated memory. Allocated in: cmd_if_process_nlme_join_request. */
    MEM_FREE(njr);
}


static void cmd_nwk_join_indication(nlme_join_ind_t *nji) {
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	0f 92       	push	r0
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
    /* Check if there is room to add this NWK_EVENT. */
    if (0 == items_free) { nwk_events_missed++; return; }
     c1a:	20 91 22 0b 	lds	r18, 0x0B22
     c1e:	22 23       	and	r18, r18
     c20:	51 f4       	brne	.+20     	; 0xc36 <cmd_nwk_join_indication+0x26>
     c22:	80 91 25 0b 	lds	r24, 0x0B25
     c26:	90 91 26 0b 	lds	r25, 0x0B26
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	90 93 26 0b 	sts	0x0B26, r25
     c30:	80 93 25 0b 	sts	0x0B25, r24
     c34:	32 c0       	rjmp	.+100    	; 0xc9a <cmd_nwk_join_indication+0x8a>
    
    uint8_t *this_event = nwk_event_fifo[fifo_head];
     c36:	e0 91 27 0b 	lds	r30, 0x0B27
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	ea 5e       	subi	r30, 0xEA	; 234
     c42:	f4 4f       	sbci	r31, 0xF4	; 244
     c44:	01 90       	ld	r0, Z+
     c46:	f0 81       	ld	r31, Z
     c48:	e0 2d       	mov	r30, r0
    
    ENTER_CRITICAL_REGION();
     c4a:	2f b7       	in	r18, 0x3f	; 63
     c4c:	29 83       	std	Y+1, r18	; 0x01
     c4e:	f8 94       	cli
    
    if ((NWK_EVENT_FIFO_SIZE - 1) == fifo_head) {
     c50:	20 91 27 0b 	lds	r18, 0x0B27
     c54:	24 30       	cpi	r18, 0x04	; 4
     c56:	19 f4       	brne	.+6      	; 0xc5e <cmd_nwk_join_indication+0x4e>
        fifo_head = 0;
     c58:	10 92 27 0b 	sts	0x0B27, r1
     c5c:	03 c0       	rjmp	.+6      	; 0xc64 <cmd_nwk_join_indication+0x54>
    } else {
        fifo_head++;
     c5e:	2f 5f       	subi	r18, 0xFF	; 255
     c60:	20 93 27 0b 	sts	0x0B27, r18
    }
        
    items_used++;
     c64:	20 91 12 0b 	lds	r18, 0x0B12
     c68:	2f 5f       	subi	r18, 0xFF	; 255
     c6a:	20 93 12 0b 	sts	0x0B12, r18
    items_free--;
     c6e:	20 91 22 0b 	lds	r18, 0x0B22
     c72:	21 50       	subi	r18, 0x01	; 1
     c74:	20 93 22 0b 	sts	0x0B22, r18
    
    LEAVE_CRITICAL_REGION();
     c78:	29 81       	ldd	r18, Y+1	; 0x01
     c7a:	2f bf       	out	0x3f, r18	; 63
    
    uint8_t index = 0;

    /* Start building the New Join event. */
    this_event[index++] = EVENT_NWK_JOIN;
     c7c:	24 e5       	ldi	r18, 0x54	; 84
     c7e:	20 83       	st	Z, r18
    this_event[index++] = 12;
     c80:	2c e0       	ldi	r18, 0x0C	; 12
     c82:	21 83       	std	Z+1, r18	; 0x01
    memcpy((void *)(&this_event[index]), (void *)(&(nji->ShortAddress)), sizeof(uint16_t));
     c84:	dc 01       	movw	r26, r24
     c86:	8d 91       	ld	r24, X+
     c88:	9d 91       	ld	r25, X+
     c8a:	93 83       	std	Z+3, r25	; 0x03
     c8c:	82 83       	std	Z+2, r24	; 0x02
    index += sizeof(uint16_t);
    memcpy((void *)(&this_event[index]), (void *)(&(nji->ExtendedAddress)), sizeof(uint64_t));
     c8e:	34 96       	adiw	r30, 0x04	; 4
     c90:	88 e0       	ldi	r24, 0x08	; 8
     c92:	0d 90       	ld	r0, X+
     c94:	01 92       	st	Z+, r0
     c96:	81 50       	subi	r24, 0x01	; 1
     c98:	e1 f7       	brne	.-8      	; 0xc92 <cmd_nwk_join_indication+0x82>
}
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <cmd_nwk_data_indication>:
    /* Free any allocated memory. */
    MEM_FREE(ndr);
}


static void cmd_nwk_data_indication(nlde_data_ind_t *ndi) {
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	fc 01       	movw	r30, r24
    /* Check if there is room to add this NWK_EVENT. */
    if (0 == items_free) { nwk_events_missed++; return; }
     cae:	80 91 22 0b 	lds	r24, 0x0B22
     cb2:	88 23       	and	r24, r24
     cb4:	51 f4       	brne	.+20     	; 0xcca <cmd_nwk_data_indication+0x28>
     cb6:	80 91 25 0b 	lds	r24, 0x0B25
     cba:	90 91 26 0b 	lds	r25, 0x0B26
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	90 93 26 0b 	sts	0x0B26, r25
     cc4:	80 93 25 0b 	sts	0x0B25, r24
     cc8:	4a c0       	rjmp	.+148    	; 0xd5e <cmd_nwk_data_indication+0xbc>
    
    uint8_t *this_event = nwk_event_fifo[fifo_head];
     cca:	a0 91 27 0b 	lds	r26, 0x0B27
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	aa 0f       	add	r26, r26
     cd2:	bb 1f       	adc	r27, r27
     cd4:	aa 5e       	subi	r26, 0xEA	; 234
     cd6:	b4 4f       	sbci	r27, 0xF4	; 244
     cd8:	0d 90       	ld	r0, X+
     cda:	bc 91       	ld	r27, X
     cdc:	a0 2d       	mov	r26, r0
    
    ENTER_CRITICAL_REGION();
     cde:	8f b7       	in	r24, 0x3f	; 63
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	f8 94       	cli
    
    if ((NWK_EVENT_FIFO_SIZE - 1) == fifo_head) {
     ce4:	80 91 27 0b 	lds	r24, 0x0B27
     ce8:	84 30       	cpi	r24, 0x04	; 4
     cea:	19 f4       	brne	.+6      	; 0xcf2 <cmd_nwk_data_indication+0x50>
        fifo_head = 0;
     cec:	10 92 27 0b 	sts	0x0B27, r1
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <cmd_nwk_data_indication+0x56>
    } else {
        fifo_head++;
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	80 93 27 0b 	sts	0x0B27, r24
    }
        
    items_used++;
     cf8:	80 91 12 0b 	lds	r24, 0x0B12
     cfc:	8f 5f       	subi	r24, 0xFF	; 255
     cfe:	80 93 12 0b 	sts	0x0B12, r24
    items_free--;
     d02:	80 91 22 0b 	lds	r24, 0x0B22
     d06:	81 50       	subi	r24, 0x01	; 1
     d08:	80 93 22 0b 	sts	0x0B22, r24
    
    LEAVE_CRITICAL_REGION();
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	8f bf       	out	0x3f, r24	; 63
    
    uint8_t index = 0;
    
    /* Start building the New Data event. */
    this_event[index++] = EVENT_NWK_DATA;
     d10:	83 e5       	ldi	r24, 0x53	; 83
     d12:	8c 93       	st	X, r24
    this_event[index++] = 8 + (ndi->NsduLength);
     d14:	86 81       	ldd	r24, Z+6	; 0x06
     d16:	88 5f       	subi	r24, 0xF8	; 248
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	8c 93       	st	X, r24
     d1c:	11 97       	sbiw	r26, 0x01	; 1
    memcpy((void *)(&this_event[index]), (void *)(&(ndi->DstAddr)), sizeof(uint16_t));
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
     d20:	92 81       	ldd	r25, Z+2	; 0x02
     d22:	13 96       	adiw	r26, 0x03	; 3
     d24:	9c 93       	st	X, r25
     d26:	8e 93       	st	-X, r24
     d28:	12 97       	sbiw	r26, 0x02	; 2
    index += sizeof(uint16_t);
    memcpy((void *)(&this_event[index]), (void *)(&(ndi->SrcAddr)), sizeof(uint16_t));
     d2a:	83 81       	ldd	r24, Z+3	; 0x03
     d2c:	94 81       	ldd	r25, Z+4	; 0x04
     d2e:	15 96       	adiw	r26, 0x05	; 5
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	14 97       	sbiw	r26, 0x04	; 4
    index += sizeof(uint16_t);
    this_event[index++] = ndi->LinkQuality;
     d36:	85 81       	ldd	r24, Z+5	; 0x05
     d38:	16 96       	adiw	r26, 0x06	; 6
     d3a:	8c 93       	st	X, r24
     d3c:	16 97       	sbiw	r26, 0x06	; 6
    this_event[index++] = ndi->NsduLength;
     d3e:	86 81       	ldd	r24, Z+6	; 0x06
     d40:	17 96       	adiw	r26, 0x07	; 7
     d42:	8c 93       	st	X, r24
     d44:	17 97       	sbiw	r26, 0x07	; 7
    memcpy((void *)(&this_event[index]),(void *)(ndi->Nsdu), (ndi->NsduLength));
     d46:	bd 01       	movw	r22, r26
     d48:	68 5f       	subi	r22, 0xF8	; 248
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	46 81       	ldd	r20, Z+6	; 0x06
     d4e:	9f 01       	movw	r18, r30
     d50:	29 5f       	subi	r18, 0xF9	; 249
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	cb 01       	movw	r24, r22
     d56:	b9 01       	movw	r22, r18
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	0e 94 c2 33 	call	0x6784	; 0x6784 <memcpy>
}
     d5e:	0f 90       	pop	r0
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <cmd_nwk_join_confirm_callback>:


static void cmd_nwk_join_confirm_callback(nlme_join_conf_t *njc) {
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     d66:	24 e0       	ldi	r18, 0x04	; 4
     d68:	20 93 e9 00 	sts	0x00E9, r18
    Usb_send_control_in();
     d6c:	20 91 e8 00 	lds	r18, 0x00E8
     d70:	2e 7f       	andi	r18, 0xFE	; 254
     d72:	20 93 e8 00 	sts	0x00E8, r18
    
    if (NWK_SUCCESS != (njc->Status)) {
     d76:	fc 01       	movw	r30, r24
     d78:	84 81       	ldd	r24, Z+4	; 0x04
     d7a:	88 23       	and	r24, r24
     d7c:	11 f0       	breq	.+4      	; 0xd82 <cmd_nwk_join_confirm_callback+0x1c>
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
     d7e:	8b e8       	ldi	r24, 0x8B	; 139
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <cmd_nwk_join_confirm_callback+0x28>
    } else {
        IEEE802_15_4_SET_RX_ON_WHEN_IDLE(true);
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 93 24 11 	sts	0x1124, r24
        (uint8_t)ieee802_15_4_rx_enable();
     d88:	0e 94 06 23 	call	0x460c	; 0x460c <ieee802_15_4_rx_enable>
        Usb_write_byte(RESP_SUCCESS);
     d8c:	80 e8       	ldi	r24, 0x80	; 128
     d8e:	80 93 f1 00 	sts	0x00F1, r24
    }
    
    Usb_send_in();
     d92:	80 91 e8 00 	lds	r24, 0x00E8
     d96:	8f 77       	andi	r24, 0x7F	; 127
     d98:	80 93 e8 00 	sts	0x00E8, r24
            
    /* Free any allocated memory. Allocated in: cmd_if_process_nlme_join_request. */
    MEM_FREE(njr);
     d9c:	80 91 28 0b 	lds	r24, 0x0B28
     da0:	90 91 29 0b 	lds	r25, 0x0B29
     da4:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
}
     da8:	08 95       	ret

00000daa <cmd_if_dispatch>:
    /* Release the transaction buffer. */
    usb_ep_ack_transaction();
}


static void cmd_if_dispatch(void *raw_cmd) {
     daa:	9f 92       	push	r9
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	ec 01       	movw	r28, r24
    
    Usb_select_endpoint(EP_IN);
     dc2:	84 e0       	ldi	r24, 0x04	; 4
     dc4:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
     dc8:	80 91 e8 00 	lds	r24, 0x00E8
     dcc:	8e 7f       	andi	r24, 0xFE	; 254
     dce:	80 93 e8 00 	sts	0x00E8, r24
    UEINTX |= (1 << RXOUTI);
     dd2:	80 91 e8 00 	lds	r24, 0x00E8
     dd6:	84 60       	ori	r24, 0x04	; 4
     dd8:	80 93 e8 00 	sts	0x00E8, r24
    /* First byte in all defined commands equals the command type. This byte is
     * used to execute the associated command handler.
     */
    uint8_t cmd = *(uint8_t *)raw_cmd;
    
    switch (cmd) {
     ddc:	e8 81       	ld	r30, Y
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	e8 32       	cpi	r30, 0x28	; 40
     de2:	f1 05       	cpc	r31, r1
     de4:	08 f0       	brcs	.+2      	; 0xde8 <cmd_if_dispatch+0x3e>
     de6:	fa c2       	rjmp	.+1524   	; 0x13dc <cmd_if_dispatch+0x632>
     de8:	e4 5b       	subi	r30, 0xB4	; 180
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	ee 0f       	add	r30, r30
     dee:	ff 1f       	adc	r31, r31
     df0:	05 90       	lpm	r0, Z+
     df2:	f4 91       	lpm	r31, Z+
     df4:	e0 2d       	mov	r30, r0
     df6:	09 94       	ijmp
}


static void cmd_if_sign_on(void *cmd_sign_on) {
    /* Respond to the CMD_SIGN_ON. */
    Usb_select_endpoint(EP_IN);
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
     dfe:	80 91 e8 00 	lds	r24, 0x00E8
     e02:	8e 7f       	andi	r24, 0xFE	; 254
     e04:	80 93 e8 00 	sts	0x00E8, r24
    
    Usb_write_byte(RESP_SIGN_ON);
     e08:	84 e8       	ldi	r24, 0x84	; 132
     e0a:	80 93 f1 00 	sts	0x00F1, r24
    Usb_write_byte(10);
     e0e:	8a e0       	ldi	r24, 0x0A	; 10
     e10:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('K');
     e14:	8b e4       	ldi	r24, 0x4B	; 75
     e16:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('I');
     e1a:	89 e4       	ldi	r24, 0x49	; 73
     e1c:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('L');
     e20:	8c e4       	ldi	r24, 0x4C	; 76
     e22:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('L');
     e26:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('E');
     e2a:	85 e4       	ldi	r24, 0x45	; 69
     e2c:	80 93 f1 00 	sts	0x00F1, r24
	Usb_write_byte('R');
     e30:	82 e5       	ldi	r24, 0x52	; 82
     e32:	80 93 f1 00 	sts	0x00F1, r24
    Usb_write_byte('B');
     e36:	82 e4       	ldi	r24, 0x42	; 66
     e38:	80 93 f1 00 	sts	0x00F1, r24
    Usb_write_byte('0');
     e3c:	80 e3       	ldi	r24, 0x30	; 48
     e3e:	80 93 f1 00 	sts	0x00F1, r24
    Usb_write_byte('0');
     e42:	80 93 f1 00 	sts	0x00F1, r24
    Usb_write_byte('1');
     e46:	81 e3       	ldi	r24, 0x31	; 49
     e48:	d2 c2       	rjmp	.+1444   	; 0x13ee <cmd_if_dispatch+0x644>
static void cmd_get_parameter(void *cmd_get_parameter) {
    /* Cast the raw command into the correct type. */
    cmd_get_parameter_t *cgp = (cmd_get_parameter_t *)cmd_get_parameter;
    
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
     e4a:	84 e0       	ldi	r24, 0x04	; 4
     e4c:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
     e50:	80 91 e8 00 	lds	r24, 0x00E8
     e54:	8e 7f       	andi	r24, 0xFE	; 254
     e56:	80 93 e8 00 	sts	0x00E8, r24
    
    if (PARAM_NWK_MAX_CHILDREN == (cgp->parameter)) {
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	88 23       	and	r24, r24
     e5e:	41 f4       	brne	.+16     	; 0xe70 <cmd_if_dispatch+0xc6>
        Usb_write_byte(RESP_GET_PARAMETER);
     e60:	85 e8       	ldi	r24, 0x85	; 133
     e62:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(0x01);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(ZIGBEE_MAX_NMBR_OF_CHILDREN);
     e6c:	89 e1       	ldi	r24, 0x19	; 25
     e6e:	bf c2       	rjmp	.+1406   	; 0x13ee <cmd_if_dispatch+0x644>
    } else if (PARAM_NWK_MAX_ROUTRES == (cgp->parameter)) {
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	21 f4       	brne	.+8      	; 0xe7c <cmd_if_dispatch+0xd2>
        Usb_write_byte(RESP_GET_PARAMETER);
     e74:	95 e8       	ldi	r25, 0x85	; 133
     e76:	90 93 f1 00 	sts	0x00F1, r25
     e7a:	06 c0       	rjmp	.+12     	; 0xe88 <cmd_if_dispatch+0xde>
        Usb_write_byte(0x01);
        Usb_write_byte(ZIGBEE_MAX_NMBR_OF_ROUTERS);
    } else if (PARAM_NWK_MAX_DEPTH == (cgp->parameter)) {
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	39 f4       	brne	.+14     	; 0xe8e <cmd_if_dispatch+0xe4>
        Usb_write_byte(RESP_GET_PARAMETER);
     e80:	85 e8       	ldi	r24, 0x85	; 133
     e82:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(0x01);
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 f1 00 	sts	0x00F1, r24
     e8c:	b0 c2       	rjmp	.+1376   	; 0x13ee <cmd_if_dispatch+0x644>
        Usb_write_byte(ZIGBEE_MAX_NWK_DEPTH);
    } else if (PARAM_SW_REV == (cgp->parameter)) {
     e8e:	80 3c       	cpi	r24, 0xC0	; 192
     e90:	61 f4       	brne	.+24     	; 0xeaa <cmd_if_dispatch+0x100>
        Usb_write_byte(RESP_GET_PARAMETER);
     e92:	85 e8       	ldi	r24, 0x85	; 133
     e94:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(0x02);
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(RZRAVEN_FW_MAJ);
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte(RZRAVEN_FW_MIN);
     ea4:	10 92 f1 00 	sts	0x00F1, r1
     ea8:	a4 c2       	rjmp	.+1352   	; 0x13f2 <cmd_if_dispatch+0x648>
    } else if (PARAM_IEEE_ADDRESS == (cgp->parameter)) {
     eaa:	81 3c       	cpi	r24, 0xC1	; 193
     eac:	09 f0       	breq	.+2      	; 0xeb0 <cmd_if_dispatch+0x106>
     eae:	27 c1       	rjmp	.+590    	; 0x10fe <cmd_if_dispatch+0x354>
        Usb_write_byte(RESP_GET_PARAMETER);
     eb0:	85 e8       	ldi	r24, 0x85	; 133
     eb2:	80 93 f1 00 	sts	0x00F1, r24
        Usb_write_byte((ieee_address >> 8*0) & 0xFF);
     eb6:	10 91 0a 01 	lds	r17, 0x010A
     eba:	f0 90 0b 01 	lds	r15, 0x010B
     ebe:	e0 90 0c 01 	lds	r14, 0x010C
     ec2:	d0 90 0d 01 	lds	r13, 0x010D
     ec6:	c0 90 0e 01 	lds	r12, 0x010E
     eca:	b0 90 0f 01 	lds	r11, 0x010F
     ece:	a0 90 10 01 	lds	r10, 0x0110
     ed2:	90 90 11 01 	lds	r9, 0x0111
     ed6:	10 93 f1 00 	sts	0x00F1, r17
        Usb_write_byte((ieee_address >> 8*1) & 0xFF);
     eda:	21 2f       	mov	r18, r17
     edc:	3f 2d       	mov	r19, r15
     ede:	4e 2d       	mov	r20, r14
     ee0:	5d 2d       	mov	r21, r13
     ee2:	6c 2d       	mov	r22, r12
     ee4:	7b 2d       	mov	r23, r11
     ee6:	8a 2d       	mov	r24, r10
     ee8:	99 2d       	mov	r25, r9
     eea:	08 e0       	ldi	r16, 0x08	; 8
     eec:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__lshrdi3>
     ef0:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*2) & 0xFF);
     ef4:	21 2f       	mov	r18, r17
     ef6:	3f 2d       	mov	r19, r15
     ef8:	4e 2d       	mov	r20, r14
     efa:	5d 2d       	mov	r21, r13
     efc:	6c 2d       	mov	r22, r12
     efe:	7b 2d       	mov	r23, r11
     f00:	8a 2d       	mov	r24, r10
     f02:	99 2d       	mov	r25, r9
     f04:	00 e1       	ldi	r16, 0x10	; 16
     f06:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__lshrdi3>
     f0a:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*3) & 0xFF);
     f0e:	21 2f       	mov	r18, r17
     f10:	3f 2d       	mov	r19, r15
     f12:	4e 2d       	mov	r20, r14
     f14:	5d 2d       	mov	r21, r13
     f16:	6c 2d       	mov	r22, r12
     f18:	7b 2d       	mov	r23, r11
     f1a:	8a 2d       	mov	r24, r10
     f1c:	99 2d       	mov	r25, r9
     f1e:	08 e1       	ldi	r16, 0x18	; 24
     f20:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__lshrdi3>
     f24:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*4) & 0xFF);
     f28:	21 2f       	mov	r18, r17
     f2a:	3f 2d       	mov	r19, r15
     f2c:	4e 2d       	mov	r20, r14
     f2e:	5d 2d       	mov	r21, r13
     f30:	6c 2d       	mov	r22, r12
     f32:	7b 2d       	mov	r23, r11
     f34:	8a 2d       	mov	r24, r10
     f36:	99 2d       	mov	r25, r9
     f38:	00 e2       	ldi	r16, 0x20	; 32
     f3a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__lshrdi3>
     f3e:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*5) & 0xFF);
     f42:	21 2f       	mov	r18, r17
     f44:	3f 2d       	mov	r19, r15
     f46:	4e 2d       	mov	r20, r14
     f48:	5d 2d       	mov	r21, r13
     f4a:	6c 2d       	mov	r22, r12
     f4c:	7b 2d       	mov	r23, r11
     f4e:	8a 2d       	mov	r24, r10
     f50:	99 2d       	mov	r25, r9
     f52:	08 e2       	ldi	r16, 0x28	; 40
     f54:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__lshrdi3>
     f58:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*6) & 0xFF);
     f5c:	21 2f       	mov	r18, r17
     f5e:	3f 2d       	mov	r19, r15
     f60:	4e 2d       	mov	r20, r14
     f62:	5d 2d       	mov	r21, r13
     f64:	6c 2d       	mov	r22, r12
     f66:	7b 2d       	mov	r23, r11
     f68:	8a 2d       	mov	r24, r10
     f6a:	99 2d       	mov	r25, r9
     f6c:	00 e3       	ldi	r16, 0x30	; 48
     f6e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__lshrdi3>
     f72:	20 93 f1 00 	sts	0x00F1, r18
        Usb_write_byte((ieee_address >> 8*7) & 0xFF);
     f76:	21 2f       	mov	r18, r17
     f78:	3f 2d       	mov	r19, r15
     f7a:	4e 2d       	mov	r20, r14
     f7c:	5d 2d       	mov	r21, r13
     f7e:	6c 2d       	mov	r22, r12
     f80:	7b 2d       	mov	r23, r11
     f82:	8a 2d       	mov	r24, r10
     f84:	99 2d       	mov	r25, r9
     f86:	08 e3       	ldi	r16, 0x38	; 56
     f88:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__lshrdi3>
     f8c:	20 93 f1 00 	sts	0x00F1, r18
     f90:	30 c2       	rjmp	.+1120   	; 0x13f2 <cmd_if_dispatch+0x648>
static void cmd_set_mode(void *cmd_set_mode) {
    /* Cast the raw command to the correct type. */
    cmd_set_mode_t *sm = (cmd_set_mode_t *)cmd_set_mode;
    
    /* Reset internal variables. */
    fifo_head  = 0;
     f92:	10 92 27 0b 	sts	0x0B27, r1
    fifo_tail  = 0;
     f96:	10 92 15 0b 	sts	0x0B15, r1
    items_used = 0;
     f9a:	10 92 12 0b 	sts	0x0B12, r1
    items_free = NWK_EVENT_FIFO_SIZE;
     f9e:	85 e0       	ldi	r24, 0x05	; 5
     fa0:	80 93 22 0b 	sts	0x0B22, r24
    bytes_left = 0;
     fa4:	10 92 13 0b 	sts	0x0B13, r1
    packets_left = 0;
     fa8:	10 92 14 0b 	sts	0x0B14, r1
    data_ptr = NULL;
     fac:	10 92 21 0b 	sts	0x0B21, r1
     fb0:	10 92 20 0b 	sts	0x0B20, r1
    nwk_events_missed = 0;
     fb4:	10 92 26 0b 	sts	0x0B26, r1
     fb8:	10 92 25 0b 	sts	0x0B25, r1
    
    /* Tear down any old modes that could be running. */
    air_capture_deinit();
     fbc:	0e 94 11 03 	call	0x622	; 0x622 <air_capture_deinit>
    zigbee_deinit();
     fc0:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <zigbee_deinit>
        
    cmd_if_state = CMD_IF_INITIALIZED;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	80 93 11 0b 	sts	0x0B11, r24
    uint8_t set_mode_status = RESP_SEMANTICAL_ERROR;
    
    if (CMD_MODE_AC == (sm->mode)) {
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	88 23       	and	r24, r24
     fce:	31 f4       	brne	.+12     	; 0xfdc <cmd_if_dispatch+0x232>
        if (true != air_capture_init()) {
     fd0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <air_capture_init>
     fd4:	88 23       	and	r24, r24
     fd6:	51 f1       	breq	.+84     	; 0x102c <cmd_if_dispatch+0x282>
            set_mode_status = RESP_HW_TIMEOUT;
        } else {
            cmd_if_state = CMD_IF_AC_MODE;
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	23 c0       	rjmp	.+70     	; 0x1022 <cmd_if_dispatch+0x278>
            set_mode_status = RESP_SUCCESS;
        }
    } else if (CMD_MODE_NWK == (sm->mode)) {
     fdc:	83 30       	cpi	r24, 0x03	; 3
     fde:	21 f5       	brne	.+72     	; 0x1028 <cmd_if_dispatch+0x27e>
        if (true != zigbee_init(ieee_address)){
     fe0:	20 91 0a 01 	lds	r18, 0x010A
     fe4:	30 91 0b 01 	lds	r19, 0x010B
     fe8:	40 91 0c 01 	lds	r20, 0x010C
     fec:	50 91 0d 01 	lds	r21, 0x010D
     ff0:	60 91 0e 01 	lds	r22, 0x010E
     ff4:	70 91 0f 01 	lds	r23, 0x010F
     ff8:	80 91 10 01 	lds	r24, 0x0110
     ffc:	90 91 11 01 	lds	r25, 0x0111
    1000:	0e 94 24 2a 	call	0x5448	; 0x5448 <zigbee_init>
    1004:	88 23       	and	r24, r24
    1006:	91 f0       	breq	.+36     	; 0x102c <cmd_if_dispatch+0x282>
            set_mode_status = RESP_HW_TIMEOUT;
        } else {
            /* Set callbacks from ZigBee NWK layer. */
            zigbee_set_nlde_data_indication(cmd_nwk_data_indication);
    1008:	81 e5       	ldi	r24, 0x51	; 81
    100a:	96 e0       	ldi	r25, 0x06	; 6
    100c:	0e 94 b3 2a 	call	0x5566	; 0x5566 <zigbee_set_nlde_data_indication>
            zigbee_set_nlme_join_indication(cmd_nwk_join_indication);
    1010:	88 e0       	ldi	r24, 0x08	; 8
    1012:	96 e0       	ldi	r25, 0x06	; 6
    1014:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <zigbee_set_nlme_join_indication>
            zigbee_set_nlme_leave_indication(cmd_nwk_leave_indication);
    1018:	83 ec       	ldi	r24, 0xC3	; 195
    101a:	95 e0       	ldi	r25, 0x05	; 5
    101c:	0e 94 05 2b 	call	0x560a	; 0x560a <zigbee_set_nlme_leave_indication>
                
            cmd_if_state = CMD_IF_NWK_MODE;
    1020:	84 e0       	ldi	r24, 0x04	; 4
    1022:	80 93 11 0b 	sts	0x0B11, r24
    1026:	20 c0       	rjmp	.+64     	; 0x1068 <cmd_if_dispatch+0x2be>
            set_mode_status = RESP_SUCCESS;
        }
    } else {
        set_mode_status = RESP_SEMANTICAL_ERROR;
    1028:	82 e8       	ldi	r24, 0x82	; 130
    102a:	1f c0       	rjmp	.+62     	; 0x106a <cmd_if_dispatch+0x2c0>
            cmd_if_state = CMD_IF_AC_MODE;
            set_mode_status = RESP_SUCCESS;
        }
    } else if (CMD_MODE_NWK == (sm->mode)) {
        if (true != zigbee_init(ieee_address)){
            set_mode_status = RESP_HW_TIMEOUT;
    102c:	83 e8       	ldi	r24, 0x83	; 131
    102e:	1d c0       	rjmp	.+58     	; 0x106a <cmd_if_dispatch+0x2c0>
    /* Cast the raw command to the correct type. */
    cmd_set_channel_t *sc = (cmd_set_channel_t *)cmd_set_channel;
    
    /* Try to set the requested channel. */
    uint8_t set_channel_status = RESP_SEMANTICAL_ERROR;
    if (true != air_capture_set_channel((sc->channel))) {
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	0e 94 d6 03 	call	0x7ac	; 0x7ac <air_capture_set_channel>
    1036:	d5 c0       	rjmp	.+426    	; 0x11e2 <cmd_if_dispatch+0x438>

static void cmd_open_stream(void *cmd_open_stream) {
    uint8_t open_status = RESP_SEMANTICAL_ERROR;
    
    /* Try to open the strean of captured frames. */
    if (true != air_capture_open_stream()) {
    1038:	0e 94 09 04 	call	0x812	; 0x812 <air_capture_open_stream>
    103c:	d2 c0       	rjmp	.+420    	; 0x11e2 <cmd_if_dispatch+0x438>

static void cmd_close_stream(void *cmd_close_stream) {
    uint8_t close_status = RESP_SEMANTICAL_ERROR;
    
    /* Try to close the strean of captured frames. */
    if (true != air_capture_close_stream()) {
    103e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <air_capture_close_stream>
    1042:	cf c0       	rjmp	.+414    	; 0x11e2 <cmd_if_dispatch+0x438>
}


static void cmd_channel_scan_stop(void *cmd_channel_scan_stop) {
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
    104a:	80 91 e8 00 	lds	r24, 0x00E8
    104e:	8e 7f       	andi	r24, 0xFE	; 254
    1050:	80 93 e8 00 	sts	0x00E8, r24
    
    Usb_write_byte(RESP_NOT_IMPLEMENTED);
    1054:	83 e9       	ldi	r24, 0x93	; 147
    1056:	cb c1       	rjmp	.+918    	; 0x13ee <cmd_if_dispatch+0x644>

static void cmd_inject_frame(void *cmd_inject_frame) {
    uint8_t *frame = (uint8_t *)cmd_inject_frame;
    uint8_t inject_frame_status = RESP_PRIMITIVE_FAILED;
    uint8_t len = frame[1];
    inject_frame_status = air_capture_inject_frame(len, frame+2);
    1058:	be 01       	movw	r22, r28
    105a:	6e 5f       	subi	r22, 0xFE	; 254
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	0e 94 ac 04 	call	0x958	; 0x958 <air_capture_inject_frame>
	
	if (inject_frame_status == 0) {
    1064:	88 23       	and	r24, r24
    1066:	09 f4       	brne	.+2      	; 0x106a <cmd_if_dispatch+0x2c0>
        inject_frame_status = RESP_SUCCESS;
    1068:	80 e8       	ldi	r24, 0x80	; 128
    }
	
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
    106a:	94 e0       	ldi	r25, 0x04	; 4
    106c:	90 93 e9 00 	sts	0x00E9, r25
    Usb_send_control_in();
    1070:	90 91 e8 00 	lds	r25, 0x00E8
    1074:	9e 7f       	andi	r25, 0xFE	; 254
    1076:	90 93 e8 00 	sts	0x00E8, r25
    107a:	b9 c1       	rjmp	.+882    	; 0x13ee <cmd_if_dispatch+0x644>


static void cmd_jammer_on(void *cmd_jammer_on) {
    /* Turn the AirCapture jammer on. */
    uint8_t jammer_on_status = RESP_HW_TIMEOUT;
    if (true != air_capture_jammer_on()) {
    107c:	0e 94 ef 04 	call	0x9de	; 0x9de <air_capture_jammer_on>
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <cmd_if_dispatch+0x2dc>


static void cmd_jammer_off(void *cmd_jammer_off) {
    /* Turn the AirCapture jammer off. */
    uint8_t jammer_off_status = RESP_HW_TIMEOUT;
    if (true != air_capture_jammer_off()) {
    1082:	0e 94 2b 05 	call	0xa56	; 0xa56 <air_capture_jammer_off>
    1086:	88 23       	and	r24, r24
    1088:	09 f0       	breq	.+2      	; 0x108c <cmd_if_dispatch+0x2e2>
    108a:	af c0       	rjmp	.+350    	; 0x11ea <cmd_if_dispatch+0x440>
}


static void cmd_jammer_off(void *cmd_jammer_off) {
    /* Turn the AirCapture jammer off. */
    uint8_t jammer_off_status = RESP_HW_TIMEOUT;
    108c:	93 e8       	ldi	r25, 0x83	; 131
    108e:	ae c0       	rjmp	.+348    	; 0x11ec <cmd_if_dispatch+0x442>
}


static void cmd_enter_boot(void *cmd_enter_boot) {
    /* Respond to the CMD_ENTER_BOOT. */
    Usb_select_endpoint(EP_IN);
    1090:	84 e0       	ldi	r24, 0x04	; 4
    1092:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
    1096:	80 91 e8 00 	lds	r24, 0x00E8
    109a:	8e 7f       	andi	r24, 0xFE	; 254
    109c:	80 93 e8 00 	sts	0x00E8, r24
    
    Usb_write_byte(RESP_SUCCESS);
    10a0:	80 e8       	ldi	r24, 0x80	; 128
    10a2:	80 93 f1 00 	sts	0x00F1, r24
    
    Usb_send_in();
    10a6:	80 91 e8 00 	lds	r24, 0x00E8
    10aa:	8f 77       	andi	r24, 0x7F	; 127
    10ac:	80 93 e8 00 	sts	0x00E8, r24
    
    /* Release the transaction buffer. */
    usb_ep_ack_transaction();
    10b0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <usb_ep_ack_transaction>
    10b4:	8f e7       	ldi	r24, 0x7F	; 127
    10b6:	98 e3       	ldi	r25, 0x38	; 56
    10b8:	a1 e0       	ldi	r26, 0x01	; 1
    10ba:	81 50       	subi	r24, 0x01	; 1
    10bc:	90 40       	sbci	r25, 0x00	; 0
    10be:	a0 40       	sbci	r26, 0x00	; 0
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <cmd_if_dispatch+0x310>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <cmd_if_dispatch+0x31a>
    10c4:	00 00       	nop
    
    /* Delay so that the response is sent before bootloader section is entered. */
    delay_us(50000);
    
    /* Set EEPROM magic and reset the device. */
    EEPUT(EE_BOOT_MAGIC_ADR, EE_BOOT_MAGIC_VALUE);
    10c6:	8f e0       	ldi	r24, 0x0F	; 15
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	65 e3       	ldi	r22, 0x35	; 53
    10cc:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <__eewr_byte_usb1287>
    }
}


static void reboot(void) {
    wdt_enable(WDTO_15MS);
    10d0:	28 e0       	ldi	r18, 0x08	; 8
    10d2:	88 e1       	ldi	r24, 0x18	; 24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	a8 95       	wdr
    10dc:	80 93 60 00 	sts	0x0060, r24
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	20 93 60 00 	sts	0x0060, r18
    10e6:	ff cf       	rjmp	.-2      	; 0x10e6 <cmd_if_dispatch+0x33c>
static void cmd_nlde_data_request(void *cmd_nlde_data_request) {
    /* Cast raw command to correct type. */
    cmd_nlde_data_request_t *cndr = (cmd_nlde_data_request_t *)cmd_nlde_data_request;
    
    /* First check if the frame length is valid. */
    if ((aMaxMACFrameSize - NWK_MIN_HEADER_OVERHEAD) < (cndr->length)) {
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	8f 35       	cpi	r24, 0x5F	; 95
    10ec:	50 f0       	brcs	.+20     	; 0x1102 <cmd_if_dispatch+0x358>
        /* Send response to the PC. */
        Usb_select_endpoint(EP_IN);
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    10f4:	80 91 e8 00 	lds	r24, 0x00E8
    10f8:	8e 7f       	andi	r24, 0xFE	; 254
    10fa:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_SEMANTICAL_ERROR);
    10fe:	82 e8       	ldi	r24, 0x82	; 130
    1100:	76 c1       	rjmp	.+748    	; 0x13ee <cmd_if_dispatch+0x644>
    
    /* Try to allocate necessary memory to build the NLDE_DATA.request message. A
     * variable with file scope must be used, since the final freeing of memory
     * is done when the NLDE_DATA.confirm is received.
     */
    ndr = (nlde_data_req_t *)MEM_ALLOC(nlde_data_req_t);
    1102:	87 e2       	ldi	r24, 0x27	; 39
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    110a:	fc 01       	movw	r30, r24
    110c:	90 93 24 0b 	sts	0x0B24, r25
    1110:	80 93 23 0b 	sts	0x0B23, r24
    
    if (NULL == ndr) {
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	51 f4       	brne	.+20     	; 0x112c <cmd_if_dispatch+0x382>
        /* Send response to the PC. */
        Usb_select_endpoint(EP_IN);
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    111e:	80 91 e8 00 	lds	r24, 0x00E8
    1122:	8e 7f       	andi	r24, 0xFE	; 254
    1124:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_OUT_OF_MEMORY);
    1128:	80 e9       	ldi	r24, 0x90	; 144
    112a:	61 c1       	rjmp	.+706    	; 0x13ee <cmd_if_dispatch+0x644>
        
        return;
    }
    
    /* Build NLDE_DATA.request message. */
    ndr->dst_addr_mode = 0;
    112c:	10 82       	st	Z, r1
    ndr->dst_addr = cndr->dest_addr;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	92 83       	std	Z+2, r25	; 0x02
    1134:	81 83       	std	Z+1, r24	; 0x01
    ndr->radius = cndr->radius;
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	83 83       	std	Z+3, r24	; 0x03
    ndr->non_member_radius = cndr->non_member_radius;
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	84 83       	std	Z+4, r24	; 0x04
    ndr->nsdu_length = cndr->length;
    113e:	8e 81       	ldd	r24, Y+6	; 0x06
    1140:	86 83       	std	Z+6, r24	; 0x06
    ndr->nsdu = cndr->data;
    1142:	ce 01       	movw	r24, r28
    1144:	07 96       	adiw	r24, 0x07	; 7
    1146:	90 87       	std	Z+8, r25	; 0x08
    1148:	87 83       	std	Z+7, r24	; 0x07
    ndr->discovery_route = cndr->discovery_route;
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	85 83       	std	Z+5, r24	; 0x05
    ndr->nlde_callback_data_confirm = cmd_nwk_data_confirm_callback;
    114e:	8c e3       	ldi	r24, 0x3C	; 60
    1150:	95 e0       	ldi	r25, 0x05	; 5
    1152:	92 87       	std	Z+10, r25	; 0x0a
    1154:	81 87       	std	Z+9, r24	; 0x09
    
    /* Try to execute the primitive. */
    if (true != zigbee_data_request(ndr)) {
    1156:	cf 01       	movw	r24, r30
    1158:	0e 94 95 2b 	call	0x572a	; 0x572a <zigbee_data_request>
    115c:	88 23       	and	r24, r24
    115e:	09 f0       	breq	.+2      	; 0x1162 <cmd_if_dispatch+0x3b8>
    1160:	4d c1       	rjmp	.+666    	; 0x13fc <cmd_if_dispatch+0x652>
        /* Send response to the PC. */
        Usb_select_endpoint(EP_IN);
    1162:	84 e0       	ldi	r24, 0x04	; 4
    1164:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    1168:	80 91 e8 00 	lds	r24, 0x00E8
    116c:	8e 7f       	andi	r24, 0xFE	; 254
    116e:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
    1172:	8b e8       	ldi	r24, 0x8B	; 139
    1174:	80 93 f1 00 	sts	0x00F1, r24
        Usb_send_in();
    1178:	80 91 e8 00 	lds	r24, 0x00E8
    117c:	8f 77       	andi	r24, 0x7F	; 127
    117e:	80 93 e8 00 	sts	0x00E8, r24
            
        /* Free any allocated memory. */
        MEM_FREE(ndr);
    1182:	80 91 23 0b 	lds	r24, 0x0B23
    1186:	90 91 24 0b 	lds	r25, 0x0B24
    118a:	0d c1       	rjmp	.+538    	; 0x13a6 <cmd_if_dispatch+0x5fc>
}


static void cmd_nlme_formation_request(void *cmd_nlme_formation_request) {
    /* Try to allocate memory for the NLME_FORMATION.request. */
    nlme_formation_req_t *nfr = (nlme_formation_req_t *)MEM_ALLOC(nlme_formation_req_t);
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    1194:	7c 01       	movw	r14, r24
    
    uint8_t formation_status = RESP_HW_TIMEOUT;
    
    /* Verify if memory was allocated. */
    if (NULL == nfr) {
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	a9 f0       	breq	.+42     	; 0x11c4 <cmd_if_dispatch+0x41a>
        formation_status = RESP_OUT_OF_MEMORY;
    } else {
        /* Extract parameters and issue the NLME_FORMATION.request primitive. */
        cmd_nlme_formation_request_t *cnfr = (cmd_nlme_formation_request_t *)cmd_nlme_formation_request;
        
        nfr->channel = cnfr->channel;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	d7 01       	movw	r26, r14
    119e:	8c 93       	st	X, r24
        nfr->pan_id  = cnfr->pan_id;
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	12 96       	adiw	r26, 0x02	; 2
    11a6:	9c 93       	st	X, r25
    11a8:	8e 93       	st	-X, r24
    11aa:	11 97       	sbiw	r26, 0x01	; 1
        
        if (true != zigbee_formation_request(nfr)) {
    11ac:	c7 01       	movw	r24, r14
    11ae:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <zigbee_formation_request>
    11b2:	88 23       	and	r24, r24
    11b4:	11 f4       	brne	.+4      	; 0x11ba <cmd_if_dispatch+0x410>
            formation_status = RESP_SEMANTICAL_ERROR;
    11b6:	12 e8       	ldi	r17, 0x82	; 130
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <cmd_if_dispatch+0x412>
        } else {
            formation_status = RESP_SUCCESS;
    11ba:	10 e8       	ldi	r17, 0x80	; 128
        }
        
        MEM_FREE(nfr);
    11bc:	c7 01       	movw	r24, r14
    11be:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <cmd_if_dispatch+0x41c>
    
    uint8_t formation_status = RESP_HW_TIMEOUT;
    
    /* Verify if memory was allocated. */
    if (NULL == nfr) {
        formation_status = RESP_OUT_OF_MEMORY;
    11c4:	10 e9       	ldi	r17, 0x90	; 144
        
        MEM_FREE(nfr);
    }

    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
    11c6:	84 e0       	ldi	r24, 0x04	; 4
    11c8:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
    11cc:	80 91 e8 00 	lds	r24, 0x00E8
    11d0:	8e 7f       	andi	r24, 0xFE	; 254
    11d2:	80 93 e8 00 	sts	0x00E8, r24
    
    Usb_write_byte(formation_status);
    11d6:	10 93 f1 00 	sts	0x00F1, r17
    11da:	0b c1       	rjmp	.+534    	; 0x13f2 <cmd_if_dispatch+0x648>
static void cmd_nlme_permit_join_request(void *cmd_nlme_permit_join_request) {
    /* Extract parameters and issue the NLME_PERMIT_JOINING.request primitive. */
    cmd_nlme_permit_joining_request_t *cnpjr = (cmd_nlme_permit_joining_request_t *)cmd_nlme_permit_join_request;
    
    uint8_t permit_status = RESP_SEMANTICAL_ERROR;
    if (true != zigbee_permit_joining(cnpjr->join_permitted)) {
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	0e 94 84 32 	call	0x6508	; 0x6508 <zigbee_permit_joining>
    11e2:	88 23       	and	r24, r24
    11e4:	11 f4       	brne	.+4      	; 0x11ea <cmd_if_dispatch+0x440>

static void cmd_nlme_permit_join_request(void *cmd_nlme_permit_join_request) {
    /* Extract parameters and issue the NLME_PERMIT_JOINING.request primitive. */
    cmd_nlme_permit_joining_request_t *cnpjr = (cmd_nlme_permit_joining_request_t *)cmd_nlme_permit_join_request;
    
    uint8_t permit_status = RESP_SEMANTICAL_ERROR;
    11e6:	92 e8       	ldi	r25, 0x82	; 130
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <cmd_if_dispatch+0x442>
    if (true != zigbee_permit_joining(cnpjr->join_permitted)) {
    } else {
        permit_status = RESP_SUCCESS;
    11ea:	90 e8       	ldi	r25, 0x80	; 128
    }
    
    /* Send response to the PC. */
    Usb_select_endpoint(EP_IN);
    11ec:	84 e0       	ldi	r24, 0x04	; 4
    11ee:	80 93 e9 00 	sts	0x00E9, r24
    Usb_send_control_in();
    11f2:	80 91 e8 00 	lds	r24, 0x00E8
    11f6:	8e 7f       	andi	r24, 0xFE	; 254
    11f8:	80 93 e8 00 	sts	0x00E8, r24
    
    Usb_write_byte(permit_status);
    11fc:	90 93 f1 00 	sts	0x00F1, r25
    1200:	f8 c0       	rjmp	.+496    	; 0x13f2 <cmd_if_dispatch+0x648>
static void cmd_nlme_join_request(void *cmd_nlme_join_request) {
    /* Cast raw command to correct type. */
    cmd_nlme_join_request_t *cnjr = (cmd_nlme_join_request_t *)cmd_nlme_join_request;
    
    /* Request some memory to build the NLME_JOIN.request. */
    njr = (nlme_join_req_t *)MEM_ALLOC(nlme_join_req_t);
    1202:	8f e1       	ldi	r24, 0x1F	; 31
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    120a:	fc 01       	movw	r30, r24
    120c:	90 93 29 0b 	sts	0x0B29, r25
    1210:	80 93 28 0b 	sts	0x0B28, r24
    
    if (NULL == njr) {
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	81 f4       	brne	.+32     	; 0x1238 <cmd_if_dispatch+0x48e>
        Usb_select_endpoint(EP_IN);
    1218:	84 e0       	ldi	r24, 0x04	; 4
    121a:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    121e:	80 91 e8 00 	lds	r24, 0x00E8
    1222:	8e 7f       	andi	r24, 0xFE	; 254
    1224:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_OUT_OF_MEMORY);
    1228:	80 e9       	ldi	r24, 0x90	; 144
    122a:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    122e:	80 91 e8 00 	lds	r24, 0x00E8
    1232:	8f 77       	andi	r24, 0x7F	; 127
    1234:	80 93 e8 00 	sts	0x00E8, r24
    }
    
    /* Build the NLME_JOIN.request. */
    memcpy((void *)(&(njr->PANId)), (void *)(&(cnjr->PANId)), sizeof(uint16_t));
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
    njr->RejoinNetwork = cnjr->RejoinNetwork;
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	82 83       	std	Z+2, r24	; 0x02
    njr->JoinAsRouter = cnjr->JoinAsRouter;
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	83 83       	std	Z+3, r24	; 0x03
    njr->PowerSource = cnjr->PowerSource;
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	84 83       	std	Z+4, r24	; 0x04
    njr->RxOnWhenIdle = cnjr->RxOnWhenIdle;
    124c:	8e 81       	ldd	r24, Y+6	; 0x06
    124e:	85 83       	std	Z+5, r24	; 0x05
    njr->nlme_callback_join_confirm = cmd_nwk_join_confirm_callback;
    1250:	83 eb       	ldi	r24, 0xB3	; 179
    1252:	96 e0       	ldi	r25, 0x06	; 6
    1254:	97 83       	std	Z+7, r25	; 0x07
    1256:	86 83       	std	Z+6, r24	; 0x06
    
    /* Issue primitive. */
    if (true != zigbee_join_request(njr)) {
    1258:	cf 01       	movw	r24, r30
    125a:	0e 94 69 2e 	call	0x5cd2	; 0x5cd2 <zigbee_join_request>
    125e:	88 23       	and	r24, r24
    1260:	09 f0       	breq	.+2      	; 0x1264 <cmd_if_dispatch+0x4ba>
    1262:	cc c0       	rjmp	.+408    	; 0x13fc <cmd_if_dispatch+0x652>
        Usb_select_endpoint(EP_IN);
    1264:	84 e0       	ldi	r24, 0x04	; 4
    1266:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    126a:	80 91 e8 00 	lds	r24, 0x00E8
    126e:	8e 7f       	andi	r24, 0xFE	; 254
    1270:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
    1274:	8b e8       	ldi	r24, 0x8B	; 139
    1276:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    127a:	80 91 e8 00 	lds	r24, 0x00E8
    127e:	8f 77       	andi	r24, 0x7F	; 127
    1280:	80 93 e8 00 	sts	0x00E8, r24
        
        MEM_FREE(njr);
    1284:	80 91 28 0b 	lds	r24, 0x0B28
    1288:	90 91 29 0b 	lds	r25, 0x0B29
    128c:	8c c0       	rjmp	.+280    	; 0x13a6 <cmd_if_dispatch+0x5fc>
static void cmd_nlme_leave_request(void *cmd_nlme_leave_request) {
    /* Cast raw command to correct type. */
    cmd_nlme_leave_request_t *cnlr = (cmd_nlme_leave_request_t *)cmd_nlme_leave_request;
    
    /* Request some memory to build the NLME_JOIN.request. */
    nlr = (nlme_leave_req_t *)MEM_ALLOC(nlme_join_req_t);
    128e:	8f e1       	ldi	r24, 0x1F	; 31
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    1296:	fc 01       	movw	r30, r24
    1298:	90 93 2b 0b 	sts	0x0B2B, r25
    129c:	80 93 2a 0b 	sts	0x0B2A, r24
    
    if (NULL == nlr) {
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	81 f4       	brne	.+32     	; 0x12c4 <cmd_if_dispatch+0x51a>
        Usb_select_endpoint(EP_IN);
    12a4:	84 e0       	ldi	r24, 0x04	; 4
    12a6:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    12aa:	80 91 e8 00 	lds	r24, 0x00E8
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
    12b0:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_OUT_OF_MEMORY);
    12b4:	80 e9       	ldi	r24, 0x90	; 144
    12b6:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    12ba:	80 91 e8 00 	lds	r24, 0x00E8
    12be:	8f 77       	andi	r24, 0x7F	; 127
    12c0:	80 93 e8 00 	sts	0x00E8, r24
    }
    
    /* Build the NLME_JOIN.request. */
    memcpy((void *)(&(nlr->DeviceAddress)), (void *)(&(cnlr->device_address)), sizeof(uint64_t));
    12c4:	cf 01       	movw	r24, r30
    12c6:	ae 01       	movw	r20, r28
    12c8:	4f 5f       	subi	r20, 0xFF	; 255
    12ca:	5f 4f       	sbci	r21, 0xFF	; 255
    12cc:	28 e0       	ldi	r18, 0x08	; 8
    12ce:	da 01       	movw	r26, r20
    12d0:	0d 90       	ld	r0, X+
    12d2:	ad 01       	movw	r20, r26
    12d4:	dc 01       	movw	r26, r24
    12d6:	0d 92       	st	X+, r0
    12d8:	cd 01       	movw	r24, r26
    12da:	21 50       	subi	r18, 0x01	; 1
    12dc:	c1 f7       	brne	.-16     	; 0x12ce <cmd_if_dispatch+0x524>
    nlr->RemoveChildren = cnlr->remove_children;
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	80 87       	std	Z+8, r24	; 0x08
    nlr->Rejoin = cnlr->rejoin;
    12e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e4:	81 87       	std	Z+9, r24	; 0x09
    nlr->ReuseAddress = cnlr->reuse_address;
    12e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e8:	82 87       	std	Z+10, r24	; 0x0a
    nlr->Silent = cnlr->silent;
    12ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ec:	83 87       	std	Z+11, r24	; 0x0b
    nlr->nlme_callback_leave_confirm = cmd_nwk_leave_confirm_callback;
    12ee:	89 e5       	ldi	r24, 0x59	; 89
    12f0:	95 e0       	ldi	r25, 0x05	; 5
    12f2:	95 87       	std	Z+13, r25	; 0x0d
    12f4:	84 87       	std	Z+12, r24	; 0x0c
    
    /* Issue primitive. */
    if (true != zigbee_leave_request(nlr)) {
    12f6:	cf 01       	movw	r24, r30
    12f8:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <zigbee_leave_request>
    12fc:	88 23       	and	r24, r24
    12fe:	09 f0       	breq	.+2      	; 0x1302 <cmd_if_dispatch+0x558>
    1300:	7d c0       	rjmp	.+250    	; 0x13fc <cmd_if_dispatch+0x652>
        Usb_select_endpoint(EP_IN);
    1302:	84 e0       	ldi	r24, 0x04	; 4
    1304:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    1308:	80 91 e8 00 	lds	r24, 0x00E8
    130c:	8e 7f       	andi	r24, 0xFE	; 254
    130e:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
    1312:	8b e8       	ldi	r24, 0x8B	; 139
    1314:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    1318:	80 91 e8 00 	lds	r24, 0x00E8
    131c:	8f 77       	andi	r24, 0x7F	; 127
    131e:	80 93 e8 00 	sts	0x00E8, r24
        
        MEM_FREE(nlr);
    1322:	80 91 2a 0b 	lds	r24, 0x0B2A
    1326:	90 91 2b 0b 	lds	r25, 0x0B2B
    132a:	3d c0       	rjmp	.+122    	; 0x13a6 <cmd_if_dispatch+0x5fc>
static void cmd_nlme_discovery_request(void *cmd_nlme_discovery_request) {
    /* Cast raw command to correct type. */
    cmd_nlme_discovery_request_t *cndr = (cmd_nlme_discovery_request_t *)cmd_nlme_discovery_request;
    
    /* Request some memory to build the NLME_JOIN.request. */
    nndr = (nlme_network_discovery_req_t *)MEM_ALLOC(nlme_network_discovery_req_t);
    132c:	8a e8       	ldi	r24, 0x8A	; 138
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    1334:	fc 01       	movw	r30, r24
    1336:	90 93 2d 0b 	sts	0x0B2D, r25
    133a:	80 93 2c 0b 	sts	0x0B2C, r24
    
    if (NULL == nndr) {
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	81 f4       	brne	.+32     	; 0x1362 <cmd_if_dispatch+0x5b8>
        Usb_select_endpoint(EP_IN);
    1342:	84 e0       	ldi	r24, 0x04	; 4
    1344:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    1348:	80 91 e8 00 	lds	r24, 0x00E8
    134c:	8e 7f       	andi	r24, 0xFE	; 254
    134e:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_OUT_OF_MEMORY);
    1352:	80 e9       	ldi	r24, 0x90	; 144
    1354:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    1358:	80 91 e8 00 	lds	r24, 0x00E8
    135c:	8f 77       	andi	r24, 0x7F	; 127
    135e:	80 93 e8 00 	sts	0x00E8, r24
    }
    
    /* Build the NLME_NETWORK_DISCOVERY.request. */
    nndr->ChannelToScan = cndr->channel;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	80 83       	st	Z, r24
    nndr->ScanDuration = cndr->duration;
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	81 83       	std	Z+1, r24	; 0x01
    nndr->nlme_callback_discovery_confirm = cmd_nwk_discovery_confirm_callback;
    136a:	86 e7       	ldi	r24, 0x76	; 118
    136c:	95 e0       	ldi	r25, 0x05	; 5
    136e:	93 83       	std	Z+3, r25	; 0x03
    1370:	82 83       	std	Z+2, r24	; 0x02
    
    /* Issue primitive. */
    if (true != zigbee_network_discovery_request(nndr)) {
    1372:	cf 01       	movw	r24, r30
    1374:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <zigbee_network_discovery_request>
    1378:	88 23       	and	r24, r24
    137a:	09 f0       	breq	.+2      	; 0x137e <cmd_if_dispatch+0x5d4>
    137c:	3f c0       	rjmp	.+126    	; 0x13fc <cmd_if_dispatch+0x652>
        Usb_select_endpoint(EP_IN);
    137e:	84 e0       	ldi	r24, 0x04	; 4
    1380:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    1384:	80 91 e8 00 	lds	r24, 0x00E8
    1388:	8e 7f       	andi	r24, 0xFE	; 254
    138a:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
    138e:	8b e8       	ldi	r24, 0x8B	; 139
    1390:	80 93 f1 00 	sts	0x00F1, r24
        
        Usb_send_in();
    1394:	80 91 e8 00 	lds	r24, 0x00E8
    1398:	8f 77       	andi	r24, 0x7F	; 127
    139a:	80 93 e8 00 	sts	0x00E8, r24
        
        MEM_FREE(nndr);
    139e:	80 91 2c 0b 	lds	r24, 0x0B2C
    13a2:	90 91 2d 0b 	lds	r25, 0x0B2D
    13a6:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
    13aa:	28 c0       	rjmp	.+80     	; 0x13fc <cmd_if_dispatch+0x652>
}


static void cmd_nlme_start_router_request(void *cmd_nlme_start_router_request) { 
    /* Issue primitive. */
    if (NWK_SUCCESS != zigbee_start_router_request()) {
    13ac:	0e 94 f5 29 	call	0x53ea	; 0x53ea <zigbee_start_router_request>
    13b0:	88 23       	and	r24, r24
    13b2:	51 f0       	breq	.+20     	; 0x13c8 <cmd_if_dispatch+0x61e>
        Usb_select_endpoint(EP_IN);
    13b4:	84 e0       	ldi	r24, 0x04	; 4
    13b6:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    13ba:	80 91 e8 00 	lds	r24, 0x00E8
    13be:	8e 7f       	andi	r24, 0xFE	; 254
    13c0:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_PRITMITIVE_FAILED);
    13c4:	8b e8       	ldi	r24, 0x8B	; 139
    13c6:	13 c0       	rjmp	.+38     	; 0x13ee <cmd_if_dispatch+0x644>
        
        Usb_send_in();
    } else {
        Usb_select_endpoint(EP_IN);
    13c8:	84 e0       	ldi	r24, 0x04	; 4
    13ca:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    13ce:	80 91 e8 00 	lds	r24, 0x00E8
    13d2:	8e 7f       	andi	r24, 0xFE	; 254
    13d4:	80 93 e8 00 	sts	0x00E8, r24
    
        Usb_write_byte(RESP_SUCCESS);
    13d8:	80 e8       	ldi	r24, 0x80	; 128
    13da:	09 c0       	rjmp	.+18     	; 0x13ee <cmd_if_dispatch+0x644>
      case CMD_NLME_START_ROUTER_REQUEST:
        cmd_nlme_start_router_request(raw_cmd);
        break; 
      default:
        /* Unsupported command. */
        Usb_select_endpoint(EP_IN);
    13dc:	84 e0       	ldi	r24, 0x04	; 4
    13de:	80 93 e9 00 	sts	0x00E9, r24
        Usb_send_control_in();
    13e2:	80 91 e8 00 	lds	r24, 0x00E8
    13e6:	8e 7f       	andi	r24, 0xFE	; 254
    13e8:	80 93 e8 00 	sts	0x00E8, r24
        Usb_write_byte(RESP_COMMAND_UNKNOWN);
    13ec:	8d e8       	ldi	r24, 0x8D	; 141
    13ee:	80 93 f1 00 	sts	0x00F1, r24
        Usb_send_in();
    13f2:	80 91 e8 00 	lds	r24, 0x00E8
    13f6:	8f 77       	andi	r24, 0x7F	; 127
    13f8:	80 93 e8 00 	sts	0x00E8, r24
        
        usb_ep_ack_transaction();
    13fc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <usb_ep_ack_transaction>
        break;
    }
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	af 90       	pop	r10
    1414:	9f 90       	pop	r9
    1416:	08 95       	ret

00001418 <cmd_if_init>:
 *  \param[in] ndc Pointer to nlme_network_discovery_conf_t struct.
 */
static void cmd_nwk_discovery_confirm_callback(nlme_network_discovery_conf_t *ndc);


bool cmd_if_init(void) {
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <cmd_if_init+0xe>
    1426:	0f 92       	push	r0
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    /* Initialize local variables. */
    ndr = NULL;
    142c:	10 92 24 0b 	sts	0x0B24, r1
    1430:	10 92 23 0b 	sts	0x0B23, r1
    ieee_address = eep_read_ieee_address();
    1434:	0e 94 d6 10 	call	0x21ac	; 0x21ac <eep_read_ieee_address>
    1438:	20 93 0a 01 	sts	0x010A, r18
    143c:	30 93 0b 01 	sts	0x010B, r19
    1440:	40 93 0c 01 	sts	0x010C, r20
    1444:	50 93 0d 01 	sts	0x010D, r21
    1448:	60 93 0e 01 	sts	0x010E, r22
    144c:	70 93 0f 01 	sts	0x010F, r23
    1450:	80 93 10 01 	sts	0x0110, r24
    1454:	90 93 11 01 	sts	0x0111, r25
    nwk_events_missed = 0;    
    1458:	10 92 26 0b 	sts	0x0B26, r1
    145c:	10 92 25 0b 	sts	0x0B25, r1
    1460:	06 e1       	ldi	r16, 0x16	; 22
    1462:	1b e0       	ldi	r17, 0x0B	; 11
 *  \param[in] ndc Pointer to nlme_network_discovery_conf_t struct.
 */
static void cmd_nwk_discovery_confirm_callback(nlme_network_discovery_conf_t *ndc);


bool cmd_if_init(void) {
    1464:	78 01       	movw	r14, r16
    ndr = NULL;
    ieee_address = eep_read_ieee_address();
    nwk_events_missed = 0;    
    
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
        uint8_t *nwk_event = (uint8_t *)MEM_ALLOC_ARRAY(uint8_t, CMD_EVENT_SIZE);
    1466:	83 e9       	ldi	r24, 0x93	; 147
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
        
        if (NULL == nwk_event) {
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	59 f1       	breq	.+86     	; 0x14c8 <cmd_if_init+0xb0>
            goto init_failed;
        } else {
            nwk_event_fifo[i] = nwk_event;
    1472:	f7 01       	movw	r30, r14
    1474:	81 93       	st	Z+, r24
    1476:	91 93       	st	Z+, r25
    1478:	7f 01       	movw	r14, r30
    /* Initialize local variables. */
    ndr = NULL;
    ieee_address = eep_read_ieee_address();
    nwk_events_missed = 0;    
    
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
    147a:	f0 e2       	ldi	r31, 0x20	; 32
    147c:	ef 16       	cp	r14, r31
    147e:	fb e0       	ldi	r31, 0x0B	; 11
    1480:	ff 06       	cpc	r15, r31
    1482:	89 f7       	brne	.-30     	; 0x1466 <cmd_if_init+0x4e>
            nwk_event_fifo[i] = nwk_event;
        }
    }
    
    /* Initialize USB devic driver. */
    usb_task_init(ieee_address);
    1484:	20 91 0a 01 	lds	r18, 0x010A
    1488:	30 91 0b 01 	lds	r19, 0x010B
    148c:	40 91 0c 01 	lds	r20, 0x010C
    1490:	50 91 0d 01 	lds	r21, 0x010D
    1494:	60 91 0e 01 	lds	r22, 0x010E
    1498:	70 91 0f 01 	lds	r23, 0x010F
    149c:	80 91 10 01 	lds	r24, 0x0110
    14a0:	90 91 11 01 	lds	r25, 0x0111
    14a4:	0e 94 1d 0c 	call	0x183a	; 0x183a <usb_task_init>
    
    /* Set up the transaction descriptor for the OUT end point where commands will
     * be received.
     */
    usb_trans_descriptor_t desc;
    desc.ep = EP_OUT;
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	89 83       	std	Y+1, r24	; 0x01
    desc.done_callback = usb_transaction_done;
    14ac:	85 e9       	ldi	r24, 0x95	; 149
    14ae:	95 e0       	ldi	r25, 0x05	; 5
    14b0:	9b 83       	std	Y+3, r25	; 0x03
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    
    if (USB_SUCCESS != usb_ep_open(&desc)) {
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <usb_ep_open>
    14bc:	88 23       	and	r24, r24
    14be:	21 f4       	brne	.+8      	; 0x14c8 <cmd_if_init+0xb0>
        goto init_failed;
    }
    
    cmd_if_state = CMD_IF_INITIALIZED;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	80 93 11 0b 	sts	0x0B11, r24
    
    return true;
    14c6:	12 c0       	rjmp	.+36     	; 0x14ec <cmd_if_init+0xd4>
  
  
    init_failed:
    
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
        MEM_FREE(nwk_event_fifo[i]);
    14c8:	f8 01       	movw	r30, r16
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
        nwk_event_fifo[i] = (uint8_t *)NULL;
    14d2:	f8 01       	movw	r30, r16
    14d4:	11 92       	st	Z+, r1
    14d6:	11 92       	st	Z+, r1
    14d8:	8f 01       	movw	r16, r30
    
  
  
    init_failed:
    
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
    14da:	fb e0       	ldi	r31, 0x0B	; 11
    14dc:	00 32       	cpi	r16, 0x20	; 32
    14de:	1f 07       	cpc	r17, r31
    14e0:	99 f7       	brne	.-26     	; 0x14c8 <cmd_if_init+0xb0>
        MEM_FREE(nwk_event_fifo[i]);
        nwk_event_fifo[i] = (uint8_t *)NULL;
    }
    
    /* Close EP and turn the USB macro off. */
    usb_ep_close();
    14e2:	0e 94 76 0d 	call	0x1aec	; 0x1aec <usb_ep_close>
    usb_task_deinit();  
    14e6:	0e 94 9c 0c 	call	0x1938	; 0x1938 <usb_task_deinit>
      
    return false;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	08 95       	ret

00001500 <cmd_if_deinit>:


void cmd_if_deinit(void) {
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    if (CMD_IF_NOT_INITIALIZED == cmd_if_state) { return ; } // No point in turning off if not even started.
    1504:	80 91 11 0b 	lds	r24, 0x0B11
    1508:	88 23       	and	r24, r24
    150a:	e1 f0       	breq	.+56     	; 0x1544 <cmd_if_deinit+0x44>
    
    cmd_if_state = CMD_IF_NOT_INITIALIZED;
    150c:	10 92 11 0b 	sts	0x0B11, r1
    
    /* Clear any memory that potentially can be active. */
    MEM_FREE(ndr);
    1510:	80 91 23 0b 	lds	r24, 0x0B23
    1514:	90 91 24 0b 	lds	r25, 0x0B24
    1518:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
    ndr = NULL;
    151c:	10 92 24 0b 	sts	0x0B24, r1
    1520:	10 92 23 0b 	sts	0x0B23, r1
    1524:	c6 e1       	ldi	r28, 0x16	; 22
    1526:	db e0       	ldi	r29, 0x0B	; 11
        
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
        MEM_FREE(nwk_event_fifo[i]);
    1528:	88 81       	ld	r24, Y
    152a:	99 81       	ldd	r25, Y+1	; 0x01
    152c:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
        nwk_event_fifo[i] = (uint8_t *)NULL;
    1530:	19 92       	st	Y+, r1
    1532:	19 92       	st	Y+, r1
    
    /* Clear any memory that potentially can be active. */
    MEM_FREE(ndr);
    ndr = NULL;
        
    for (uint8_t i = 0; (i < NWK_EVENT_FIFO_SIZE); i++) {
    1534:	8b e0       	ldi	r24, 0x0B	; 11
    1536:	c0 32       	cpi	r28, 0x20	; 32
    1538:	d8 07       	cpc	r29, r24
    153a:	b1 f7       	brne	.-20     	; 0x1528 <cmd_if_deinit+0x28>
        MEM_FREE(nwk_event_fifo[i]);
        nwk_event_fifo[i] = (uint8_t *)NULL;
    }
    
    /* Close EP and turn the USB macro off. */
    usb_ep_close();
    153c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <usb_ep_close>
    usb_task_deinit();
    1540:	0e 94 9c 0c 	call	0x1938	; 0x1938 <usb_task_deinit>
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <cmd_if_task>:


void cmd_if_task(void) {
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    /* The cmd_if_task function has one main function to fullfill: Forward NWK_EVENTs
     * if any available.
     */
    if (CMD_IF_NWK_MODE != cmd_if_state) { return; }
    1554:	80 91 11 0b 	lds	r24, 0x0B11
    1558:	84 30       	cpi	r24, 0x04	; 4
    155a:	09 f0       	breq	.+2      	; 0x155e <cmd_if_task+0x14>
    155c:	8a c0       	rjmp	.+276    	; 0x1672 <cmd_if_task+0x128>
    
    /* Check if there is data to be transmitted. */
    if (0 == items_used) { return; }
    155e:	80 91 12 0b 	lds	r24, 0x0B12
    1562:	88 23       	and	r24, r24
    1564:	09 f4       	brne	.+2      	; 0x1568 <cmd_if_task+0x1e>
    1566:	85 c0       	rjmp	.+266    	; 0x1672 <cmd_if_task+0x128>
        
    /* Select the event EP. */
    UENUM = EP_EVENT;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	80 93 e9 00 	sts	0x00E9, r24
        
    /* Check that it is possible to fill at least one bank (64 bytes) in the DPRAM. */
    if ((UEINTX & (1 << TXINI)) != (1 << TXINI)) { return; }
    156e:	80 91 e8 00 	lds	r24, 0x00E8
    1572:	80 ff       	sbrs	r24, 0
    1574:	7e c0       	rjmp	.+252    	; 0x1672 <cmd_if_task+0x128>
        
    /* ACK TX_IN. */
    UEINTX &= ~(1 << TXINI);
    1576:	80 91 e8 00 	lds	r24, 0x00E8
    157a:	8e 7f       	andi	r24, 0xFE	; 254
    157c:	80 93 e8 00 	sts	0x00E8, r24
        
    /* If there is no acdu allocated, but data left in the AirCapture fifo.
     * One acdu must be allocated from the fifo's tail, however the tail's
     * position will not be updated until the complete acdu is written.
     */
    if (0 == bytes_left) {
    1580:	80 91 13 0b 	lds	r24, 0x0B13
    1584:	88 23       	and	r24, r24
    1586:	69 f5       	brne	.+90     	; 0x15e2 <cmd_if_task+0x98>
        if (0 == packets_left) {
    1588:	80 91 14 0b 	lds	r24, 0x0B14
    158c:	88 23       	and	r24, r24
    158e:	09 f5       	brne	.+66     	; 0x15d2 <cmd_if_task+0x88>
            /* Get new NWK_EVENT. */
            data_ptr = nwk_event_fifo[fifo_tail];
    1590:	e0 91 15 0b 	lds	r30, 0x0B15
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	ea 5e       	subi	r30, 0xEA	; 234
    159c:	f4 4f       	sbci	r31, 0xF4	; 244
    159e:	01 90       	ld	r0, Z+
    15a0:	f0 81       	ld	r31, Z
    15a2:	e0 2d       	mov	r30, r0
    15a4:	f0 93 21 0b 	sts	0x0B21, r31
    15a8:	e0 93 20 0b 	sts	0x0B20, r30
            bytes_left = *(data_ptr + 1);
    15ac:	21 81       	ldd	r18, Z+1	; 0x01
    15ae:	20 93 13 0b 	sts	0x0B13, r18
            packets_left = (uint8_t)(((uint16_t)(bytes_left + 64 - 1)) >> 6);
    15b2:	82 2f       	mov	r24, r18
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	cf 96       	adiw	r24, 0x3f	; 63
    15b8:	56 e0       	ldi	r21, 0x06	; 6
    15ba:	96 95       	lsr	r25
    15bc:	87 95       	ror	r24
    15be:	5a 95       	dec	r21
    15c0:	e1 f7       	brne	.-8      	; 0x15ba <cmd_if_task+0x70>
    15c2:	80 93 14 0b 	sts	0x0B14, r24
            if (0 == (bytes_left % 64)) { packets_left++ ; }
    15c6:	2f 73       	andi	r18, 0x3F	; 63
    15c8:	61 f4       	brne	.+24     	; 0x15e2 <cmd_if_task+0x98>
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	80 93 14 0b 	sts	0x0B14, r24
    15d0:	08 c0       	rjmp	.+16     	; 0x15e2 <cmd_if_task+0x98>
        } else if (1 == packets_left) {
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	31 f4       	brne	.+12     	; 0x15e2 <cmd_if_task+0x98>
            /* Send Zero Length Packet and then update tail pointer. */
            UEINTX &= ~(1 << FIFOCON);
    15d6:	80 91 e8 00 	lds	r24, 0x00E8
    15da:	8f 77       	andi	r24, 0x7F	; 127
    15dc:	80 93 e8 00 	sts	0x00E8, r24
    15e0:	2f c0       	rjmp	.+94     	; 0x1640 <cmd_if_task+0xf6>
            items_free++;
                
                
            LEAVE_CRITICAL_REGION();
                
            return;
    15e2:	80 91 13 0b 	lds	r24, 0x0B13
    15e6:	81 50       	subi	r24, 0x01	; 1
    15e8:	e0 91 20 0b 	lds	r30, 0x0B20
    15ec:	f0 91 21 0b 	lds	r31, 0x0B21
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <cmd_if_task+0xaa>
    /* At least one byte to send. */
    do {
        UEDATX = *data_ptr;
        data_ptr++;
        bytes_left--;
    } while ((0 != bytes_left) && ((UEINTX & (1 << RWAL)) == (1 << RWAL)));
    15f2:	82 2f       	mov	r24, r18
        }
    }
    
    /* At least one byte to send. */
    do {
        UEDATX = *data_ptr;
    15f4:	91 91       	ld	r25, Z+
    15f6:	90 93 f1 00 	sts	0x00F1, r25
        data_ptr++;
        bytes_left--;
    } while ((0 != bytes_left) && ((UEINTX & (1 << RWAL)) == (1 << RWAL)));
    15fa:	88 23       	and	r24, r24
    15fc:	39 f4       	brne	.+14     	; 0x160c <cmd_if_task+0xc2>
    15fe:	e0 93 20 0b 	sts	0x0B20, r30
    1602:	f0 93 21 0b 	sts	0x0B21, r31
    1606:	10 92 13 0b 	sts	0x0B13, r1
    160a:	0c c0       	rjmp	.+24     	; 0x1624 <cmd_if_task+0xda>
    160c:	90 91 e8 00 	lds	r25, 0x00E8
    1610:	28 2f       	mov	r18, r24
    1612:	21 50       	subi	r18, 0x01	; 1
    1614:	95 fd       	sbrc	r25, 5
    1616:	ed cf       	rjmp	.-38     	; 0x15f2 <cmd_if_task+0xa8>
    1618:	e0 93 20 0b 	sts	0x0B20, r30
    161c:	f0 93 21 0b 	sts	0x0B21, r31
    1620:	80 93 13 0b 	sts	0x0B13, r24
        
    /* Either 64 bytes or the last byte in a packet is written. */
    packets_left--;
    1624:	90 91 14 0b 	lds	r25, 0x0B14
    1628:	91 50       	subi	r25, 0x01	; 1
    162a:	90 93 14 0b 	sts	0x0B14, r25
        
    /* ACK writing to the bank. */
    UEINTX &= ~(1 << FIFOCON);
    162e:	20 91 e8 00 	lds	r18, 0x00E8
    1632:	2f 77       	andi	r18, 0x7F	; 127
    1634:	20 93 e8 00 	sts	0x00E8, r18
        
    /* Check if it is time ti move tail. */
    if ((0 == bytes_left) && (0 == packets_left)) {
    1638:	88 23       	and	r24, r24
    163a:	d9 f4       	brne	.+54     	; 0x1672 <cmd_if_task+0x128>
    163c:	99 23       	and	r25, r25
    163e:	c9 f4       	brne	.+50     	; 0x1672 <cmd_if_task+0x128>
        ENTER_CRITICAL_REGION();
    1640:	8f b7       	in	r24, 0x3f	; 63
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	f8 94       	cli
                
        if ((NWK_EVENT_FIFO_SIZE - 1) == fifo_tail) {
    1646:	80 91 15 0b 	lds	r24, 0x0B15
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	19 f4       	brne	.+6      	; 0x1654 <cmd_if_task+0x10a>
            fifo_tail = 0;
    164e:	10 92 15 0b 	sts	0x0B15, r1
    1652:	03 c0       	rjmp	.+6      	; 0x165a <cmd_if_task+0x110>
        } else {
            fifo_tail++;
    1654:	8f 5f       	subi	r24, 0xFF	; 255
    1656:	80 93 15 0b 	sts	0x0B15, r24
        }
                
        items_used--;
    165a:	80 91 12 0b 	lds	r24, 0x0B12
    165e:	81 50       	subi	r24, 0x01	; 1
    1660:	80 93 12 0b 	sts	0x0B12, r24
        items_free++;
    1664:	80 91 22 0b 	lds	r24, 0x0B22
    1668:	8f 5f       	subi	r24, 0xFF	; 255
    166a:	80 93 22 0b 	sts	0x0B22, r24
                
                
        LEAVE_CRITICAL_REGION(); 
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	8f bf       	out	0x3f, r24	; 63
    }
}
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <__vector_16>:
/*================================= MACROS           =========================*/
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/
ISR(TIMER1_CAPT_vect) {   
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	0b b6       	in	r0, 0x3b	; 59
    1684:	0f 92       	push	r0
    1686:	11 24       	eor	r1, r1
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	ef 93       	push	r30
    169e:	ff 93       	push	r31
    RF230_QUICK_ISR_HANDLER();
    16a0:	86 b3       	in	r24, 0x16	; 22
    16a2:	85 60       	ori	r24, 0x05	; 5
    16a4:	86 bb       	out	0x16, r24	; 22
    16a6:	28 98       	cbi	0x05, 0	; 5
    16a8:	8f e8       	ldi	r24, 0x8F	; 143
    16aa:	8e bd       	out	0x2e, r24	; 46
    16ac:	0d b4       	in	r0, 0x2d	; 45
    16ae:	07 fe       	sbrs	r0, 7
    16b0:	fd cf       	rjmp	.-6      	; 0x16ac <__vector_16+0x32>
    16b2:	8e b5       	in	r24, 0x2e	; 46
    16b4:	8e bd       	out	0x2e, r24	; 46
    16b6:	0d b4       	in	r0, 0x2d	; 45
    16b8:	07 fe       	sbrs	r0, 7
    16ba:	fd cf       	rjmp	.-6      	; 0x16b6 <__vector_16+0x3c>
    16bc:	8e b5       	in	r24, 0x2e	; 46
    16be:	28 9a       	sbi	0x05, 0	; 5
    16c0:	e0 91 58 0c 	lds	r30, 0x0C58
    16c4:	f0 91 59 0c 	lds	r31, 0x0C59
    16c8:	30 97       	sbiw	r30, 0x00	; 0
    16ca:	09 f0       	breq	.+2      	; 0x16ce <__vector_16+0x54>
    16cc:	09 95       	icall
}
    16ce:	ff 91       	pop	r31
    16d0:	ef 91       	pop	r30
    16d2:	bf 91       	pop	r27
    16d4:	af 91       	pop	r26
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	7f 91       	pop	r23
    16dc:	6f 91       	pop	r22
    16de:	5f 91       	pop	r21
    16e0:	4f 91       	pop	r20
    16e2:	3f 91       	pop	r19
    16e4:	2f 91       	pop	r18
    16e6:	0f 90       	pop	r0
    16e8:	0b be       	out	0x3b, r0	; 59
    16ea:	0f 90       	pop	r0
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	0f 90       	pop	r0
    16f0:	1f 90       	pop	r1
    16f2:	18 95       	reti

000016f4 <__vector_20>:


ISR(VRT_TIME_OVF_VECTOR) {
    16f4:	1f 92       	push	r1
    16f6:	0f 92       	push	r0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	0f 92       	push	r0
    16fc:	11 24       	eor	r1, r1
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    VRT_TIMER_TICK_OVF_HANDLER();
    1702:	80 91 6e 12 	lds	r24, 0x126E
    1706:	90 91 6f 12 	lds	r25, 0x126F
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	90 93 6f 12 	sts	0x126F, r25
    1710:	80 93 6e 12 	sts	0x126E, r24
}
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	0f 90       	pop	r0
    171e:	1f 90       	pop	r1
    1720:	18 95       	reti

00001722 <__vector_17>:

ISR (VRT_TIME_COMPA_vect) {
    1722:	1f 92       	push	r1
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	0f 92       	push	r0
    172a:	0b b6       	in	r0, 0x3b	; 59
    172c:	0f 92       	push	r0
    172e:	11 24       	eor	r1, r1
    1730:	2f 93       	push	r18
    1732:	3f 93       	push	r19
    1734:	4f 93       	push	r20
    1736:	5f 93       	push	r21
    1738:	6f 93       	push	r22
    173a:	7f 93       	push	r23
    173c:	8f 93       	push	r24
    173e:	9f 93       	push	r25
    1740:	af 93       	push	r26
    1742:	bf 93       	push	r27
    1744:	ef 93       	push	r30
    1746:	ff 93       	push	r31
    VRT_TIMER_HIGH_PRI_DELAY_HANDLER(); 
    1748:	e0 91 10 11 	lds	r30, 0x1110
    174c:	f0 91 11 11 	lds	r31, 0x1111
    1750:	30 97       	sbiw	r30, 0x00	; 0
    1752:	31 f4       	brne	.+12     	; 0x1760 <__vector_17+0x3e>
    1754:	80 91 6f 00 	lds	r24, 0x006F
    1758:	8d 7f       	andi	r24, 0xFD	; 253
    175a:	80 93 6f 00 	sts	0x006F, r24
    175e:	39 c0       	rjmp	.+114    	; 0x17d2 <__vector_17+0xb0>
    1760:	80 91 14 11 	lds	r24, 0x1114
    1764:	90 91 15 11 	lds	r25, 0x1115
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	79 f0       	breq	.+30     	; 0x178a <__vector_17+0x68>
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	90 93 15 11 	sts	0x1115, r25
    1772:	80 93 14 11 	sts	0x1114, r24
    1776:	80 91 84 00 	lds	r24, 0x0084
    177a:	90 91 85 00 	lds	r25, 0x0085
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	90 93 89 00 	sts	0x0089, r25
    1784:	80 93 88 00 	sts	0x0088, r24
    1788:	24 c0       	rjmp	.+72     	; 0x17d2 <__vector_17+0xb0>
    178a:	20 91 16 11 	lds	r18, 0x1116
    178e:	30 91 17 11 	lds	r19, 0x1117
    1792:	21 15       	cp	r18, r1
    1794:	31 05       	cpc	r19, r1
    1796:	79 f0       	breq	.+30     	; 0x17b6 <__vector_17+0x94>
    1798:	80 91 84 00 	lds	r24, 0x0084
    179c:	90 91 85 00 	lds	r25, 0x0085
    17a0:	82 0f       	add	r24, r18
    17a2:	93 1f       	adc	r25, r19
    17a4:	90 93 89 00 	sts	0x0089, r25
    17a8:	80 93 88 00 	sts	0x0088, r24
    17ac:	10 92 17 11 	sts	0x1117, r1
    17b0:	10 92 16 11 	sts	0x1116, r1
    17b4:	0e c0       	rjmp	.+28     	; 0x17d2 <__vector_17+0xb0>
    17b6:	80 91 6f 00 	lds	r24, 0x006F
    17ba:	8d 7f       	andi	r24, 0xFD	; 253
    17bc:	80 93 6f 00 	sts	0x006F, r24
    17c0:	80 91 12 11 	lds	r24, 0x1112
    17c4:	90 91 13 11 	lds	r25, 0x1113
    17c8:	09 95       	icall
    17ca:	10 92 11 11 	sts	0x1111, r1
    17ce:	10 92 10 11 	sts	0x1110, r1
}
    17d2:	ff 91       	pop	r31
    17d4:	ef 91       	pop	r30
    17d6:	bf 91       	pop	r27
    17d8:	af 91       	pop	r26
    17da:	9f 91       	pop	r25
    17dc:	8f 91       	pop	r24
    17de:	7f 91       	pop	r23
    17e0:	6f 91       	pop	r22
    17e2:	5f 91       	pop	r21
    17e4:	4f 91       	pop	r20
    17e6:	3f 91       	pop	r19
    17e8:	2f 91       	pop	r18
    17ea:	0f 90       	pop	r0
    17ec:	0b be       	out	0x3b, r0	; 59
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <__vector_18>:


ISR(TIMER1_COMPB_vect) {
    17f8:	1f 92       	push	r1
    17fa:	0f 92       	push	r0
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	0f 92       	push	r0
    1800:	11 24       	eor	r1, r1
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    VRT_TIMER_SLOW_TICK_HANDLER();
    1806:	80 91 18 11 	lds	r24, 0x1118
    180a:	90 91 19 11 	lds	r25, 0x1119
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	90 93 19 11 	sts	0x1119, r25
    1814:	80 93 18 11 	sts	0x1118, r24
    1818:	80 91 84 00 	lds	r24, 0x0084
    181c:	90 91 85 00 	lds	r25, 0x0085
    1820:	86 59       	subi	r24, 0x96	; 150
    1822:	97 4e       	sbci	r25, 0xE7	; 231
    1824:	90 93 8b 00 	sts	0x008B, r25
    1828:	80 93 8a 00 	sts	0x008A, r24
}
    182c:	9f 91       	pop	r25
    182e:	8f 91       	pop	r24
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	0f 90       	pop	r0
    1836:	1f 90       	pop	r1
    1838:	18 95       	reti

0000183a <usb_task_init>:
//! This function enables the USB controller and init the USB interrupts.
//! The aim is to allow the USB connection detection in order to send
//! the appropriate USB event to the operating mode manager.
//!
//! @param serial_nmbr Serial number for this device.
void usb_task_init(uint64_t serial_nmbr) {
    183a:	7f 92       	push	r7
    183c:	8f 92       	push	r8
    183e:	9f 92       	push	r9
    1840:	af 92       	push	r10
    1842:	bf 92       	push	r11
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	12 2f       	mov	r17, r18
    1856:	d3 2e       	mov	r13, r19
    1858:	c4 2e       	mov	r12, r20
    185a:	b5 2e       	mov	r11, r21
    185c:	a6 2e       	mov	r10, r22
    185e:	97 2e       	mov	r9, r23
    1860:	88 2e       	mov	r8, r24
    1862:	79 2e       	mov	r7, r25
    /* Initialze local variables. */
    usb_connected = false;
    1864:	10 92 2e 0b 	sts	0x0B2E, r1
    reset_detected = false;
    1868:	10 92 2f 0b 	sts	0x0B2F, r1
    usb_configuration_nb = 0;
    186c:	10 92 36 0b 	sts	0x0B36, r1
    
    trans_data_i = 0;
    1870:	10 92 32 0b 	sts	0x0B32, r1
    1874:	10 92 31 0b 	sts	0x0B31, r1
    ep_open = false;
    1878:	10 92 30 0b 	sts	0x0B30, r1
    ep_error = false;
    187c:	10 92 1c 11 	sts	0x111C, r1
    open_ep = 0;
    1880:	10 92 33 0b 	sts	0x0B33, r1

    done_callback = NULL;
    1884:	10 92 35 0b 	sts	0x0B35, r1
    1888:	10 92 34 0b 	sts	0x0B34, r1
    
    
    PRR1 &= ~(1 << PRUSB); // Enable USB macro.
    188c:	80 91 65 00 	lds	r24, 0x0065
    1890:	8f 77       	andi	r24, 0x7F	; 127
    1892:	80 93 65 00 	sts	0x0065, r24
    1896:	cf e6       	ldi	r28, 0x6F	; 111
    1898:	d1 e0       	ldi	r29, 0x01	; 1
    189a:	ee 24       	eor	r14, r14
    189c:	ff 24       	eor	r15, r15
    
    for (uint8_t i = 0; i < 6; i++) {
        uint8_t temp = (serial_nmbr >> 8*(i)) & 0xFF;
    189e:	21 2f       	mov	r18, r17
    18a0:	3d 2d       	mov	r19, r13
    18a2:	4c 2d       	mov	r20, r12
    18a4:	5b 2d       	mov	r21, r11
    18a6:	6a 2d       	mov	r22, r10
    18a8:	79 2d       	mov	r23, r9
    18aa:	88 2d       	mov	r24, r8
    18ac:	97 2d       	mov	r25, r7
    18ae:	0e 2d       	mov	r16, r14
    18b0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__lshrdi3>
      reset_detected=true;
   }
}

static uint8_t bin2hex(uint8_t  nibble) {
    nibble &= 0x0F;
    18b4:	82 2f       	mov	r24, r18
    18b6:	82 95       	swap	r24
    18b8:	8f 70       	andi	r24, 0x0F	; 15
	if (nibble < 10)
    18ba:	8a 30       	cpi	r24, 0x0A	; 10
    18bc:	10 f4       	brcc	.+4      	; 0x18c2 <usb_task_init+0x88>
	    nibble += '0';
    18be:	80 5d       	subi	r24, 0xD0	; 208
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <usb_task_init+0x8a>
	else
	    nibble += 'A' - 10;
    18c2:	89 5c       	subi	r24, 0xC9	; 201
    
    PRR1 &= ~(1 << PRUSB); // Enable USB macro.
    
    for (uint8_t i = 0; i < 6; i++) {
        uint8_t temp = (serial_nmbr >> 8*(i)) & 0xFF;
		usb_user_serial_number.wstring[i * 2]   = bin2hex(temp >> 4);		// High nibble
    18c4:	88 83       	st	Y, r24
    18c6:	19 82       	std	Y+1, r1	; 0x01
      reset_detected=true;
   }
}

static uint8_t bin2hex(uint8_t  nibble) {
    nibble &= 0x0F;
    18c8:	2f 70       	andi	r18, 0x0F	; 15
	if (nibble < 10)
    18ca:	2a 30       	cpi	r18, 0x0A	; 10
    18cc:	10 f4       	brcc	.+4      	; 0x18d2 <usb_task_init+0x98>
	    nibble += '0';
    18ce:	20 5d       	subi	r18, 0xD0	; 208
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <usb_task_init+0x9a>
	else
	    nibble += 'A' - 10;
    18d2:	29 5c       	subi	r18, 0xC9	; 201
    PRR1 &= ~(1 << PRUSB); // Enable USB macro.
    
    for (uint8_t i = 0; i < 6; i++) {
        uint8_t temp = (serial_nmbr >> 8*(i)) & 0xFF;
		usb_user_serial_number.wstring[i * 2]   = bin2hex(temp >> 4);		// High nibble
		usb_user_serial_number.wstring[i * 2 + 1] = bin2hex(temp & 0x0F);	// Low nibble
    18d4:	2a 83       	std	Y+2, r18	; 0x02
    18d6:	1b 82       	std	Y+3, r1	; 0x03
    18d8:	88 e0       	ldi	r24, 0x08	; 8
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	e8 0e       	add	r14, r24
    18de:	f9 1e       	adc	r15, r25
    18e0:	24 96       	adiw	r28, 0x04	; 4
    done_callback = NULL;
    
    
    PRR1 &= ~(1 << PRUSB); // Enable USB macro.
    
    for (uint8_t i = 0; i < 6; i++) {
    18e2:	90 e3       	ldi	r25, 0x30	; 48
    18e4:	e9 16       	cp	r14, r25
    18e6:	f1 04       	cpc	r15, r1
    18e8:	d1 f6       	brne	.-76     	; 0x189e <usb_task_init+0x64>
        uint8_t temp = (serial_nmbr >> 8*(i)) & 0xFF;
		usb_user_serial_number.wstring[i * 2]   = bin2hex(temp >> 4);		// High nibble
		usb_user_serial_number.wstring[i * 2 + 1] = bin2hex(temp & 0x0F);	// Low nibble
    }
    
	Usb_force_device_mode();
    18ea:	80 91 d7 00 	lds	r24, 0x00D7
    18ee:	8f 7b       	andi	r24, 0xBF	; 191
    18f0:	80 93 d7 00 	sts	0x00D7, r24
    18f4:	80 91 d7 00 	lds	r24, 0x00D7
    18f8:	80 68       	ori	r24, 0x80	; 128
    18fa:	80 93 d7 00 	sts	0x00D7, r24
	Usb_enable();
    18fe:	80 91 d8 00 	lds	r24, 0x00D8
    1902:	80 69       	ori	r24, 0x90	; 144
    1904:	80 93 d8 00 	sts	0x00D8, r24
	Usb_select_device();
    1908:	80 91 d8 00 	lds	r24, 0x00D8
    190c:	8f 7b       	andi	r24, 0xBF	; 191
    190e:	80 93 d8 00 	sts	0x00D8, r24
	Usb_enable_vbus_interrupt();
    1912:	80 91 d8 00 	lds	r24, 0x00D8
    1916:	81 60       	ori	r24, 0x01	; 1
    1918:	80 93 d8 00 	sts	0x00D8, r24
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	bf 90       	pop	r11
    192e:	af 90       	pop	r10
    1930:	9f 90       	pop	r9
    1932:	8f 90       	pop	r8
    1934:	7f 90       	pop	r7
    1936:	08 95       	ret

00001938 <usb_task_deinit>:

void usb_task_deinit(void) {
    Usb_disable();
    1938:	e8 ed       	ldi	r30, 0xD8	; 216
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	8f 76       	andi	r24, 0x6F	; 111
    1940:	80 83       	st	Z, r24
    PRR1 |= (1 << PRUSB); // Disable USB macro.
    1942:	e5 e6       	ldi	r30, 0x65	; 101
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 68       	ori	r24, 0x80	; 128
    194a:	80 83       	st	Z, r24
}
    194c:	08 95       	ret

0000194e <usb_start_device>:
//! This function enables the USB controller and init the USB interrupts.
//! The aim is to allow the USB connection detection in order to send
//! the appropriate USB event to the operating mode manager.
void usb_start_device (void)
{
   Usb_enable_regulator();
    194e:	80 91 d7 00 	lds	r24, 0x00D7
    1952:	81 60       	ori	r24, 0x01	; 1
    1954:	80 93 d7 00 	sts	0x00D7, r24
   Pll_start_auto();
    1958:	8e e0       	ldi	r24, 0x0E	; 14
    195a:	89 bd       	out	0x29, r24	; 41
   Wait_pll_ready();
    195c:	09 b4       	in	r0, 0x29	; 41
    195e:	00 fe       	sbrs	r0, 0
    1960:	fd cf       	rjmp	.-6      	; 0x195c <usb_start_device+0xe>
   Usb_unfreeze_clock();
    1962:	80 91 d8 00 	lds	r24, 0x00D8
    1966:	8f 7d       	andi	r24, 0xDF	; 223
    1968:	80 93 d8 00 	sts	0x00D8, r24
   Usb_enable_suspend_interrupt();
    196c:	80 91 e2 00 	lds	r24, 0x00E2
    1970:	81 60       	ori	r24, 0x01	; 1
    1972:	80 93 e2 00 	sts	0x00E2, r24
   Usb_enable_reset_interrupt();
    1976:	80 91 e2 00 	lds	r24, 0x00E2
    197a:	88 60       	ori	r24, 0x08	; 8
    197c:	80 93 e2 00 	sts	0x00E2, r24
   usb_init_device();         // configure the USB controller EP0
    1980:	0e 94 a4 13 	call	0x2748	; 0x2748 <usb_init_device>
   Usb_attach();
    1984:	80 91 e0 00 	lds	r24, 0x00E0
    1988:	8e 7f       	andi	r24, 0xFE	; 254
    198a:	80 93 e0 00 	sts	0x00E0, r24
   usb_connected = false;
    198e:	10 92 2e 0b 	sts	0x0B2E, r1
}
    1992:	08 95       	ret

00001994 <usb_task>:
//! the usb_process_request() function is call in the usb_enum.c file
//! If a new USB mass storage Command Block Wrapper (CBW) occurs,
//! this one will be decoded and the SCSI command will be taken in charge
//! by the scsi decoder.
void usb_task(void) {
   if (Is_usb_vbus_high()&& usb_connected==false) {
    1994:	80 91 d9 00 	lds	r24, 0x00D9
    1998:	80 ff       	sbrs	r24, 0
    199a:	11 c0       	rjmp	.+34     	; 0x19be <usb_task+0x2a>
    199c:	80 91 2e 0b 	lds	r24, 0x0B2E
    19a0:	88 23       	and	r24, r24
    19a2:	69 f4       	brne	.+26     	; 0x19be <usb_task+0x2a>
        usb_connected = true;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	80 93 2e 0b 	sts	0x0B2E, r24
     
    	Usb_enable_reset_interrupt();
    19aa:	80 91 e2 00 	lds	r24, 0x00E2
    19ae:	88 60       	ori	r24, 0x08	; 8
    19b0:	80 93 e2 00 	sts	0x00E2, r24
		Usb_attach();
    19b4:	80 91 e0 00 	lds	r24, 0x00E0
    19b8:	8e 7f       	andi	r24, 0xFE	; 254
    19ba:	80 93 e0 00 	sts	0x00E0, r24
   }

   if (reset_detected==true) {
    19be:	80 91 2f 0b 	lds	r24, 0x0B2F
    19c2:	88 23       	and	r24, r24
    19c4:	49 f0       	breq	.+18     	; 0x19d8 <usb_task+0x44>
      Usb_reset_endpoint(0);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	80 93 ea 00 	sts	0x00EA, r24
    19cc:	10 92 ea 00 	sts	0x00EA, r1
      usb_configuration_nb=0;
    19d0:	10 92 36 0b 	sts	0x0B36, r1
      reset_detected=false;
    19d4:	10 92 2f 0b 	sts	0x0B2F, r1
   }

    // USB MANAGEMENT
    Usb_select_endpoint(EP_CONTROL);
    19d8:	10 92 e9 00 	sts	0x00E9, r1
    if (Is_usb_receive_setup()) { usb_process_request(); }
    19dc:	80 91 e8 00 	lds	r24, 0x00E8
    19e0:	83 ff       	sbrs	r24, 3
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <usb_task+0x54>
    19e4:	0e 94 10 14 	call	0x2820	; 0x2820 <usb_process_request>
    
    /* Check for new transactions. */
    if (true == ep_open) {
    19e8:	80 91 30 0b 	lds	r24, 0x0B30
    19ec:	88 23       	and	r24, r24
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <usb_task+0x5e>
    19f0:	4d c0       	rjmp	.+154    	; 0x1a8c <usb_task+0xf8>
        Usb_select_endpoint(open_ep); // Select open EP.
    19f2:	80 91 33 0b 	lds	r24, 0x0B33
    19f6:	80 93 e9 00 	sts	0x00E9, r24
    19fa:	80 91 31 0b 	lds	r24, 0x0B31
    19fe:	90 91 32 0b 	lds	r25, 0x0B32
        
        /* Check if there is data available. */
        while ((UEINTX & (1 << RXOUTI)) == (1 << RXOUTI)) { 
    1a02:	3c c0       	rjmp	.+120    	; 0x1a7c <usb_task+0xe8>
            /* Data available. */
            UEINTX &= ~(1 << RXOUTI); // ACK RX_OUT interrupt flag.
    1a04:	20 91 e8 00 	lds	r18, 0x00E8
    1a08:	2b 7f       	andi	r18, 0xFB	; 251
    1a0a:	20 93 e8 00 	sts	0x00E8, r18
        
            /* Ready to upload data. First read number of bytes received. */
            uint8_t bytes_in_bank = Usb_byte_counter_8();
    1a0e:	60 91 f2 00 	lds	r22, 0x00F2
        
            if ((bytes_in_bank + trans_data_i) > USB_TRANSACTION_BUFFER_SIZE) {
    1a12:	26 2f       	mov	r18, r22
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	ac 01       	movw	r20, r24
    1a18:	42 0f       	add	r20, r18
    1a1a:	53 1f       	adc	r21, r19
    1a1c:	71 e0       	ldi	r23, 0x01	; 1
    1a1e:	41 32       	cpi	r20, 0x21	; 33
    1a20:	57 07       	cpc	r21, r23
    1a22:	28 f4       	brcc	.+10     	; 0x1a2e <usb_task+0x9a>
//! If a Setup request occurs on the Default Control Endpoint,
//! the usb_process_request() function is call in the usb_enum.c file
//! If a new USB mass storage Command Block Wrapper (CBW) occurs,
//! this one will be decoded and the SCSI command will be taken in charge
//! by the scsi decoder.
void usb_task(void) {
    1a24:	fc 01       	movw	r30, r24
    1a26:	e9 5c       	subi	r30, 0xC9	; 201
    1a28:	f4 4f       	sbci	r31, 0xF4	; 244
    1a2a:	46 2f       	mov	r20, r22
    1a2c:	0e c0       	rjmp	.+28     	; 0x1a4a <usb_task+0xb6>
            UEINTX &= ~(1 << RXOUTI); // ACK RX_OUT interrupt flag.
        
            /* Ready to upload data. First read number of bytes received. */
            uint8_t bytes_in_bank = Usb_byte_counter_8();
        
            if ((bytes_in_bank + trans_data_i) > USB_TRANSACTION_BUFFER_SIZE) {
    1a2e:	90 93 32 0b 	sts	0x0B32, r25
    1a32:	80 93 31 0b 	sts	0x0B31, r24
                ep_open = false;
    1a36:	10 92 30 0b 	sts	0x0B30, r1
                ep_error = true;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	80 93 1c 11 	sts	0x111C, r24
                
                return;
    1a40:	08 95       	ret
            }
            
            /* Upload data. */
            for (uint8_t i = bytes_in_bank; i != 0; i--) {
                *(transaction_data + trans_data_i) = Usb_read_byte();
    1a42:	50 91 f1 00 	lds	r21, 0x00F1
    1a46:	51 93       	st	Z+, r21
                
                return;
            }
            
            /* Upload data. */
            for (uint8_t i = bytes_in_bank; i != 0; i--) {
    1a48:	41 50       	subi	r20, 0x01	; 1
    1a4a:	44 23       	and	r20, r20
    1a4c:	d1 f7       	brne	.-12     	; 0x1a42 <usb_task+0xae>
    1a4e:	82 0f       	add	r24, r18
    1a50:	93 1f       	adc	r25, r19
                *(transaction_data + trans_data_i) = Usb_read_byte();
                trans_data_i++;
            }
            
            UEINTX &= ~(1 << FIFOCON); // ACK that fifo is read.
    1a52:	20 91 e8 00 	lds	r18, 0x00E8
    1a56:	2f 77       	andi	r18, 0x7F	; 127
    1a58:	20 93 e8 00 	sts	0x00E8, r18
            
            /* Check if this was the last packet in the transaction. */
            if (bytes_in_bank < 64) {
    1a5c:	60 34       	cpi	r22, 0x40	; 64
    1a5e:	70 f4       	brcc	.+28     	; 0x1a7c <usb_task+0xe8>
    1a60:	90 93 32 0b 	sts	0x0B32, r25
    1a64:	80 93 31 0b 	sts	0x0B31, r24
                ep_open = false;
    1a68:	10 92 30 0b 	sts	0x0B30, r1
                
                /* End of transmission is indicated, so set the flag value to true
                 * or execute the correct callback.
                 */
                done_callback(trans_data_i, transaction_data);
    1a6c:	e0 91 34 0b 	lds	r30, 0x0B34
    1a70:	f0 91 35 0b 	lds	r31, 0x0B35
    1a74:	67 e3       	ldi	r22, 0x37	; 55
    1a76:	7b e0       	ldi	r23, 0x0B	; 11
    1a78:	09 95       	icall

                break;
    1a7a:	08 95       	ret
    /* Check for new transactions. */
    if (true == ep_open) {
        Usb_select_endpoint(open_ep); // Select open EP.
        
        /* Check if there is data available. */
        while ((UEINTX & (1 << RXOUTI)) == (1 << RXOUTI)) { 
    1a7c:	20 91 e8 00 	lds	r18, 0x00E8
    1a80:	22 fd       	sbrc	r18, 2
    1a82:	c0 cf       	rjmp	.-128    	; 0x1a04 <usb_task+0x70>
    1a84:	90 93 32 0b 	sts	0x0B32, r25
    1a88:	80 93 31 0b 	sts	0x0B31, r24
    1a8c:	08 95       	ret

00001a8e <usb_ep_open>:
            }
        }
    }
}

uint8_t usb_ep_open(usb_trans_descriptor_t *trans_desc) {
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	0f 92       	push	r0
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	fc 01       	movw	r30, r24
    if (NULL == trans_desc) { return USB_INVALID_PARAMETER; }
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	11 f1       	breq	.+68     	; 0x1ae2 <usb_ep_open+0x54>
    if (true == ep_open) { return USB_EP_HANDLE_ALREADY_OPEN; } // Already open. usb_ep_close must be issued first.
    1a9e:	80 91 30 0b 	lds	r24, 0x0B30
    1aa2:	88 23       	and	r24, r24
    1aa4:	e1 f4       	brne	.+56     	; 0x1ade <usb_ep_open+0x50>
    if (EP_CONTROL == (trans_desc->ep)) { return USB_INVALID_PARAMETER; }
    1aa6:	80 81       	ld	r24, Z
    1aa8:	88 23       	and	r24, r24
    1aaa:	d9 f0       	breq	.+54     	; 0x1ae2 <usb_ep_open+0x54>
    
    ENTER_CRITICAL_REGION();
    1aac:	8f b7       	in	r24, 0x3f	; 63
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	f8 94       	cli
    open_ep = (trans_desc->ep);
    1ab2:	80 81       	ld	r24, Z
    1ab4:	80 93 33 0b 	sts	0x0B33, r24
    
    done_callback = trans_desc->done_callback;
    1ab8:	81 81       	ldd	r24, Z+1	; 0x01
    1aba:	92 81       	ldd	r25, Z+2	; 0x02
    1abc:	90 93 35 0b 	sts	0x0B35, r25
    1ac0:	80 93 34 0b 	sts	0x0B34, r24
    
    trans_data_i = 0;
    1ac4:	10 92 32 0b 	sts	0x0B32, r1
    1ac8:	10 92 31 0b 	sts	0x0B31, r1
    ep_open = true;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	80 93 30 0b 	sts	0x0B30, r24
    ep_error = false;
    1ad2:	10 92 1c 11 	sts	0x111C, r1
    LEAVE_CRITICAL_REGION();
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	8f bf       	out	0x3f, r24	; 63
    
    return USB_SUCCESS;
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <usb_ep_open+0x56>
    }
}

uint8_t usb_ep_open(usb_trans_descriptor_t *trans_desc) {
    if (NULL == trans_desc) { return USB_INVALID_PARAMETER; }
    if (true == ep_open) { return USB_EP_HANDLE_ALREADY_OPEN; } // Already open. usb_ep_close must be issued first.
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	01 c0       	rjmp	.+2      	; 0x1ae4 <usb_ep_open+0x56>
    if (EP_CONTROL == (trans_desc->ep)) { return USB_INVALID_PARAMETER; }
    1ae2:	82 e0       	ldi	r24, 0x02	; 2
    ep_open = true;
    ep_error = false;
    LEAVE_CRITICAL_REGION();
    
    return USB_SUCCESS;
}
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <usb_ep_close>:

void usb_ep_close(void) {
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    1af6:	8f b7       	in	r24, 0x3f	; 63
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	f8 94       	cli
    ep_open = false;
    1afc:	10 92 30 0b 	sts	0x0B30, r1
    LEAVE_CRITICAL_REGION();
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	8f bf       	out	0x3f, r24	; 63
}
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <usb_ep_ack_transaction>:

void usb_ep_ack_transaction(void) {
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	0f 92       	push	r0
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    1b16:	8f b7       	in	r24, 0x3f	; 63
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	f8 94       	cli
    ep_open = true;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	80 93 30 0b 	sts	0x0B30, r24
    ep_error = false;
    1b22:	10 92 1c 11 	sts	0x111C, r1
    trans_data_i = 0;
    1b26:	10 92 32 0b 	sts	0x0B32, r1
    1b2a:	10 92 31 0b 	sts	0x0B31, r1
    LEAVE_CRITICAL_REGION();
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	8f bf       	out	0x3f, r24	; 63
}
    1b32:	0f 90       	pop	r0
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <usb_ep_write>:

uint8_t usb_ep_write(uint8_t ep, uint8_t length, uint8_t *packet) {
    UENUM = ep;
    1b3a:	80 93 e9 00 	sts	0x00E9, r24
    if ((UEINTX & (1 << TXINI)) != (1 << TXINI)) { return USB_HW_TIME_OUT; }
    1b3e:	80 91 e8 00 	lds	r24, 0x00E8
    1b42:	80 ff       	sbrs	r24, 0
    1b44:	41 c0       	rjmp	.+130    	; 0x1bc8 <usb_ep_write+0x8e>
    
    uint8_t* data_ptr = packet;
    uint8_t bytes_to_write;
    uint8_t packets_to_write = (uint8_t)(((uint16_t)(length + 64 - 1)) >> 6);
    1b46:	86 2f       	mov	r24, r22
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	cf 96       	adiw	r24, 0x3f	; 63
    1b4c:	26 e0       	ldi	r18, 0x06	; 6
    1b4e:	96 95       	lsr	r25
    1b50:	87 95       	ror	r24
    1b52:	2a 95       	dec	r18
    1b54:	e1 f7       	brne	.-8      	; 0x1b4e <usb_ep_write+0x14>
    
    if ((length % 64) == 0) {
    1b56:	96 2f       	mov	r25, r22
    1b58:	9f 73       	andi	r25, 0x3F	; 63
    1b5a:	11 f4       	brne	.+4      	; 0x1b60 <usb_ep_write+0x26>
        bytes_to_write = 64;
        packets_to_write++;
    1b5c:	8f 5f       	subi	r24, 0xFF	; 255
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <usb_ep_write+0x2a>
    } else if (length > 64) {
    1b60:	61 34       	cpi	r22, 0x41	; 65
    1b62:	10 f0       	brcs	.+4      	; 0x1b68 <usb_ep_write+0x2e>
        bytes_to_write = 64;
    1b64:	90 e4       	ldi	r25, 0x40	; 64
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <usb_ep_write+0x30>
    uint8_t packets_to_write = (uint8_t)(((uint16_t)(length + 64 - 1)) >> 6);
    
    if ((length % 64) == 0) {
        bytes_to_write = 64;
        packets_to_write++;
    } else if (length > 64) {
    1b68:	96 2f       	mov	r25, r22
    uint8_t* data_ptr = packet;
    uint8_t bytes_to_write;
    uint8_t packets_to_write = (uint8_t)(((uint16_t)(length + 64 - 1)) >> 6);
    
    if ((length % 64) == 0) {
        bytes_to_write = 64;
    1b6a:	24 2f       	mov	r18, r20
    1b6c:	35 2f       	mov	r19, r21
    do {
    
        // Upload EP_SIZE data, less or zero packet.
        // Idea...upload as long as the EP is not full -> RWAL not set.
        
        UEINTX &= ~(1 << TXINI);
    1b6e:	40 91 e8 00 	lds	r20, 0x00E8
    1b72:	4e 7f       	andi	r20, 0xFE	; 254
    1b74:	40 93 e8 00 	sts	0x00E8, r20
        
        while (bytes_to_write != 0) {
    1b78:	49 2f       	mov	r20, r25
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <usb_ep_write+0x4c>
                
            UEDATX = *data_ptr;
    1b7e:	51 91       	ld	r21, Z+
    1b80:	50 93 f1 00 	sts	0x00F1, r21
            
            // Decrement number of bytes in transaction.
            data_ptr++;
            bytes_to_write--;
    1b84:	41 50       	subi	r20, 0x01	; 1
        // Upload EP_SIZE data, less or zero packet.
        // Idea...upload as long as the EP is not full -> RWAL not set.
        
        UEINTX &= ~(1 << TXINI);
        
        while (bytes_to_write != 0) {
    1b86:	44 23       	and	r20, r20
    1b88:	d1 f7       	brne	.-12     	; 0x1b7e <usb_ep_write+0x44>
    1b8a:	29 0f       	add	r18, r25
    1b8c:	31 1d       	adc	r19, r1
            // Decrement number of bytes in transaction.
            data_ptr++;
            bytes_to_write--;
        }
        
        length -= 64;
    1b8e:	60 54       	subi	r22, 0x40	; 64
        
        // Clear FICOCON. -> switch Bank and send data.
        UEINTX &= ~(1 << FIFOCON);
    1b90:	90 91 e8 00 	lds	r25, 0x00E8
    1b94:	9f 77       	andi	r25, 0x7F	; 127
    1b96:	90 93 e8 00 	sts	0x00E8, r25
        
        // End of transfer reached. Check if zero length packet must be sent.
                  
        if (length >= 64) {
    1b9a:	60 34       	cpi	r22, 0x40	; 64
    1b9c:	10 f0       	brcs	.+4      	; 0x1ba2 <usb_ep_write+0x68>
            bytes_to_write = 64;
    1b9e:	90 e4       	ldi	r25, 0x40	; 64
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <usb_ep_write+0x6a>
        // Clear FICOCON. -> switch Bank and send data.
        UEINTX &= ~(1 << FIFOCON);
        
        // End of transfer reached. Check if zero length packet must be sent.
                  
        if (length >= 64) {
    1ba2:	96 2f       	mov	r25, r22
        } else {
            bytes_to_write = length;
        }
        
        packets_to_write--;
        uint16_t timeout = 0xFFFF;
    1ba4:	4f ef       	ldi	r20, 0xFF	; 255
    1ba6:	5f ef       	ldi	r21, 0xFF	; 255
        
        while ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <usb_ep_write+0x80>
            if (timeout == 0) {
    1baa:	41 15       	cp	r20, r1
    1bac:	51 05       	cpc	r21, r1
    1bae:	19 f4       	brne	.+6      	; 0x1bb6 <usb_ep_write+0x7c>
                LED_ORANGE_ON();
    1bb0:	76 98       	cbi	0x0e, 6	; 14
                return 1;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	08 95       	ret
            } else {
                timeout--;
    1bb6:	41 50       	subi	r20, 0x01	; 1
    1bb8:	50 40       	sbci	r21, 0x00	; 0
        }
        
        packets_to_write--;
        uint16_t timeout = 0xFFFF;
        
        while ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
    1bba:	70 91 e8 00 	lds	r23, 0x00E8
    1bbe:	70 ff       	sbrs	r23, 0
    1bc0:	f4 cf       	rjmp	.-24     	; 0x1baa <usb_ep_write+0x70>
            bytes_to_write = 64;
        } else {
            bytes_to_write = length;
        }
        
        packets_to_write--;
    1bc2:	81 50       	subi	r24, 0x01	; 1
                return 1;
            } else {
                timeout--;
            }
        }            // bank is not ready..    
    } while (packets_to_write != 0);
    1bc4:	a1 f6       	brne	.-88     	; 0x1b6e <usb_ep_write+0x34>
    1bc6:	08 95       	ret
    LEAVE_CRITICAL_REGION();
}

uint8_t usb_ep_write(uint8_t ep, uint8_t length, uint8_t *packet) {
    UENUM = ep;
    if ((UEINTX & (1 << TXINI)) != (1 << TXINI)) { return USB_HW_TIME_OUT; }
    1bc8:	84 e0       	ldi	r24, 0x04	; 4
                timeout--;
            }
        }            // bank is not ready..    
    } while (packets_to_write != 0);
    return USB_SUCCESS;
}
    1bca:	08 95       	ret

00001bcc <usb_ep_write_block>:

uint8_t usb_ep_write_block(uint8_t ep, uint8_t length, uint8_t *packet) {
    1bcc:	fa 01       	movw	r30, r20
    if (0 == length) { return 1; }
    1bce:	66 23       	and	r22, r22
    1bd0:	89 f1       	breq	.+98     	; 0x1c34 <usb_ep_write_block+0x68>
    
    bool send_zero_packet = false;
        
    if (length == 64) { send_zero_packet = true; }
    
    UENUM = ep;
    1bd2:	80 93 e9 00 	sts	0x00E9, r24
    
    uint8_t timeout = 0xFF;
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
        while ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
    1bd8:	03 c0       	rjmp	.+6      	; 0x1be0 <usb_ep_write_block+0x14>
            if (timeout == 0) {
    1bda:	88 23       	and	r24, r24
    1bdc:	69 f1       	breq	.+90     	; 0x1c38 <usb_ep_write_block+0x6c>
                return USB_HW_TIME_OUT;
            } else {
                timeout--;
    1bde:	81 50       	subi	r24, 0x01	; 1
    if (length == 64) { send_zero_packet = true; }
    
    UENUM = ep;
    
    uint8_t timeout = 0xFF;
        while ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
    1be0:	90 91 e8 00 	lds	r25, 0x00E8
    1be4:	90 ff       	sbrs	r25, 0
    1be6:	f9 cf       	rjmp	.-14     	; 0x1bda <usb_ep_write_block+0xe>
            } else {
                timeout--;
            }
        }            // bank is not ready..
    
    UEINTX &= ~(1 << TXINI);
    1be8:	80 91 e8 00 	lds	r24, 0x00E8
    1bec:	8e 7f       	andi	r24, 0xFE	; 254
    1bee:	80 93 e8 00 	sts	0x00E8, r24
    1bf2:	86 2f       	mov	r24, r22
    
    do {
        UEDATX = *packet;
    1bf4:	91 91       	ld	r25, Z+
    1bf6:	90 93 f1 00 	sts	0x00F1, r25
            
        // Decrement number of bytes in transaction.
        packet++;
        length--;
    1bfa:	81 50       	subi	r24, 0x01	; 1
    } while (length != 0);
    1bfc:	d9 f7       	brne	.-10     	; 0x1bf4 <usb_ep_write_block+0x28>
    
    UEINTX &= ~(1 << FIFOCON);
    1bfe:	80 91 e8 00 	lds	r24, 0x00E8
    1c02:	8f 77       	andi	r24, 0x7F	; 127
    1c04:	80 93 e8 00 	sts	0x00E8, r24
    
    if (true == send_zero_packet) {
    1c08:	60 34       	cpi	r22, 0x40	; 64
    1c0a:	c1 f4       	brne	.+48     	; 0x1c3c <usb_ep_write_block+0x70>
    1c0c:	8f ef       	ldi	r24, 0xFF	; 255
    1c0e:	03 c0       	rjmp	.+6      	; 0x1c16 <usb_ep_write_block+0x4a>
        timeout = 0xFF;
        while ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
            if (timeout == 0) {
    1c10:	88 23       	and	r24, r24
    1c12:	b1 f0       	breq	.+44     	; 0x1c40 <usb_ep_write_block+0x74>
                return USB_HW_TIME_OUT;
            } else {
                timeout--;
    1c14:	81 50       	subi	r24, 0x01	; 1
    
    UEINTX &= ~(1 << FIFOCON);
    
    if (true == send_zero_packet) {
        timeout = 0xFF;
        while ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
    1c16:	90 91 e8 00 	lds	r25, 0x00E8
    1c1a:	90 ff       	sbrs	r25, 0
    1c1c:	f9 cf       	rjmp	.-14     	; 0x1c10 <usb_ep_write_block+0x44>
            } else {
                timeout--;
            }
        }            // bank is not ready..
    
        UEINTX &= ~(1 << TXINI);
    1c1e:	80 91 e8 00 	lds	r24, 0x00E8
    1c22:	8e 7f       	andi	r24, 0xFE	; 254
    1c24:	80 93 e8 00 	sts	0x00E8, r24
        UEINTX &= ~(1 << FIFOCON);
    1c28:	80 91 e8 00 	lds	r24, 0x00E8
    1c2c:	8f 77       	andi	r24, 0x7F	; 127
    1c2e:	80 93 e8 00 	sts	0x00E8, r24
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <usb_ep_write_block+0x70>
    } while (packets_to_write != 0);
    return USB_SUCCESS;
}

uint8_t usb_ep_write_block(uint8_t ep, uint8_t length, uint8_t *packet) {
    if (0 == length) { return 1; }
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	08 95       	ret
    UENUM = ep;
    
    uint8_t timeout = 0xFF;
        while ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
            if (timeout == 0) {
                return USB_HW_TIME_OUT;
    1c38:	84 e0       	ldi	r24, 0x04	; 4
    1c3a:	08 95       	ret
    
        UEINTX &= ~(1 << TXINI);
        UEINTX &= ~(1 << FIFOCON);
    }
    
    return 0;
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	08 95       	ret
    
    if (true == send_zero_packet) {
        timeout = 0xFF;
        while ((UEINTX & (1 << TXINI)) != (1 << TXINI)) {
            if (timeout == 0) {
                return USB_HW_TIME_OUT;
    1c40:	84 e0       	ldi	r24, 0x04	; 4
        UEINTX &= ~(1 << TXINI);
        UEINTX &= ~(1 << FIFOCON);
    }
    
    return 0;
}
    1c42:	08 95       	ret

00001c44 <__vector_10>:
//!

#if defined(__ICCAVR__)
ISR(USB_General_vect) {
#elif defined(__GNUC__)
ISR(USB_GEN_vect) {
    1c44:	1f 92       	push	r1
    1c46:	0f 92       	push	r0
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	0f 92       	push	r0
    1c4c:	0b b6       	in	r0, 0x3b	; 59
    1c4e:	0f 92       	push	r0
    1c50:	11 24       	eor	r1, r1
    1c52:	2f 93       	push	r18
    1c54:	3f 93       	push	r19
    1c56:	4f 93       	push	r20
    1c58:	5f 93       	push	r21
    1c5a:	6f 93       	push	r22
    1c5c:	7f 93       	push	r23
    1c5e:	8f 93       	push	r24
    1c60:	9f 93       	push	r25
    1c62:	af 93       	push	r26
    1c64:	bf 93       	push	r27
    1c66:	ef 93       	push	r30
    1c68:	ff 93       	push	r31
#else
#error 'Unsupported compiler.'
#endif
   if (Is_usb_vbus_transition())
    1c6a:	80 91 da 00 	lds	r24, 0x00DA
    1c6e:	80 ff       	sbrs	r24, 0
    1c70:	19 c0       	rjmp	.+50     	; 0x1ca4 <__vector_10+0x60>
   {
      Usb_ack_vbus_transition();
    1c72:	8e ef       	ldi	r24, 0xFE	; 254
    1c74:	80 93 da 00 	sts	0x00DA, r24
      if (Is_usb_vbus_high())
    1c78:	80 91 d9 00 	lds	r24, 0x00D9
    1c7c:	80 ff       	sbrs	r24, 0
    1c7e:	10 c0       	rjmp	.+32     	; 0x1ca0 <__vector_10+0x5c>
      {
         usb_connected = true;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 2e 0b 	sts	0x0B2E, r24
         //Usb_send_event(EVT_USB_POWERED);
			Usb_enable_reset_interrupt();
    1c86:	80 91 e2 00 	lds	r24, 0x00E2
    1c8a:	88 60       	ori	r24, 0x08	; 8
    1c8c:	80 93 e2 00 	sts	0x00E2, r24
         usb_start_device();
    1c90:	0e 94 a7 0c 	call	0x194e	; 0x194e <usb_start_device>
			Usb_attach();
    1c94:	80 91 e0 00 	lds	r24, 0x00E0
    1c98:	8e 7f       	andi	r24, 0xFE	; 254
    1c9a:	80 93 e0 00 	sts	0x00E0, r24
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <__vector_10+0x60>
      }
      else
      {
         usb_connected = false;
    1ca0:	10 92 2e 0b 	sts	0x0B2E, r1
         //Usb_send_event(EVT_USB_UNPOWERED);
      }
   }

   if(Is_usb_id_transition())
    1ca4:	80 91 da 00 	lds	r24, 0x00DA
    1ca8:	81 ff       	sbrs	r24, 1
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <__vector_10+0x72>
   {
      Usb_ack_id_transition();
    1cac:	8d ef       	ldi	r24, 0xFD	; 253
    1cae:	80 93 da 00 	sts	0x00DA, r24
      if(Is_usb_id_device())
    1cb2:	80 91 d9 00 	lds	r24, 0x00D9
      {
        // Usb_send_event(EVT_USB_HOST_FUNCTION);
      }
   }

   if (Is_usb_sof())
    1cb6:	80 91 e1 00 	lds	r24, 0x00E1
    1cba:	82 ff       	sbrs	r24, 2
    1cbc:	03 c0       	rjmp	.+6      	; 0x1cc4 <__vector_10+0x80>
   {
      Usb_ack_sof();
    1cbe:	8b ef       	ldi	r24, 0xFB	; 251
    1cc0:	80 93 e1 00 	sts	0x00E1, r24
//      Usb_sof_action();
   }

   if (Is_usb_suspend())
    1cc4:	80 91 e1 00 	lds	r24, 0x00E1
    1cc8:	80 ff       	sbrs	r24, 0
    1cca:	10 c0       	rjmp	.+32     	; 0x1cec <__vector_10+0xa8>
   {
      Usb_ack_suspend();
    1ccc:	8e ef       	ldi	r24, 0xFE	; 254
    1cce:	80 93 e1 00 	sts	0x00E1, r24
      Usb_enable_wake_up_interrupt();
    1cd2:	80 91 e2 00 	lds	r24, 0x00E2
    1cd6:	80 61       	ori	r24, 0x10	; 16
    1cd8:	80 93 e2 00 	sts	0x00E2, r24
      Usb_ack_wake_up();                 // clear wake up to detect next event
    1cdc:	8f ee       	ldi	r24, 0xEF	; 239
    1cde:	80 93 e1 00 	sts	0x00E1, r24
      Usb_freeze_clock();
    1ce2:	80 91 d8 00 	lds	r24, 0x00D8
    1ce6:	80 62       	ori	r24, 0x20	; 32
    1ce8:	80 93 d8 00 	sts	0x00D8, r24
      //Usb_send_event(EVT_USB_SUSPEND);
   }

   if (Is_usb_wake_up())
    1cec:	80 91 e1 00 	lds	r24, 0x00E1
    1cf0:	84 ff       	sbrs	r24, 4
    1cf2:	0d c0       	rjmp	.+26     	; 0x1d0e <__vector_10+0xca>
   {
      Usb_unfreeze_clock();
    1cf4:	80 91 d8 00 	lds	r24, 0x00D8
    1cf8:	8f 7d       	andi	r24, 0xDF	; 223
    1cfa:	80 93 d8 00 	sts	0x00D8, r24
      Usb_ack_wake_up();
    1cfe:	8f ee       	ldi	r24, 0xEF	; 239
    1d00:	80 93 e1 00 	sts	0x00E1, r24
      Usb_disable_wake_up_interrupt();
    1d04:	80 91 e2 00 	lds	r24, 0x00E2
    1d08:	8f 7e       	andi	r24, 0xEF	; 239
    1d0a:	80 93 e2 00 	sts	0x00E2, r24
      //Usb_send_event(EVT_USB_WAKE_UP);
   }

   if (Is_usb_resume())
    1d0e:	80 91 e1 00 	lds	r24, 0x00E1
    1d12:	85 ff       	sbrs	r24, 5
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <__vector_10+0xec>
   {
      Usb_disable_wake_up_interrupt();
    1d16:	80 91 e2 00 	lds	r24, 0x00E2
    1d1a:	8f 7e       	andi	r24, 0xEF	; 239
    1d1c:	80 93 e2 00 	sts	0x00E2, r24
      Usb_ack_resume();
    1d20:	8f ed       	ldi	r24, 0xDF	; 223
    1d22:	80 93 e1 00 	sts	0x00E1, r24
      Usb_disable_resume_interrupt();
    1d26:	80 91 e2 00 	lds	r24, 0x00E2
    1d2a:	8f 7d       	andi	r24, 0xDF	; 223
    1d2c:	80 93 e2 00 	sts	0x00E2, r24
      //Usb_send_event(EVT_USB_RESUME);
   }

   if (Is_usb_reset()) {
    1d30:	80 91 e1 00 	lds	r24, 0x00E1
    1d34:	83 ff       	sbrs	r24, 3
    1d36:	08 c0       	rjmp	.+16     	; 0x1d48 <__vector_10+0x104>
      Usb_ack_reset();
    1d38:	87 ef       	ldi	r24, 0xF7	; 247
    1d3a:	80 93 e1 00 	sts	0x00E1, r24
      usb_init_device();
    1d3e:	0e 94 a4 13 	call	0x2748	; 0x2748 <usb_init_device>
     // Usb_send_event(EVT_USB_RESET);
      reset_detected=true;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	80 93 2f 0b 	sts	0x0B2F, r24
   }
}
    1d48:	ff 91       	pop	r31
    1d4a:	ef 91       	pop	r30
    1d4c:	bf 91       	pop	r27
    1d4e:	af 91       	pop	r26
    1d50:	9f 91       	pop	r25
    1d52:	8f 91       	pop	r24
    1d54:	7f 91       	pop	r23
    1d56:	6f 91       	pop	r22
    1d58:	5f 91       	pop	r21
    1d5a:	4f 91       	pop	r20
    1d5c:	3f 91       	pop	r19
    1d5e:	2f 91       	pop	r18
    1d60:	0f 90       	pop	r0
    1d62:	0b be       	out	0x3b, r0	; 59
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	0f 90       	pop	r0
    1d6a:	1f 90       	pop	r1
    1d6c:	18 95       	reti

00001d6e <at24cxx_init>:
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/
bool at24cxx_init(void) {
    /* Enable the TWI module. */
    AT24CXX_PRR &= ~(1 << AT24CXX_PRR_BIT);
    1d6e:	e4 e6       	ldi	r30, 0x64	; 100
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	8f 77       	andi	r24, 0x7F	; 127
    1d76:	80 83       	st	Z, r24
    
    /* Set TWI speed. */
    AT24CXX_BRR = AT24CXX_BRR_CONF;
    1d78:	80 e2       	ldi	r24, 0x20	; 32
    1d7a:	80 93 b8 00 	sts	0x00B8, r24
    AT24CXX_SET_PRESCALER(AT24CXX_PRESCALER_CONF);
    1d7e:	e9 eb       	ldi	r30, 0xB9	; 185
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 83       	st	Z, r24
    
    return true;
}
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	08 95       	ret

00001d8a <at24cxx_deinit>:


void at24cxx_deinit(void) {
    /* Disable the TWI module. */
    AT24CXX_PRR |= (1 << AT24CXX_PRR_BIT);
    1d8a:	e4 e6       	ldi	r30, 0x64	; 100
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 68       	ori	r24, 0x80	; 128
    1d92:	80 83       	st	Z, r24
}
    1d94:	08 95       	ret

00001d96 <at24cxx_write_byte>:


bool at24cxx_write_byte(uint8_t byte_address, uint8_t byte_value) {
    /* Send start condition and wait for reply. */
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTA) | (1 << AT24CXX_TWEN);
    1d96:	94 ea       	ldi	r25, 0xA4	; 164
    1d98:	90 93 bc 00 	sts	0x00BC, r25
    uint8_t time_out = 0xFF;
    1d9c:	9f ef       	ldi	r25, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1d9e:	20 91 bc 00 	lds	r18, 0x00BC
             (0 != time_out));
    1da2:	27 fd       	sbrc	r18, 7
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <at24cxx_write_byte+0x14>
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTA) | (1 << AT24CXX_TWEN);
    uint8_t time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    1da6:	91 50       	subi	r25, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1da8:	d1 f7       	brne	.-12     	; 0x1d9e <at24cxx_write_byte+0x8>
             (0 != time_out));
     
    /* Check that the start condition was successfully transmitted. */
    if (AT24CXX_START != AT24CXX_GET_STATUS()) {
    1daa:	90 91 b9 00 	lds	r25, 0x00B9
    1dae:	98 7f       	andi	r25, 0xF8	; 248
    1db0:	98 30       	cpi	r25, 0x08	; 8
    1db2:	39 f5       	brne	.+78     	; 0x1e02 <at24cxx_write_byte+0x6c>
        AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTO) | (1 << AT24CXX_TWEN);
        return false;
    }
    
    /* Send SLA + W. */
    AT24CXX_DATA_REG = AT24CXX_SLA | AT24CXX_W;
    1db4:	90 ea       	ldi	r25, 0xA0	; 160
    1db6:	90 93 bb 00 	sts	0x00BB, r25
    AT24CXX_CONTROL_REG |= (1 << AT24CXX_TWINT);
    1dba:	90 91 bc 00 	lds	r25, 0x00BC
    1dbe:	90 68       	ori	r25, 0x80	; 128
    1dc0:	90 93 bc 00 	sts	0x00BC, r25
    
    time_out = 0xFF;
    1dc4:	9f ef       	ldi	r25, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1dc6:	20 91 bc 00 	lds	r18, 0x00BC
             (0 != time_out));
    1dca:	27 fd       	sbrc	r18, 7
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <at24cxx_write_byte+0x3c>
    
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    1dce:	91 50       	subi	r25, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1dd0:	d1 f7       	brne	.-12     	; 0x1dc6 <at24cxx_write_byte+0x30>
             (0 != time_out));
    
    /* Check that the SLA + W was transmitted. */
    if (AT24CXX_MT_SLA_ACK != AT24CXX_GET_STATUS()) {
    1dd2:	90 91 b9 00 	lds	r25, 0x00B9
    1dd6:	98 7f       	andi	r25, 0xF8	; 248
    1dd8:	98 31       	cpi	r25, 0x18	; 24
    1dda:	99 f4       	brne	.+38     	; 0x1e02 <at24cxx_write_byte+0x6c>
        AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTO) | (1 << AT24CXX_TWEN);
        return false;
    }
    
    /* Send address. */
    AT24CXX_DATA_REG = byte_address;
    1ddc:	80 93 bb 00 	sts	0x00BB, r24
    AT24CXX_CONTROL_REG |= (1 << AT24CXX_TWINT);
    1de0:	80 91 bc 00 	lds	r24, 0x00BC
    1de4:	80 68       	ori	r24, 0x80	; 128
    1de6:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
    1dea:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1dec:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
    1df0:	97 fd       	sbrc	r25, 7
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <at24cxx_write_byte+0x62>
    
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    1df4:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1df6:	d1 f7       	brne	.-12     	; 0x1dec <at24cxx_write_byte+0x56>
             (0 != time_out));
    
    /* Check that the address was acknowledged. */
    if (AT24CXX_MT_DATA_ACK != AT24CXX_GET_STATUS()) {
    1df8:	80 91 b9 00 	lds	r24, 0x00B9
    1dfc:	88 7f       	andi	r24, 0xF8	; 248
    1dfe:	88 32       	cpi	r24, 0x28	; 40
    1e00:	29 f0       	breq	.+10     	; 0x1e0c <at24cxx_write_byte+0x76>
        AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTO) | (1 << AT24CXX_TWEN);
    1e02:	84 e9       	ldi	r24, 0x94	; 148
    1e04:	80 93 bc 00 	sts	0x00BC, r24
        return false;
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	08 95       	ret
    }
    
    /* Send data. */
    AT24CXX_DATA_REG = byte_value;
    1e0c:	60 93 bb 00 	sts	0x00BB, r22
    AT24CXX_CONTROL_REG |= (1 << AT24CXX_TWINT);
    1e10:	80 91 bc 00 	lds	r24, 0x00BC
    1e14:	80 68       	ori	r24, 0x80	; 128
    1e16:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
    1e1a:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1e1c:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
    1e20:	97 fd       	sbrc	r25, 7
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <at24cxx_write_byte+0x92>
    
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    1e24:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1e26:	d1 f7       	brne	.-12     	; 0x1e1c <at24cxx_write_byte+0x86>
             (0 != time_out));
    
    /* Check that the address was acknowledged. */
    bool tx_status = false;
    if (AT24CXX_MT_DATA_ACK == AT24CXX_GET_STATUS()) {
    1e28:	90 91 b9 00 	lds	r25, 0x00B9
    1e2c:	98 7f       	andi	r25, 0xF8	; 248
    /* Disable the TWI module. */
    AT24CXX_PRR |= (1 << AT24CXX_PRR_BIT);
}


bool at24cxx_write_byte(uint8_t byte_address, uint8_t byte_value) {
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	98 32       	cpi	r25, 0x28	; 40
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <at24cxx_write_byte+0xa0>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    bool tx_status = false;
    if (AT24CXX_MT_DATA_ACK == AT24CXX_GET_STATUS()) {
        tx_status = true;
    }
    
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTO) | (1 << AT24CXX_TWEN);
    1e36:	94 e9       	ldi	r25, 0x94	; 148
    1e38:	90 93 bc 00 	sts	0x00BC, r25
    
    return tx_status;
}
    1e3c:	08 95       	ret

00001e3e <at24cxx_write_continuous>:


bool at24cxx_write_continuous(uint8_t start_address, uint16_t length, uint8_t const *wr_buffer) {
    return false;
}
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	08 95       	ret

00001e42 <at24cxx_read_byte>:


bool at24cxx_read_byte(uint8_t byte_address, uint8_t *read_byte) {
    /* Perform sanity check on function parameters. */
    if (NULL == read_byte) { return false; }
    1e42:	61 15       	cp	r22, r1
    1e44:	71 05       	cpc	r23, r1
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <at24cxx_read_byte+0x8>
    1e48:	88 c0       	rjmp	.+272    	; 0x1f5a <at24cxx_read_byte+0x118>
    
    /* Initialize local variable. */
    bool rx_status = false;
    
    /* Send start condition. */
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTA) | (1 << AT24CXX_TWEN);
    1e4a:	94 ea       	ldi	r25, 0xA4	; 164
    1e4c:	90 93 bc 00 	sts	0x00BC, r25
    uint8_t time_out = 0xFF;
    1e50:	9f ef       	ldi	r25, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    1e52:	91 50       	subi	r25, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1e54:	20 91 bc 00 	lds	r18, 0x00BC
             (0 != time_out));
    1e58:	27 fd       	sbrc	r18, 7
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <at24cxx_read_byte+0x1e>
    uint8_t time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1e5c:	99 23       	and	r25, r25
    1e5e:	c9 f7       	brne	.-14     	; 0x1e52 <at24cxx_read_byte+0x10>
             (0 != time_out));
    
    /* Check that the start condition was successfully transmitted. */
    if ((AT24CXX_START != AT24CXX_GET_STATUS()) || (0 == time_out)) {
    1e60:	20 91 b9 00 	lds	r18, 0x00B9
    1e64:	28 7f       	andi	r18, 0xF8	; 248
    1e66:	28 30       	cpi	r18, 0x08	; 8
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <at24cxx_read_byte+0x2a>
    1e6a:	6f c0       	rjmp	.+222    	; 0x1f4a <at24cxx_read_byte+0x108>
    1e6c:	99 23       	and	r25, r25
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <at24cxx_read_byte+0x30>
    1e70:	6c c0       	rjmp	.+216    	; 0x1f4a <at24cxx_read_byte+0x108>
        goto quit;
    }
    
    /* Send SLA + W. */
    AT24CXX_DATA_REG = AT24CXX_SLA | AT24CXX_W;
    1e72:	90 ea       	ldi	r25, 0xA0	; 160
    1e74:	90 93 bb 00 	sts	0x00BB, r25
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
    1e78:	94 e8       	ldi	r25, 0x84	; 132
    1e7a:	90 93 bc 00 	sts	0x00BC, r25
    
    time_out = 0xFF;
    1e7e:	9f ef       	ldi	r25, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    1e80:	91 50       	subi	r25, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1e82:	20 91 bc 00 	lds	r18, 0x00BC
             (0 != time_out));
    1e86:	27 fd       	sbrc	r18, 7
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <at24cxx_read_byte+0x4c>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1e8a:	99 23       	and	r25, r25
    1e8c:	c9 f7       	brne	.-14     	; 0x1e80 <at24cxx_read_byte+0x3e>
             (0 != time_out));
    
    /* Check that the SLA + W was ACK'ed. */
    if (AT24CXX_MT_SLA_ACK != AT24CXX_GET_STATUS() || (0 == time_out)) {
    1e8e:	20 91 b9 00 	lds	r18, 0x00B9
    1e92:	28 7f       	andi	r18, 0xF8	; 248
    1e94:	28 31       	cpi	r18, 0x18	; 24
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <at24cxx_read_byte+0x58>
    1e98:	58 c0       	rjmp	.+176    	; 0x1f4a <at24cxx_read_byte+0x108>
    1e9a:	99 23       	and	r25, r25
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <at24cxx_read_byte+0x5e>
    1e9e:	55 c0       	rjmp	.+170    	; 0x1f4a <at24cxx_read_byte+0x108>
        goto quit;
    }
    
    /* Send address. */
    AT24CXX_DATA_REG = byte_address;
    1ea0:	80 93 bb 00 	sts	0x00BB, r24
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
    1ea4:	84 e8       	ldi	r24, 0x84	; 132
    1ea6:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    1eac:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1eae:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
    1eb2:	97 fd       	sbrc	r25, 7
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <at24cxx_read_byte+0x78>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1eb6:	88 23       	and	r24, r24
    1eb8:	c9 f7       	brne	.-14     	; 0x1eac <at24cxx_read_byte+0x6a>
             (0 != time_out));
    
    /* Check that the address was ACK'ed. */
    if (AT24CXX_MT_DATA_ACK != AT24CXX_GET_STATUS() || (0 == time_out)) {
    1eba:	90 91 b9 00 	lds	r25, 0x00B9
    1ebe:	98 7f       	andi	r25, 0xF8	; 248
    1ec0:	98 32       	cpi	r25, 0x28	; 40
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <at24cxx_read_byte+0x84>
    1ec4:	42 c0       	rjmp	.+132    	; 0x1f4a <at24cxx_read_byte+0x108>
    1ec6:	88 23       	and	r24, r24
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <at24cxx_read_byte+0x8a>
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <at24cxx_read_byte+0x108>
    }
    
    /* Send Rep. start. Must change to receive mode to fetch data from the AT24CXX 
     * serial EEPROM.
     */
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTA) | (1 << AT24CXX_TWEN);
    1ecc:	84 ea       	ldi	r24, 0xA4	; 164
    1ece:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
    1ed2:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    1ed4:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1ed6:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
    1eda:	97 fd       	sbrc	r25, 7
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <at24cxx_read_byte+0xa0>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1ede:	88 23       	and	r24, r24
    1ee0:	c9 f7       	brne	.-14     	; 0x1ed4 <at24cxx_read_byte+0x92>
             (0 != time_out));
    
    if (AT24CXX_REPSTART != AT24CXX_GET_STATUS() || (0 == time_out)) {
    1ee2:	90 91 b9 00 	lds	r25, 0x00B9
    1ee6:	98 7f       	andi	r25, 0xF8	; 248
    1ee8:	90 31       	cpi	r25, 0x10	; 16
    1eea:	79 f5       	brne	.+94     	; 0x1f4a <at24cxx_read_byte+0x108>
    1eec:	88 23       	and	r24, r24
    1eee:	69 f1       	breq	.+90     	; 0x1f4a <at24cxx_read_byte+0x108>
        goto quit;
    }
    
    /* Send SLA + R. */
    AT24CXX_DATA_REG = AT24CXX_SLA | AT24CXX_R;
    1ef0:	81 ea       	ldi	r24, 0xA1	; 161
    1ef2:	80 93 bb 00 	sts	0x00BB, r24
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
    1ef6:	84 e8       	ldi	r24, 0x84	; 132
    1ef8:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
    1efc:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    1efe:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1f00:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
    1f04:	97 fd       	sbrc	r25, 7
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <at24cxx_read_byte+0xca>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1f08:	88 23       	and	r24, r24
    1f0a:	c9 f7       	brne	.-14     	; 0x1efe <at24cxx_read_byte+0xbc>
             (0 != time_out));
    
    /* Check that the SLA + R was transmitted. */
    if (AT24CXX_MR_SLA_ACK != AT24CXX_GET_STATUS() || (0 == time_out)) {
    1f0c:	90 91 b9 00 	lds	r25, 0x00B9
    1f10:	98 7f       	andi	r25, 0xF8	; 248
    1f12:	90 34       	cpi	r25, 0x40	; 64
    1f14:	d1 f4       	brne	.+52     	; 0x1f4a <at24cxx_read_byte+0x108>
    1f16:	88 23       	and	r24, r24
    1f18:	c1 f0       	breq	.+48     	; 0x1f4a <at24cxx_read_byte+0x108>
        goto quit;
    }
    
    /* Poll for data. */
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
    1f1a:	84 e8       	ldi	r24, 0x84	; 132
    1f1c:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
    1f20:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    1f22:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1f24:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
    1f28:	97 fd       	sbrc	r25, 7
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <at24cxx_read_byte+0xee>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1f2c:	88 23       	and	r24, r24
    1f2e:	c9 f7       	brne	.-14     	; 0x1f22 <at24cxx_read_byte+0xe0>
             (0 != time_out));
    
    /* Check that the NACK was received. If NACK was received it is time to
     * read data from the TWI data register.
     */
    if (AT24CXX_MR_DATA_NACK == AT24CXX_GET_STATUS() || (0 == time_out)) {
    1f30:	90 91 b9 00 	lds	r25, 0x00B9
    1f34:	98 7f       	andi	r25, 0xF8	; 248
    1f36:	98 35       	cpi	r25, 0x58	; 88
    1f38:	11 f0       	breq	.+4      	; 0x1f3e <at24cxx_read_byte+0xfc>
    1f3a:	88 23       	and	r24, r24
    1f3c:	31 f4       	brne	.+12     	; 0x1f4a <at24cxx_read_byte+0x108>
        *read_byte = AT24CXX_DATA_REG;
    1f3e:	80 91 bb 00 	lds	r24, 0x00BB
    1f42:	fb 01       	movw	r30, r22
    1f44:	80 83       	st	Z, r24
        rx_status = true;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <at24cxx_read_byte+0x10a>
bool at24cxx_read_byte(uint8_t byte_address, uint8_t *read_byte) {
    /* Perform sanity check on function parameters. */
    if (NULL == read_byte) { return false; }
    
    /* Initialize local variable. */
    bool rx_status = false;
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
        rx_status = true;
    }
    
    /* This label is used to terminate the TWI transaction with a stop condition. */
    quit:
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTO) | (1 << AT24CXX_TWEN);
    1f4c:	94 e9       	ldi	r25, 0x94	; 148
    1f4e:	90 93 bc 00 	sts	0x00BC, r25
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT);
    1f52:	90 e8       	ldi	r25, 0x80	; 128
    1f54:	90 93 bc 00 	sts	0x00BC, r25
    
    return rx_status;
    1f58:	08 95       	ret
}


bool at24cxx_read_byte(uint8_t byte_address, uint8_t *read_byte) {
    /* Perform sanity check on function parameters. */
    if (NULL == read_byte) { return false; }
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    quit:
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTO) | (1 << AT24CXX_TWEN);
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT);
    
    return rx_status;
}
    1f5c:	08 95       	ret

00001f5e <at24cxx_read_continuous>:


bool at24cxx_read_continuous(uint8_t start_address, uint16_t length, uint8_t *rd_buffer) {
    /* Perform sanity check on function parameters. */
    if (0 == length) { return false;}
    1f5e:	61 15       	cp	r22, r1
    1f60:	71 05       	cpc	r23, r1
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <at24cxx_read_continuous+0x8>
    1f64:	8b c0       	rjmp	.+278    	; 0x207c <at24cxx_read_continuous+0x11e>
    if (NULL == rd_buffer) { return false;}
    1f66:	41 15       	cp	r20, r1
    1f68:	51 05       	cpc	r21, r1
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <at24cxx_read_continuous+0x10>
    1f6c:	87 c0       	rjmp	.+270    	; 0x207c <at24cxx_read_continuous+0x11e>
    
    /* Initialize local variable. */
    bool rx_status = false;
    
    /* Send start condition. */
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTA) | (1 << AT24CXX_TWEN);
    1f6e:	94 ea       	ldi	r25, 0xA4	; 164
    1f70:	90 93 bc 00 	sts	0x00BC, r25
    uint8_t time_out = 0xFF;
    1f74:	9f ef       	ldi	r25, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    1f76:	91 50       	subi	r25, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1f78:	20 91 bc 00 	lds	r18, 0x00BC
             (0 != time_out));
    1f7c:	27 fd       	sbrc	r18, 7
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <at24cxx_read_continuous+0x26>
    uint8_t time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1f80:	99 23       	and	r25, r25
    1f82:	c9 f7       	brne	.-14     	; 0x1f76 <at24cxx_read_continuous+0x18>
             (0 != time_out));
    
    /* Check that the start condition was successfully transmitted. */
    if ((AT24CXX_START != AT24CXX_GET_STATUS()) || (0 == time_out)) {
    1f84:	20 91 b9 00 	lds	r18, 0x00B9
    1f88:	28 7f       	andi	r18, 0xF8	; 248
    1f8a:	28 30       	cpi	r18, 0x08	; 8
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <at24cxx_read_continuous+0x32>
    1f8e:	70 c0       	rjmp	.+224    	; 0x2070 <at24cxx_read_continuous+0x112>
    1f90:	99 23       	and	r25, r25
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <at24cxx_read_continuous+0x38>
    1f94:	6d c0       	rjmp	.+218    	; 0x2070 <at24cxx_read_continuous+0x112>
        goto quit;
    }
    
    /* Send SLA + W. */
    AT24CXX_DATA_REG = AT24CXX_SLA | AT24CXX_W;
    1f96:	90 ea       	ldi	r25, 0xA0	; 160
    1f98:	90 93 bb 00 	sts	0x00BB, r25
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
    1f9c:	94 e8       	ldi	r25, 0x84	; 132
    1f9e:	90 93 bc 00 	sts	0x00BC, r25
    
    time_out = 0xFF;
    1fa2:	9f ef       	ldi	r25, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    1fa4:	91 50       	subi	r25, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1fa6:	20 91 bc 00 	lds	r18, 0x00BC
             (0 != time_out));
    1faa:	27 fd       	sbrc	r18, 7
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <at24cxx_read_continuous+0x54>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1fae:	99 23       	and	r25, r25
    1fb0:	c9 f7       	brne	.-14     	; 0x1fa4 <at24cxx_read_continuous+0x46>
             (0 != time_out));
    
    /* Check that the SLA + W was ACK'ed. */
    if (AT24CXX_MT_SLA_ACK != AT24CXX_GET_STATUS() || (0 == time_out)) {
    1fb2:	20 91 b9 00 	lds	r18, 0x00B9
    1fb6:	28 7f       	andi	r18, 0xF8	; 248
    1fb8:	28 31       	cpi	r18, 0x18	; 24
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <at24cxx_read_continuous+0x60>
    1fbc:	59 c0       	rjmp	.+178    	; 0x2070 <at24cxx_read_continuous+0x112>
    1fbe:	99 23       	and	r25, r25
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <at24cxx_read_continuous+0x66>
    1fc2:	56 c0       	rjmp	.+172    	; 0x2070 <at24cxx_read_continuous+0x112>
        goto quit;
    }
    
    /* Send start address. */
    AT24CXX_DATA_REG = start_address;
    1fc4:	80 93 bb 00 	sts	0x00BB, r24
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
    1fc8:	84 e8       	ldi	r24, 0x84	; 132
    1fca:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    1fd0:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1fd2:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
    1fd6:	97 fd       	sbrc	r25, 7
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <at24cxx_read_continuous+0x80>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1fda:	88 23       	and	r24, r24
    1fdc:	c9 f7       	brne	.-14     	; 0x1fd0 <at24cxx_read_continuous+0x72>
             (0 != time_out));
    
    /* Check that the address was ACK'ed. */
    if (AT24CXX_MT_DATA_ACK != AT24CXX_GET_STATUS() || (0 == time_out)) {
    1fde:	90 91 b9 00 	lds	r25, 0x00B9
    1fe2:	98 7f       	andi	r25, 0xF8	; 248
    1fe4:	98 32       	cpi	r25, 0x28	; 40
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <at24cxx_read_continuous+0x8c>
    1fe8:	43 c0       	rjmp	.+134    	; 0x2070 <at24cxx_read_continuous+0x112>
    1fea:	88 23       	and	r24, r24
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <at24cxx_read_continuous+0x92>
    1fee:	40 c0       	rjmp	.+128    	; 0x2070 <at24cxx_read_continuous+0x112>
    }
    
    /* Send Rep. start. Must change to receive mode to fetch data from the AT24CXX 
     * serial EEPROM.
     */
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTA) | (1 << AT24CXX_TWEN);
    1ff0:	84 ea       	ldi	r24, 0xA4	; 164
    1ff2:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    1ff8:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    1ffa:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
    1ffe:	97 fd       	sbrc	r25, 7
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <at24cxx_read_continuous+0xa8>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    2002:	88 23       	and	r24, r24
    2004:	c9 f7       	brne	.-14     	; 0x1ff8 <at24cxx_read_continuous+0x9a>
             (0 != time_out));
    
    if (AT24CXX_REPSTART != AT24CXX_GET_STATUS() || (0 == time_out)) {
    2006:	90 91 b9 00 	lds	r25, 0x00B9
    200a:	98 7f       	andi	r25, 0xF8	; 248
    200c:	90 31       	cpi	r25, 0x10	; 16
    200e:	81 f5       	brne	.+96     	; 0x2070 <at24cxx_read_continuous+0x112>
    2010:	88 23       	and	r24, r24
    2012:	71 f1       	breq	.+92     	; 0x2070 <at24cxx_read_continuous+0x112>
        goto quit;
    }
    
    /* Send SLA + R. */
    AT24CXX_DATA_REG = AT24CXX_SLA | AT24CXX_R;
    2014:	81 ea       	ldi	r24, 0xA1	; 161
    2016:	80 93 bb 00 	sts	0x00BB, r24
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEN);
    201a:	84 e8       	ldi	r24, 0x84	; 132
    201c:	80 93 bc 00 	sts	0x00BC, r24
    
    time_out = 0xFF;
    2020:	8f ef       	ldi	r24, 0xFF	; 255
    
    /* Busy wait for status. */
    do {
        time_out--;
    2022:	81 50       	subi	r24, 0x01	; 1
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    2024:	90 91 bc 00 	lds	r25, 0x00BC
             (0 != time_out));
    2028:	97 fd       	sbrc	r25, 7
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <at24cxx_read_continuous+0xd2>
    time_out = 0xFF;
    
    /* Busy wait for status. */
    do {
        time_out--;
    } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    202c:	88 23       	and	r24, r24
    202e:	c9 f7       	brne	.-14     	; 0x2022 <at24cxx_read_continuous+0xc4>
             (0 != time_out));
    
    /* Check that the SLA + R was transmitted. */
    if (AT24CXX_MR_SLA_ACK != AT24CXX_GET_STATUS() || (0 == time_out)) {
    2030:	90 91 b9 00 	lds	r25, 0x00B9
    2034:	98 7f       	andi	r25, 0xF8	; 248
    2036:	90 34       	cpi	r25, 0x40	; 64
    2038:	d9 f4       	brne	.+54     	; 0x2070 <at24cxx_read_continuous+0x112>
    203a:	88 23       	and	r24, r24
    203c:	c9 f0       	breq	.+50     	; 0x2070 <at24cxx_read_continuous+0x112>
    203e:	fa 01       	movw	r30, r20
        goto quit;
    }
    
    do {
        /* Send ACK. */
        AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWEA) | (1 << AT24CXX_TWEN);
    2040:	24 ec       	ldi	r18, 0xC4	; 196
    2042:	20 93 bc 00 	sts	0x00BC, r18
        time_out = 0xFF;
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    
        /* Busy wait for status. */
        do {
            time_out--;
    2048:	81 50       	subi	r24, 0x01	; 1
        } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    204a:	90 91 bc 00 	lds	r25, 0x00BC
                 (0 != time_out));
    204e:	97 fd       	sbrc	r25, 7
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <at24cxx_read_continuous+0xf8>
        time_out = 0xFF;
    
        /* Busy wait for status. */
        do {
            time_out--;
        } while (((AT24CXX_CONTROL_REG & (1 << AT24CXX_TWINT)) != (1 << AT24CXX_TWINT)) &&
    2052:	88 23       	and	r24, r24
    2054:	c9 f7       	brne	.-14     	; 0x2048 <at24cxx_read_continuous+0xea>
                 (0 != time_out));
    
        /* Check that the NACK was received. If NACK was received it is time to
         * read data from the TWI data register.
         */
        if (AT24CXX_MR_DATA_ACK != AT24CXX_GET_STATUS() || (0 == time_out)) {
    2056:	90 91 b9 00 	lds	r25, 0x00B9
    205a:	98 7f       	andi	r25, 0xF8	; 248
    205c:	90 35       	cpi	r25, 0x50	; 80
    205e:	41 f4       	brne	.+16     	; 0x2070 <at24cxx_read_continuous+0x112>
    2060:	88 23       	and	r24, r24
    2062:	31 f0       	breq	.+12     	; 0x2070 <at24cxx_read_continuous+0x112>
            goto quit;
        } else {
            *rd_buffer = AT24CXX_DATA_REG;
    2064:	80 91 bb 00 	lds	r24, 0x00BB
    2068:	81 93       	st	Z+, r24
        }
        
        length--;
    206a:	61 50       	subi	r22, 0x01	; 1
    206c:	70 40       	sbci	r23, 0x00	; 0
        rd_buffer++;
    } while (0 != length);    
    206e:	49 f7       	brne	.-46     	; 0x2042 <at24cxx_read_continuous+0xe4>
    
    /* This label is used to terminate the TWI transaction with a stop condition. */
    quit:
    rd_buffer = NULL;
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT) | (1 << AT24CXX_TWSTO) | (1 << AT24CXX_TWEN);
    2070:	84 e9       	ldi	r24, 0x94	; 148
    2072:	80 93 bc 00 	sts	0x00BC, r24
    AT24CXX_CONTROL_REG = (1 << AT24CXX_TWINT);
    2076:	80 e8       	ldi	r24, 0x80	; 128
    2078:	80 93 bc 00 	sts	0x00BC, r24
    
    return rx_status;
}
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	08 95       	ret

00002080 <eep_init>:
/*================================= LOCAL VARIABLES  =========================*/
static eeprom_source_t eep_source = EEP_SOURCE_UNSUPPORTED;
/*================================= PROTOTYPES       =========================*/


bool eep_init(void) {
    2080:	1f 93       	push	r17
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	0f 92       	push	r0
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    /* Initialize the external TWI EEPROM, and see if it is possible to read-back
     * the magic.
     */    
    if(true != at24cxx_init()) {
    208c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <at24cxx_init>
    2090:	88 23       	and	r24, r24
    2092:	19 f4       	brne	.+6      	; 0x209a <eep_init+0x1a>
        at24cxx_deinit();
    2094:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <at24cxx_deinit>
    2098:	21 c0       	rjmp	.+66     	; 0x20dc <eep_init+0x5c>
        return false;    
    }
    
    /* Read internal and external EEPROM magic. */
    uint8_t int_magic = 0xFF;
    EEGET(int_magic, EE_MAGIC_ADR);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    20a2:	18 2f       	mov	r17, r24
    
    uint8_t ext_magic = 0xFF;
    20a4:	8f ef       	ldi	r24, 0xFF	; 255
    20a6:	89 83       	std	Y+1, r24	; 0x01
    (bool)at24cxx_read_byte(EE_MAGIC_ADR, &ext_magic);
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	be 01       	movw	r22, r28
    20ac:	6f 5f       	subi	r22, 0xFF	; 255
    20ae:	7f 4f       	sbci	r23, 0xFF	; 255
    20b0:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
    
    bool init_status = false;
    if (EE_MAGIC == ext_magic) {
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	8f 3f       	cpi	r24, 0xFF	; 255
    20b8:	29 f4       	brne	.+10     	; 0x20c4 <eep_init+0x44>
        eep_source = EEP_SOURCE_EXTERNAL;
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	80 93 57 0c 	sts	0x0C57, r24
        init_status = true;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	0d c0       	rjmp	.+26     	; 0x20de <eep_init+0x5e>
    } else if (EE_MAGIC == int_magic) {
    20c4:	1f 3f       	cpi	r17, 0xFF	; 255
    20c6:	31 f4       	brne	.+12     	; 0x20d4 <eep_init+0x54>
        /* Save power by turning the TWI module off. */
        at24cxx_deinit();
    20c8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <at24cxx_deinit>
        eep_source = EEP_SOURCE_INTERNAL;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	80 93 57 0c 	sts	0x0C57, r24
    20d2:	05 c0       	rjmp	.+10     	; 0x20de <eep_init+0x5e>
        init_status = true;
    } else {
        /* Save power by turning the TWI module off. */
        at24cxx_deinit();
    20d4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <at24cxx_deinit>
        /* No magic found. The init failed. */
        eep_source = EEP_SOURCE_UNSUPPORTED;
    20d8:	10 92 57 0c 	sts	0x0C57, r1
    EEGET(int_magic, EE_MAGIC_ADR);
    
    uint8_t ext_magic = 0xFF;
    (bool)at24cxx_read_byte(EE_MAGIC_ADR, &ext_magic);
    
    bool init_status = false;
    20dc:	80 e0       	ldi	r24, 0x00	; 0
        /* No magic found. The init failed. */
        eep_source = EEP_SOURCE_UNSUPPORTED;
    }
    
    return init_status;
}
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	1f 91       	pop	r17
    20e6:	08 95       	ret

000020e8 <eep_deinit>:


void eep_deinit(void) {
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    20e8:	80 91 57 0c 	lds	r24, 0x0C57
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	11 f4       	brne	.+4      	; 0x20f4 <eep_deinit+0xc>
        /* Save power by turning the TWI module off. */
        at24cxx_deinit(); 
    20f0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <at24cxx_deinit>
    }
    
    eep_source = EEP_SOURCE_UNSUPPORTED;
    20f4:	10 92 57 0c 	sts	0x0C57, r1
}
    20f8:	08 95       	ret

000020fa <eep_read_production_day>:


uint8_t eep_read_production_day(void) {
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	0f 92       	push	r0
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    uint8_t prod_day = 0xFF;
    2104:	8f ef       	ldi	r24, 0xFF	; 255
    2106:	89 83       	std	Y+1, r24	; 0x01
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    2108:	80 91 57 0c 	lds	r24, 0x0C57
    210c:	82 30       	cpi	r24, 0x02	; 2
    210e:	39 f4       	brne	.+14     	; 0x211e <__stack+0x1f>
        (bool)at24cxx_read_byte(EE_PRODDAY_ADR, &prod_day);
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	be 01       	movw	r22, r28
    2114:	6f 5f       	subi	r22, 0xFF	; 255
    2116:	7f 4f       	sbci	r23, 0xFF	; 255
    2118:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
    211c:	07 c0       	rjmp	.+14     	; 0x212c <__stack+0x2d>
    } else if (EEP_SOURCE_INTERNAL == eep_source) {
    211e:	81 30       	cpi	r24, 0x01	; 1
    2120:	29 f4       	brne	.+10     	; 0x212c <__stack+0x2d>
        EEGET(prod_day, EE_PRODDAY_ADR);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    212a:	89 83       	std	Y+1, r24	; 0x01
         * being valid.
         */
    }
    
    return prod_day;
}
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <eep_read_production_month>:


uint8_t eep_read_production_month(void) {
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	0f 92       	push	r0
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    uint8_t prod_month = 0xFF;
    2140:	8f ef       	ldi	r24, 0xFF	; 255
    2142:	89 83       	std	Y+1, r24	; 0x01
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    2144:	80 91 57 0c 	lds	r24, 0x0C57
    2148:	82 30       	cpi	r24, 0x02	; 2
    214a:	31 f4       	brne	.+12     	; 0x2158 <eep_read_production_month+0x22>
        (bool)at24cxx_read_byte(EE_PRODMONTH_ADR, &prod_month);
    214c:	be 01       	movw	r22, r28
    214e:	6f 5f       	subi	r22, 0xFF	; 255
    2150:	7f 4f       	sbci	r23, 0xFF	; 255
    2152:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
    2156:	07 c0       	rjmp	.+14     	; 0x2166 <eep_read_production_month+0x30>
    } else if (EEP_SOURCE_INTERNAL == eep_source) {
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	29 f4       	brne	.+10     	; 0x2166 <eep_read_production_month+0x30>
        EEGET(prod_month, EE_PRODMONTH_ADR);
    215c:	82 e0       	ldi	r24, 0x02	; 2
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    2164:	89 83       	std	Y+1, r24	; 0x01
         * being valid.
         */
    }
    
    return prod_month;
}
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	0f 90       	pop	r0
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <eep_read_production_year>:


uint8_t eep_read_production_year(void) {
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	0f 92       	push	r0
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    uint8_t prod_year = 0xFF;
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	89 83       	std	Y+1, r24	; 0x01
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    217e:	80 91 57 0c 	lds	r24, 0x0C57
    2182:	82 30       	cpi	r24, 0x02	; 2
    2184:	39 f4       	brne	.+14     	; 0x2194 <eep_read_production_year+0x24>
        (bool)at24cxx_read_byte(EE_PRODYEAR_ADR, &prod_year);
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	be 01       	movw	r22, r28
    218a:	6f 5f       	subi	r22, 0xFF	; 255
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
    2192:	07 c0       	rjmp	.+14     	; 0x21a2 <eep_read_production_year+0x32>
    } else if (EEP_SOURCE_INTERNAL == eep_source) {
    2194:	81 30       	cpi	r24, 0x01	; 1
    2196:	29 f4       	brne	.+10     	; 0x21a2 <eep_read_production_year+0x32>
        EEGET(prod_year, EE_PRODYEAR_ADR);
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    21a0:	89 83       	std	Y+1, r24	; 0x01
         * being valid.
         */
    }
    
    return prod_year;
}
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <eep_read_ieee_address>:


uint64_t eep_read_ieee_address(void) {
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	28 97       	sbiw	r28, 0x08	; 8
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    union {
        uint64_t nmbr;
        uint8_t array[sizeof(uint64_t)];
    } address_conv;
    
    address_conv.nmbr = 0;
    21c0:	19 82       	std	Y+1, r1	; 0x01
    21c2:	1a 82       	std	Y+2, r1	; 0x02
    21c4:	1b 82       	std	Y+3, r1	; 0x03
    21c6:	1c 82       	std	Y+4, r1	; 0x04
    21c8:	1d 82       	std	Y+5, r1	; 0x05
    21ca:	1e 82       	std	Y+6, r1	; 0x06
    21cc:	1f 82       	std	Y+7, r1	; 0x07
    21ce:	18 86       	std	Y+8, r1	; 0x08
    
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    21d0:	80 91 57 0c 	lds	r24, 0x0C57
    21d4:	82 30       	cpi	r24, 0x02	; 2
    21d6:	89 f5       	brne	.+98     	; 0x223a <eep_read_ieee_address+0x8e>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 0, &(address_conv.array[7]));
    21d8:	84 e0       	ldi	r24, 0x04	; 4
    21da:	be 01       	movw	r22, r28
    21dc:	68 5f       	subi	r22, 0xF8	; 248
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 1, &(address_conv.array[6]));
    21e4:	85 e0       	ldi	r24, 0x05	; 5
    21e6:	be 01       	movw	r22, r28
    21e8:	69 5f       	subi	r22, 0xF9	; 249
    21ea:	7f 4f       	sbci	r23, 0xFF	; 255
    21ec:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 2, &(address_conv.array[5]));
    21f0:	86 e0       	ldi	r24, 0x06	; 6
    21f2:	be 01       	movw	r22, r28
    21f4:	6a 5f       	subi	r22, 0xFA	; 250
    21f6:	7f 4f       	sbci	r23, 0xFF	; 255
    21f8:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 3, &(address_conv.array[4]));
    21fc:	87 e0       	ldi	r24, 0x07	; 7
    21fe:	be 01       	movw	r22, r28
    2200:	6b 5f       	subi	r22, 0xFB	; 251
    2202:	7f 4f       	sbci	r23, 0xFF	; 255
    2204:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 4, &(address_conv.array[3]));
    2208:	88 e0       	ldi	r24, 0x08	; 8
    220a:	be 01       	movw	r22, r28
    220c:	6c 5f       	subi	r22, 0xFC	; 252
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 5, &(address_conv.array[2]));
    2214:	89 e0       	ldi	r24, 0x09	; 9
    2216:	be 01       	movw	r22, r28
    2218:	6d 5f       	subi	r22, 0xFD	; 253
    221a:	7f 4f       	sbci	r23, 0xFF	; 255
    221c:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 6, &(address_conv.array[1]));
    2220:	8a e0       	ldi	r24, 0x0A	; 10
    2222:	be 01       	movw	r22, r28
    2224:	6e 5f       	subi	r22, 0xFE	; 254
    2226:	7f 4f       	sbci	r23, 0xFF	; 255
    2228:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_MAC_ADR + 7, &(address_conv.array[0]));
    222c:	8b e0       	ldi	r24, 0x0B	; 11
    222e:	be 01       	movw	r22, r28
    2230:	6f 5f       	subi	r22, 0xFF	; 255
    2232:	7f 4f       	sbci	r23, 0xFF	; 255
    2234:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
    2238:	2a c0       	rjmp	.+84     	; 0x228e <eep_read_ieee_address+0xe2>
    } else if (EEP_SOURCE_INTERNAL == eep_source) {
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	41 f5       	brne	.+80     	; 0x228e <eep_read_ieee_address+0xe2>
        EEGET((address_conv.array[7]), EE_MAC_ADR + 0);
    223e:	84 e0       	ldi	r24, 0x04	; 4
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    2246:	88 87       	std	Y+8, r24	; 0x08
        EEGET((address_conv.array[6]), EE_MAC_ADR + 1);
    2248:	85 e0       	ldi	r24, 0x05	; 5
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    2250:	8f 83       	std	Y+7, r24	; 0x07
        EEGET((address_conv.array[5]), EE_MAC_ADR + 2);
    2252:	86 e0       	ldi	r24, 0x06	; 6
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    225a:	8e 83       	std	Y+6, r24	; 0x06
        EEGET((address_conv.array[4]), EE_MAC_ADR + 3);
    225c:	87 e0       	ldi	r24, 0x07	; 7
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    2264:	8d 83       	std	Y+5, r24	; 0x05
        EEGET((address_conv.array[3]), EE_MAC_ADR + 4);
    2266:	88 e0       	ldi	r24, 0x08	; 8
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    226e:	8c 83       	std	Y+4, r24	; 0x04
        EEGET((address_conv.array[2]), EE_MAC_ADR + 5);
    2270:	89 e0       	ldi	r24, 0x09	; 9
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    2278:	8b 83       	std	Y+3, r24	; 0x03
        EEGET((address_conv.array[1]), EE_MAC_ADR + 6);
    227a:	8a e0       	ldi	r24, 0x0A	; 10
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    2282:	8a 83       	std	Y+2, r24	; 0x02
        EEGET((address_conv.array[0]), EE_MAC_ADR + 7);
    2284:	8b e0       	ldi	r24, 0x0B	; 11
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	29 81       	ldd	r18, Y+1	; 0x01
    2290:	3a 81       	ldd	r19, Y+2	; 0x02
    2292:	4b 81       	ldd	r20, Y+3	; 0x03
    2294:	5c 81       	ldd	r21, Y+4	; 0x04
    2296:	6d 81       	ldd	r22, Y+5	; 0x05
    2298:	7e 81       	ldd	r23, Y+6	; 0x06
         * being valid.
         */
    }
    
    return address_conv.nmbr;
}
    229a:	8f 81       	ldd	r24, Y+7	; 0x07
    229c:	98 85       	ldd	r25, Y+8	; 0x08
    229e:	28 96       	adiw	r28, 0x08	; 8
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <eep_read_cap_array>:


uint8_t eep_read_cap_array(void) {
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	0f 92       	push	r0
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    uint8_t cap_array_setting = 0xFF;
    22ba:	8f ef       	ldi	r24, 0xFF	; 255
    22bc:	89 83       	std	Y+1, r24	; 0x01
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    22be:	80 91 57 0c 	lds	r24, 0x0C57
    22c2:	82 30       	cpi	r24, 0x02	; 2
    22c4:	39 f4       	brne	.+14     	; 0x22d4 <eep_read_cap_array+0x24>
        (bool)at24cxx_read_byte(EE_CAPARRAY_ADR, &cap_array_setting);
    22c6:	8c e0       	ldi	r24, 0x0C	; 12
    22c8:	be 01       	movw	r22, r28
    22ca:	6f 5f       	subi	r22, 0xFF	; 255
    22cc:	7f 4f       	sbci	r23, 0xFF	; 255
    22ce:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
    22d2:	07 c0       	rjmp	.+14     	; 0x22e2 <eep_read_cap_array+0x32>
    } else if (EEP_SOURCE_INTERNAL == eep_source) {
    22d4:	81 30       	cpi	r24, 0x01	; 1
    22d6:	29 f4       	brne	.+10     	; 0x22e2 <eep_read_cap_array+0x32>
        EEGET(cap_array_setting, EE_CAPARRAY_ADR);
    22d8:	8c e0       	ldi	r24, 0x0C	; 12
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    22e0:	89 83       	std	Y+1, r24	; 0x01
         * being valid.
         */
    }
    
    return cap_array_setting;
}
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	0f 90       	pop	r0
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <eep_read_1v1>:


uint16_t eep_read_1v1(void) {
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <eep_read_1v1+0x6>
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    union {
        uint16_t nmbr;
        uint8_t array[sizeof(uint16_t)];
    } v_conv;
    
    v_conv.nmbr = 0;
    22f6:	1a 82       	std	Y+2, r1	; 0x02
    22f8:	19 82       	std	Y+1, r1	; 0x01
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    22fa:	80 91 57 0c 	lds	r24, 0x0C57
    22fe:	82 30       	cpi	r24, 0x02	; 2
    2300:	69 f4       	brne	.+26     	; 0x231c <eep_read_1v1+0x30>
        (bool)at24cxx_read_byte(EE_1V1_CAL_VALUE_ADR + 1, &(v_conv.array[0]));
    2302:	8d e0       	ldi	r24, 0x0D	; 13
    2304:	be 01       	movw	r22, r28
    2306:	6f 5f       	subi	r22, 0xFF	; 255
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
        (bool)at24cxx_read_byte(EE_1V1_CAL_VALUE_ADR + 0, &(v_conv.array[1]));
    230e:	8c e0       	ldi	r24, 0x0C	; 12
    2310:	be 01       	movw	r22, r28
    2312:	6e 5f       	subi	r22, 0xFE	; 254
    2314:	7f 4f       	sbci	r23, 0xFF	; 255
    2316:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
    231a:	0c c0       	rjmp	.+24     	; 0x2334 <eep_read_1v1+0x48>
    } else if (EEP_SOURCE_INTERNAL == eep_source) {
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	51 f4       	brne	.+20     	; 0x2334 <eep_read_1v1+0x48>
        EEGET((v_conv.array[0]), EE_1V1_CAL_VALUE_ADR + 1);
    2320:	8d e0       	ldi	r24, 0x0D	; 13
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    2328:	89 83       	std	Y+1, r24	; 0x01
        EEGET((v_conv.array[1]), EE_1V1_CAL_VALUE_ADR + 0);
    232a:	8c e0       	ldi	r24, 0x0C	; 12
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    2332:	8a 83       	std	Y+2, r24	; 0x02
         * being valid.
         */
    }
    
    return v_conv.nmbr;
}
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <eep_read_hw_revision>:


uint8_t eep_read_hw_revision(void) {
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	0f 92       	push	r0
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    uint8_t hw_rev = 0xFF;
    234c:	8f ef       	ldi	r24, 0xFF	; 255
    234e:	89 83       	std	Y+1, r24	; 0x01
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    2350:	80 91 57 0c 	lds	r24, 0x0C57
    2354:	82 30       	cpi	r24, 0x02	; 2
    2356:	39 f4       	brne	.+14     	; 0x2366 <eep_read_hw_revision+0x24>
        (bool)at24cxx_read_byte(EE_HWREV_ADR, &hw_rev);
    2358:	8e e0       	ldi	r24, 0x0E	; 14
    235a:	be 01       	movw	r22, r28
    235c:	6f 5f       	subi	r22, 0xFF	; 255
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <at24cxx_read_byte>
    2364:	07 c0       	rjmp	.+14     	; 0x2374 <eep_read_hw_revision+0x32>
    } else if (EEP_SOURCE_INTERNAL == eep_source) {
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	29 f4       	brne	.+10     	; 0x2374 <eep_read_hw_revision+0x32>
        EEGET(hw_rev, EE_HWREV_ADR);
    236a:	8e e0       	ldi	r24, 0x0E	; 14
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    2372:	89 83       	std	Y+1, r24	; 0x01
         * being valid.
         */
    }
    
    return hw_rev;
}
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	0f 90       	pop	r0
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	08 95       	ret

0000237e <eep_read>:


bool eep_read(eep_address_t eeprom_address, uint8_t *data_buffer_ptr, eep_length_t length) {
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	8c 01       	movw	r16, r24
    238c:	eb 01       	movw	r28, r22
    238e:	7a 01       	movw	r14, r20
    /* Perform sanity checks. */
    if (EEP_SOURCE_UNSUPPORTED == eep_source) { return false; }
    2390:	80 91 57 0c 	lds	r24, 0x0C57
    2394:	88 23       	and	r24, r24
    2396:	d9 f0       	breq	.+54     	; 0x23ce <eep_read+0x50>
    if (NULL == data_buffer_ptr) { return false; }
    2398:	20 97       	sbiw	r28, 0x00	; 0
    239a:	c9 f0       	breq	.+50     	; 0x23ce <eep_read+0x50>
    if (0 == length) { return false; }
    239c:	41 15       	cp	r20, r1
    239e:	51 05       	cpc	r21, r1
    23a0:	b1 f0       	breq	.+44     	; 0x23ce <eep_read+0x50>
    
    if (EEP_SOURCE_EXTERNAL == eep_source) {
    23a2:	82 30       	cpi	r24, 0x02	; 2
    23a4:	31 f4       	brne	.+12     	; 0x23b2 <eep_read+0x34>
        return at24cxx_read_continuous(eeprom_address, length, data_buffer_ptr);
    23a6:	80 2f       	mov	r24, r16
    23a8:	ba 01       	movw	r22, r20
    23aa:	ae 01       	movw	r20, r28
    23ac:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <at24cxx_read_continuous>
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <eep_read+0x52>
    } else {
        do {
            EEGET(*data_buffer_ptr, eeprom_address);
    23b2:	c8 01       	movw	r24, r16
    23b4:	0e 94 cb 33 	call	0x6796	; 0x6796 <__eerd_byte_usb1287>
    23b8:	89 93       	st	Y+, r24
            data_buffer_ptr++;
            eeprom_address++;
    23ba:	0f 5f       	subi	r16, 0xFF	; 255
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
            length--;
    23be:	08 94       	sec
    23c0:	e1 08       	sbc	r14, r1
    23c2:	f1 08       	sbc	r15, r1
        } while (0 != length);
    23c4:	e1 14       	cp	r14, r1
    23c6:	f1 04       	cpc	r15, r1
    23c8:	a1 f7       	brne	.-24     	; 0x23b2 <eep_read+0x34>
        
        return true;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	01 c0       	rjmp	.+2      	; 0x23d0 <eep_read+0x52>

bool eep_read(eep_address_t eeprom_address, uint8_t *data_buffer_ptr, eep_length_t length) {
    /* Perform sanity checks. */
    if (EEP_SOURCE_UNSUPPORTED == eep_source) { return false; }
    if (NULL == data_buffer_ptr) { return false; }
    if (0 == length) { return false; }
    23ce:	80 e0       	ldi	r24, 0x00	; 0
            length--;
        } while (0 != length);
        
        return true;
    }
}
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	08 95       	ret

000023de <eep_write>:


bool eep_write(eep_address_t eeprom_address, const uint8_t *data_buffer_ptr, eep_length_t length) {
    23de:	cf 92       	push	r12
    23e0:	df 92       	push	r13
    23e2:	ef 92       	push	r14
    23e4:	ff 92       	push	r15
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	6c 01       	movw	r12, r24
    23f0:	7b 01       	movw	r14, r22
    23f2:	8a 01       	movw	r16, r20
    /* Perform sanity checks. */
    if (EEP_SOURCE_UNSUPPORTED == eep_source) { return false; }
    23f4:	80 91 57 0c 	lds	r24, 0x0C57
    23f8:	88 23       	and	r24, r24
    23fa:	f1 f0       	breq	.+60     	; 0x2438 <eep_write+0x5a>
    if (NULL == data_buffer_ptr) { return false; }
    23fc:	61 15       	cp	r22, r1
    23fe:	71 05       	cpc	r23, r1
    2400:	d9 f0       	breq	.+54     	; 0x2438 <eep_write+0x5a>
    if (0 == length) { return false; }
    2402:	41 15       	cp	r20, r1
    2404:	51 05       	cpc	r21, r1
    2406:	c1 f0       	breq	.+48     	; 0x2438 <eep_write+0x5a>

    if (EEP_SOURCE_EXTERNAL == eep_source) {
    2408:	82 30       	cpi	r24, 0x02	; 2
    240a:	31 f4       	brne	.+12     	; 0x2418 <eep_write+0x3a>
        return at24cxx_write_continuous(eeprom_address, length, data_buffer_ptr);
    240c:	8c 2d       	mov	r24, r12
    240e:	ba 01       	movw	r22, r20
    2410:	a7 01       	movw	r20, r14
    2412:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <at24cxx_write_continuous>
    2416:	11 c0       	rjmp	.+34     	; 0x243a <eep_write+0x5c>
    /* Perform sanity checks. */
    if (EEP_SOURCE_UNSUPPORTED == eep_source) { return false; }
    if (NULL == data_buffer_ptr) { return false; }
    if (0 == length) { return false; }

    if (EEP_SOURCE_EXTERNAL == eep_source) {
    2418:	c0 e0       	ldi	r28, 0x00	; 0
    241a:	d0 e0       	ldi	r29, 0x00	; 0
        return at24cxx_write_continuous(eeprom_address, length, data_buffer_ptr);
    } else {
        do {
            EEPUT(eeprom_address, *data_buffer_ptr);
    241c:	ce 01       	movw	r24, r28
    241e:	8c 0d       	add	r24, r12
    2420:	9d 1d       	adc	r25, r13
    2422:	f7 01       	movw	r30, r14
    2424:	61 91       	ld	r22, Z+
    2426:	7f 01       	movw	r14, r30
    2428:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <__eewr_byte_usb1287>
            data_buffer_ptr++;
    242c:	21 96       	adiw	r28, 0x01	; 1
            eeprom_address++;
            length--;
        } while (0 != length);
    242e:	0c 17       	cp	r16, r28
    2430:	1d 07       	cpc	r17, r29
    2432:	a1 f7       	brne	.-24     	; 0x241c <eep_write+0x3e>
    
        return true;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	01 c0       	rjmp	.+2      	; 0x243a <eep_write+0x5c>

bool eep_write(eep_address_t eeprom_address, const uint8_t *data_buffer_ptr, eep_length_t length) {
    /* Perform sanity checks. */
    if (EEP_SOURCE_UNSUPPORTED == eep_source) { return false; }
    if (NULL == data_buffer_ptr) { return false; }
    if (0 == length) { return false; }
    2438:	80 e0       	ldi	r24, 0x00	; 0
            length--;
        } while (0 != length);
    
        return true;
    }
}
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	ff 90       	pop	r15
    2444:	ef 90       	pop	r14
    2446:	df 90       	pop	r13
    2448:	cf 90       	pop	r12
    244a:	08 95       	ret

0000244c <rf230_init>:
/*================================= PROTOTYPES       =========================*/


bool rf230_init(void) {
    /* Initialize local varaibles. */
    rf230_callback_handler = NULL;
    244c:	10 92 59 0c 	sts	0x0C59, r1
    2450:	10 92 58 0c 	sts	0x0C58, r1
    
    /* Enable IO pins used to control the radio transceiver. */
    DDR_SLP_TR |= (1 << SLP_TR);
    2454:	24 9a       	sbi	0x04, 4	; 4
    DDR_RST    |= (1 << RST);
    2456:	25 9a       	sbi	0x04, 5	; 4
    DDR_RST    |= (1 << TST);
    2458:	26 9a       	sbi	0x04, 6	; 4
    
    /* Enable the SPI module. */
    RF230_ENABLE_SPI_MODULE();
    245a:	e4 e6       	ldi	r30, 0x64	; 100
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8b 7f       	andi	r24, 0xFB	; 251
    2462:	80 83       	st	Z, r24
    
    /* Configure the SPI module. */
    RF230_DDR_SPI       |= (1 << RF230_DD_SS) | (1 << RF230_DD_SCK) | (1 << RF230_DD_MOSI);
    2464:	84 b1       	in	r24, 0x04	; 4
    2466:	87 60       	ori	r24, 0x07	; 7
    2468:	84 b9       	out	0x04, r24	; 4
    RF230_PORT_SPI      |= (1 << RF230_DD_SS) | (1 << RF230_DD_SCK); //Set SS and CLK high
    246a:	85 b1       	in	r24, 0x05	; 5
    246c:	83 60       	ori	r24, 0x03	; 3
    246e:	85 b9       	out	0x05, r24	; 5
    RF230_SPI_CTRL_REG   = (1 << RF230_SPI_SPE) | (1 << RF230_SPI_MSTR); //Enable SPI module and master operation.
    2470:	80 e5       	ldi	r24, 0x50	; 80
    2472:	8c bd       	out	0x2c, r24	; 44
    RF230_SPI_STATUS_REG = (1 << RF230_SPI_2X); //Enable doubled SPI speed in master mode.
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	8d bd       	out	0x2d, r24	; 45
    
    return true;
}
    2478:	08 95       	ret

0000247a <rf230_deinit>:


void rf230_deinit(void) {
    /* Disable the SPI module. */
    RF230_DISABLE_SPI_MODULE();
    247a:	e4 e6       	ldi	r30, 0x64	; 100
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	84 60       	ori	r24, 0x04	; 4
    2482:	80 83       	st	Z, r24
}
    2484:	08 95       	ret

00002486 <rf230_register_read>:


uint8_t rf230_register_read(uint8_t address) {
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	0f 92       	push	r0
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
   /*Add the register read command to the register address. */
    address |= RF230_TRX_CMD_RR;
    2490:	80 68       	ori	r24, 0x80	; 128
    
    ENTER_CRITICAL_REGION();
    2492:	9f b7       	in	r25, 0x3f	; 63
    2494:	99 83       	std	Y+1, r25	; 0x01
    2496:	f8 94       	cli
    
    RF230_SS_LOW();
    2498:	28 98       	cbi	0x05, 0	; 5
    
    /*Send Register address and read register content.*/
    RF230_SPI_DATA_REG = address;
    249a:	8e bd       	out	0x2e, r24	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    249c:	0d b4       	in	r0, 0x2d	; 45
    249e:	07 fe       	sbrs	r0, 7
    24a0:	fd cf       	rjmp	.-6      	; 0x249c <rf230_register_read+0x16>
    address = RF230_SPI_DATA_REG;
    24a2:	8e b5       	in	r24, 0x2e	; 46
    
    uint8_t register_value = 0;
    
    RF230_SPI_DATA_REG = register_value;
    24a4:	1e bc       	out	0x2e, r1	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    24a6:	0d b4       	in	r0, 0x2d	; 45
    24a8:	07 fe       	sbrs	r0, 7
    24aa:	fd cf       	rjmp	.-6      	; 0x24a6 <rf230_register_read+0x20>
    register_value = RF230_SPI_DATA_REG;
    24ac:	8e b5       	in	r24, 0x2e	; 46

    RF230_SS_HIGH();  
    24ae:	28 9a       	sbi	0x05, 0	; 5
    
    LEAVE_CRITICAL_REGION();
    24b0:	99 81       	ldd	r25, Y+1	; 0x01
    24b2:	9f bf       	out	0x3f, r25	; 63
    
    return register_value;
}
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <rf230_register_write>:


void rf230_register_write(uint8_t address, uint8_t value) {
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	0f 92       	push	r0
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    /* Add the Register Write command to the address. */
    address |= RF230_TRX_CMD_RW;
    24c6:	80 6c       	ori	r24, 0xC0	; 192
    
    ENTER_CRITICAL_REGION();    
    24c8:	9f b7       	in	r25, 0x3f	; 63
    24ca:	99 83       	std	Y+1, r25	; 0x01
    24cc:	f8 94       	cli
    
    RF230_SS_LOW();
    24ce:	28 98       	cbi	0x05, 0	; 5
    
    /*Send Register address and write register content.*/
    RF230_SPI_DATA_REG = address;
    24d0:	8e bd       	out	0x2e, r24	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    24d2:	0d b4       	in	r0, 0x2d	; 45
    24d4:	07 fe       	sbrs	r0, 7
    24d6:	fd cf       	rjmp	.-6      	; 0x24d2 <rf230_register_write+0x16>
    address = RF230_SPI_DATA_REG;
    24d8:	8e b5       	in	r24, 0x2e	; 46
    
    RF230_SPI_DATA_REG = value;
    24da:	6e bd       	out	0x2e, r22	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    24dc:	0d b4       	in	r0, 0x2d	; 45
    24de:	07 fe       	sbrs	r0, 7
    24e0:	fd cf       	rjmp	.-6      	; 0x24dc <rf230_register_write+0x20>
    value = RF230_SPI_DATA_REG;
    24e2:	8e b5       	in	r24, 0x2e	; 46
    
    RF230_SS_HIGH();
    24e4:	28 9a       	sbi	0x05, 0	; 5
    
    LEAVE_CRITICAL_REGION();
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	8f bf       	out	0x3f, r24	; 63
}
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <rf230_subregister_read>:


uint8_t rf230_subregister_read(uint8_t address, uint8_t mask, uint8_t position) {
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <rf230_subregister_read+0x6>
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    /* Read current register value and mask out subregister. */
    uint8_t register_value = rf230_register_read(address);
    24fc:	4a 83       	std	Y+2, r20	; 0x02
    24fe:	69 83       	std	Y+1, r22	; 0x01
    2500:	0e 94 43 12 	call	0x2486	; 0x2486 <rf230_register_read>
    register_value &= mask;
    2504:	69 81       	ldd	r22, Y+1	; 0x01
    2506:	86 23       	and	r24, r22
    register_value >>= position;
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	4a 81       	ldd	r20, Y+2	; 0x02
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <rf230_subregister_read+0x20>
    250e:	95 95       	asr	r25
    2510:	87 95       	ror	r24
    2512:	4a 95       	dec	r20
    2514:	e2 f7       	brpl	.-8      	; 0x250e <rf230_subregister_read+0x1c>
    
    return register_value;
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <rf230_subregister_write>:


void rf230_subregister_write(uint8_t address, uint8_t mask, uint8_t position, uint8_t value) {
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <rf230_subregister_write+0xa>
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	18 2f       	mov	r17, r24
    2530:	06 2f       	mov	r16, r22
    /* Read current register value and mask area outside the subregister. */
    uint8_t register_value = rf230_register_read(address);
    2532:	2a 83       	std	Y+2, r18	; 0x02
    2534:	49 83       	std	Y+1, r20	; 0x01
    2536:	0e 94 43 12 	call	0x2486	; 0x2486 <rf230_register_read>
    register_value &= ~mask;
    253a:	60 2f       	mov	r22, r16
    253c:	60 95       	com	r22
    253e:	68 23       	and	r22, r24
    
    /* Start preparing the new subregister value. shift in place and mask. */
    value <<= position;
    2540:	2a 81       	ldd	r18, Y+2	; 0x02
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	49 81       	ldd	r20, Y+1	; 0x01
    2546:	02 c0       	rjmp	.+4      	; 0x254c <rf230_subregister_write+0x2c>
    2548:	22 0f       	add	r18, r18
    254a:	33 1f       	adc	r19, r19
    254c:	4a 95       	dec	r20
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <rf230_subregister_write+0x28>
    value &= mask;
    2550:	20 23       	and	r18, r16
    
    value |= register_value;
    2552:	62 2b       	or	r22, r18

    /* Write the modified register value. */
    rf230_register_write(address, value);
    2554:	81 2f       	mov	r24, r17
    2556:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
}
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	08 95       	ret

00002568 <rf230_frame_write>:


void rf230_frame_write(uint8_t length, const uint8_t *wr_buffer) {
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	0f 92       	push	r0
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	fb 01       	movw	r30, r22
    ENTER_CRITICAL_REGION();
    2574:	9f b7       	in	r25, 0x3f	; 63
    2576:	99 83       	std	Y+1, r25	; 0x01
    2578:	f8 94       	cli
 
    RF230_SS_LOW();
    257a:	28 98       	cbi	0x05, 0	; 5
    
    /*SEND FRAME WRITE COMMAND AND FRAME LENGTH.*/
    RF230_SPI_DATA_REG = RF230_TRX_CMD_FW;
    257c:	90 e6       	ldi	r25, 0x60	; 96
    257e:	9e bd       	out	0x2e, r25	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    2580:	0d b4       	in	r0, 0x2d	; 45
    2582:	07 fe       	sbrs	r0, 7
    2584:	fd cf       	rjmp	.-6      	; 0x2580 <rf230_frame_write+0x18>
    uint8_t dummy_read = RF230_SPI_DATA_REG;
    2586:	9e b5       	in	r25, 0x2e	; 46
        
    RF230_SPI_DATA_REG = length;
    2588:	8e bd       	out	0x2e, r24	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    258a:	0d b4       	in	r0, 0x2d	; 45
    258c:	07 fe       	sbrs	r0, 7
    258e:	fd cf       	rjmp	.-6      	; 0x258a <rf230_frame_write+0x22>
    dummy_read = RF230_SPI_DATA_REG;
    2590:	9e b5       	in	r25, 0x2e	; 46
    
    /*Download to the Frame Buffer. */
    do {
        
        RF230_SPI_DATA_REG = *wr_buffer++;
    2592:	91 91       	ld	r25, Z+
    2594:	9e bd       	out	0x2e, r25	; 46
        --length;
    2596:	81 50       	subi	r24, 0x01	; 1
        
        RF230_WAIT_FOR_SPI_TX_COMPLETE();
    2598:	0d b4       	in	r0, 0x2d	; 45
    259a:	07 fe       	sbrs	r0, 7
    259c:	fd cf       	rjmp	.-6      	; 0x2598 <rf230_frame_write+0x30>
        
        dummy_read = RF230_SPI_DATA_REG;
    259e:	9e b5       	in	r25, 0x2e	; 46
    } while (length != 0);
    25a0:	88 23       	and	r24, r24
    25a2:	b9 f7       	brne	.-18     	; 0x2592 <rf230_frame_write+0x2a>
    
    RF230_SS_HIGH();
    25a4:	28 9a       	sbi	0x05, 0	; 5
    
    LEAVE_CRITICAL_REGION();
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	8f bf       	out	0x3f, r24	; 63
}
    25aa:	0f 90       	pop	r0
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <rf230_frame_write_P>:


void rf230_frame_write_P(uint8_t length, PROGMEM_BYTE_ARRAY_T wr_buffer) {
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	0f 92       	push	r0
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    25bc:	9f b7       	in	r25, 0x3f	; 63
    25be:	99 83       	std	Y+1, r25	; 0x01
    25c0:	f8 94       	cli
 
    RF230_SS_LOW();
    25c2:	28 98       	cbi	0x05, 0	; 5
    
    /*SEND FRAME WRITE COMMAND AND FRAME LENGTH.*/
    RF230_SPI_DATA_REG = RF230_TRX_CMD_FW;
    25c4:	90 e6       	ldi	r25, 0x60	; 96
    25c6:	9e bd       	out	0x2e, r25	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    25c8:	0d b4       	in	r0, 0x2d	; 45
    25ca:	07 fe       	sbrs	r0, 7
    25cc:	fd cf       	rjmp	.-6      	; 0x25c8 <rf230_frame_write_P+0x16>
    uint8_t dummy_read = RF230_SPI_DATA_REG;
    25ce:	9e b5       	in	r25, 0x2e	; 46
        
    RF230_SPI_DATA_REG = length;
    25d0:	8e bd       	out	0x2e, r24	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    25d2:	0d b4       	in	r0, 0x2d	; 45
    25d4:	07 fe       	sbrs	r0, 7
    25d6:	fd cf       	rjmp	.-6      	; 0x25d2 <rf230_frame_write_P+0x20>
    dummy_read = RF230_SPI_DATA_REG;
    25d8:	9e b5       	in	r25, 0x2e	; 46
    
    /*Download to the Frame Buffer. */
    do {
        
        RF230_SPI_DATA_REG = PROGMEM_READ_BYTE(wr_buffer);
    25da:	fb 01       	movw	r30, r22
    25dc:	94 91       	lpm	r25, Z+
    25de:	9e bd       	out	0x2e, r25	; 46
        wr_buffer++;
    25e0:	6f 5f       	subi	r22, 0xFF	; 255
    25e2:	7f 4f       	sbci	r23, 0xFF	; 255
        --length;
    25e4:	81 50       	subi	r24, 0x01	; 1
        
        RF230_WAIT_FOR_SPI_TX_COMPLETE();
    25e6:	0d b4       	in	r0, 0x2d	; 45
    25e8:	07 fe       	sbrs	r0, 7
    25ea:	fd cf       	rjmp	.-6      	; 0x25e6 <rf230_frame_write_P+0x34>
        
        dummy_read = RF230_SPI_DATA_REG;
    25ec:	9e b5       	in	r25, 0x2e	; 46
    } while (length != 0);
    25ee:	88 23       	and	r24, r24
    25f0:	a1 f7       	brne	.-24     	; 0x25da <rf230_frame_write_P+0x28>
    
    RF230_SS_HIGH();
    25f2:	28 9a       	sbi	0x05, 0	; 5
    
    LEAVE_CRITICAL_REGION();
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	8f bf       	out	0x3f, r24	; 63
}
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <rf230_frame_read>:


void rf230_frame_read(uint8_t length, uint8_t *rd_buffer) {
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	0f 92       	push	r0
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	fb 01       	movw	r30, r22
    ENTER_CRITICAL_REGION();
    260c:	9f b7       	in	r25, 0x3f	; 63
    260e:	99 83       	std	Y+1, r25	; 0x01
    2610:	f8 94       	cli
    
    RF230_SS_LOW();
    2612:	28 98       	cbi	0x05, 0	; 5
    
    /* Send frame read command. */
    RF230_SPI_DATA_REG = RF230_TRX_CMD_FR;
    2614:	90 e2       	ldi	r25, 0x20	; 32
    2616:	9e bd       	out	0x2e, r25	; 46
    RF230_WAIT_FOR_SPI_TX_COMPLETE();
    2618:	0d b4       	in	r0, 0x2d	; 45
    261a:	07 fe       	sbrs	r0, 7
    261c:	fd cf       	rjmp	.-6      	; 0x2618 <rf230_frame_read+0x18>
    *rd_buffer = RF230_SPI_DATA_REG;
    261e:	9e b5       	in	r25, 0x2e	; 46
    2620:	90 83       	st	Z, r25
        
    /* Download to the Frame Buffer. */
    do {
        
        RF230_SPI_DATA_REG = 0x00;
    2622:	1e bc       	out	0x2e, r1	; 46
        RF230_WAIT_FOR_SPI_TX_COMPLETE();
    2624:	0d b4       	in	r0, 0x2d	; 45
    2626:	07 fe       	sbrs	r0, 7
    2628:	fd cf       	rjmp	.-6      	; 0x2624 <rf230_frame_read+0x24>
        *rd_buffer = RF230_SPI_DATA_REG;
    262a:	9e b5       	in	r25, 0x2e	; 46
    262c:	91 93       	st	Z+, r25
        rd_buffer++;
        --length;
    262e:	81 50       	subi	r24, 0x01	; 1
    } while (length != 0);
    2630:	c1 f7       	brne	.-16     	; 0x2622 <rf230_frame_read+0x22>
    
    RF230_SS_HIGH();
    2632:	28 9a       	sbi	0x05, 0	; 5
 
    LEAVE_CRITICAL_REGION();
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	8f bf       	out	0x3f, r24	; 63
}
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <rf230_set_callback_handler>:


void rf230_set_callback_handler(rf230_cb_handler_t handler) {
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	0f 92       	push	r0
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    264a:	2f b7       	in	r18, 0x3f	; 63
    264c:	29 83       	std	Y+1, r18	; 0x01
    264e:	f8 94       	cli
    rf230_callback_handler = handler;
    2650:	90 93 59 0c 	sts	0x0C59, r25
    2654:	80 93 58 0c 	sts	0x0C58, r24
    LEAVE_CRITICAL_REGION();
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	8f bf       	out	0x3f, r24	; 63
}
    265c:	0f 90       	pop	r0
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <rf230_get_callback_handler>:


rf230_cb_handler_t rf230_get_callback_handler(void) {
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	0f 92       	push	r0
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    rf230_cb_handler_t handler = NULL;
    
    ENTER_CRITICAL_REGION();
    266e:	8f b7       	in	r24, 0x3f	; 63
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	f8 94       	cli
    handler = rf230_callback_handler;
    2674:	80 91 58 0c 	lds	r24, 0x0C58
    2678:	90 91 59 0c 	lds	r25, 0x0C59
    LEAVE_CRITICAL_REGION();
    267c:	29 81       	ldd	r18, Y+1	; 0x01
    267e:	2f bf       	out	0x3f, r18	; 63
    
    return handler;
}
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <rf230_clear_callback_handler>:


void rf230_clear_callback_handler(void) {
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	0f 92       	push	r0
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2692:	8f b7       	in	r24, 0x3f	; 63
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	f8 94       	cli
    rf230_callback_handler = NULL;
    2698:	10 92 59 0c 	sts	0x0C59, r1
    269c:	10 92 58 0c 	sts	0x0C58, r1
    LEAVE_CRITICAL_REGION();
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	8f bf       	out	0x3f, r24	; 63
}
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <usb_config_ep>:
//! NOTE:
//! The endpoint 0 shall always be configured in CONTROL type.
//!
uint8_t usb_config_ep(uint8_t config0, uint8_t config1)
{
    Usb_enable_endpoint();
    26ac:	eb ee       	ldi	r30, 0xEB	; 235
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	90 81       	ld	r25, Z
    26b2:	91 60       	ori	r25, 0x01	; 1
    26b4:	90 83       	st	Z, r25
    UECFG0X = config0;
    26b6:	80 93 ec 00 	sts	0x00EC, r24
    UECFG1X = (UECFG1X & (1<<ALLOC)) | config1;
    26ba:	ed ee       	ldi	r30, 0xED	; 237
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	82 70       	andi	r24, 0x02	; 2
    26c2:	68 2b       	or	r22, r24
    26c4:	60 83       	st	Z, r22
    Usb_allocate_memory();
    26c6:	80 81       	ld	r24, Z
    26c8:	82 60       	ori	r24, 0x02	; 2
    26ca:	80 83       	st	Z, r24
    return (Is_endpoint_configured());
    26cc:	80 91 ee 00 	lds	r24, 0x00EE
}
    26d0:	88 1f       	adc	r24, r24
    26d2:	88 27       	eor	r24, r24
    26d4:	88 1f       	adc	r24, r24
    26d6:	08 95       	ret

000026d8 <usb_select_enpoint_interrupt>:
{
uint8_t interrupt_flags;
uint8_t ep_num;

   ep_num = 0;
   interrupt_flags = Usb_interrupt_flags();
    26d8:	80 91 f4 00 	lds	r24, 0x00F4
    26dc:	91 e0       	ldi	r25, 0x01	; 1
    26de:	88 23       	and	r24, r24
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <usb_select_enpoint_interrupt+0xc>
    26e2:	90 e0       	ldi	r25, 0x00	; 0
uint8_t usb_select_enpoint_interrupt(void)
{
uint8_t interrupt_flags;
uint8_t ep_num;

   ep_num = 0;
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	01 c0       	rjmp	.+2      	; 0x26ea <usb_select_enpoint_interrupt+0x12>
         return (ep_num);
      }
      else
      {
         ep_num++;
         interrupt_flags = interrupt_flags >> 1;
    26e8:	90 e0       	ldi	r25, 0x00	; 0
   ep_num = 0;
   interrupt_flags = Usb_interrupt_flags();

   while(ep_num < 9)
   {
      if (interrupt_flags & 1)
    26ea:	99 23       	and	r25, r25
    26ec:	21 f4       	brne	.+8      	; 0x26f6 <usb_select_enpoint_interrupt+0x1e>
      {
         return (ep_num);
      }
      else
      {
         ep_num++;
    26ee:	8f 5f       	subi	r24, 0xFF	; 255
uint8_t ep_num;

   ep_num = 0;
   interrupt_flags = Usb_interrupt_flags();

   while(ep_num < 9)
    26f0:	89 30       	cpi	r24, 0x09	; 9
    26f2:	d1 f7       	brne	.-12     	; 0x26e8 <usb_select_enpoint_interrupt+0x10>
      {
         ep_num++;
         interrupt_flags = interrupt_flags >> 1;
      }
   }
   return 0;
    26f4:	80 e0       	ldi	r24, 0x00	; 0
}
    26f6:	08 95       	ret

000026f8 <usb_send_packet>:
//!
//! Note:
//! tbuf is incremented of 'data_length'.
//!
uint8_t usb_send_packet(uint8_t ep_num, uint8_t* tbuf, uint8_t data_length)
{
    26f8:	fb 01       	movw	r30, r22
uint8_t remaining_length;

   remaining_length = data_length;
   Usb_select_endpoint(ep_num);
    26fa:	80 93 e9 00 	sts	0x00E9, r24
//!
uint8_t usb_send_packet(uint8_t ep_num, uint8_t* tbuf, uint8_t data_length)
{
uint8_t remaining_length;

   remaining_length = data_length;
    26fe:	84 2f       	mov	r24, r20
   Usb_select_endpoint(ep_num);
   while(Is_usb_write_enabled() && (0 != remaining_length))
    2700:	04 c0       	rjmp	.+8      	; 0x270a <usb_send_packet+0x12>
   {
      Usb_write_byte(*tbuf);
    2702:	91 91       	ld	r25, Z+
    2704:	90 93 f1 00 	sts	0x00F1, r25
      remaining_length--;
    2708:	81 50       	subi	r24, 0x01	; 1
{
uint8_t remaining_length;

   remaining_length = data_length;
   Usb_select_endpoint(ep_num);
   while(Is_usb_write_enabled() && (0 != remaining_length))
    270a:	90 91 e8 00 	lds	r25, 0x00E8
    270e:	95 ff       	sbrs	r25, 5
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <usb_send_packet+0x1e>
    2712:	88 23       	and	r24, r24
    2714:	b1 f7       	brne	.-20     	; 0x2702 <usb_send_packet+0xa>
      Usb_write_byte(*tbuf);
      remaining_length--;
      tbuf++;
   }
   return remaining_length;
}
    2716:	08 95       	ret

00002718 <usb_read_packet>:
//!
//! Note:
//! rbuf is incremented of 'data_length'.
//!
uint8_t usb_read_packet(uint8_t ep_num, uint8_t* rbuf, uint8_t  data_length)
{
    2718:	fb 01       	movw	r30, r22
uint8_t remaining_length;

   remaining_length = data_length;
   Usb_select_endpoint(ep_num);
    271a:	80 93 e9 00 	sts	0x00E9, r24
//!
uint8_t usb_read_packet(uint8_t ep_num, uint8_t* rbuf, uint8_t  data_length)
{
uint8_t remaining_length;

   remaining_length = data_length;
    271e:	84 2f       	mov	r24, r20
   Usb_select_endpoint(ep_num);

   while(Is_usb_read_enabled() && (0 != remaining_length))
    2720:	04 c0       	rjmp	.+8      	; 0x272a <usb_read_packet+0x12>
   {
      *rbuf = Usb_read_byte();
    2722:	90 91 f1 00 	lds	r25, 0x00F1
    2726:	91 93       	st	Z+, r25
      remaining_length--;
    2728:	81 50       	subi	r24, 0x01	; 1
uint8_t remaining_length;

   remaining_length = data_length;
   Usb_select_endpoint(ep_num);

   while(Is_usb_read_enabled() && (0 != remaining_length))
    272a:	90 91 e8 00 	lds	r25, 0x00E8
    272e:	95 ff       	sbrs	r25, 5
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <usb_read_packet+0x1e>
    2732:	88 23       	and	r24, r24
    2734:	b1 f7       	brne	.-20     	; 0x2722 <usb_read_packet+0xa>
      *rbuf = Usb_read_byte();
      remaining_length--;
      rbuf++;
   }
   return remaining_length;
}
    2736:	08 95       	ret

00002738 <usb_halt_endpoint>:
//!
//! @param ep_num Addressed endpoint
//!
void usb_halt_endpoint (uint8_t ep_num)
{
   Usb_select_endpoint(ep_num);
    2738:	80 93 e9 00 	sts	0x00E9, r24
   Usb_enable_stall_handshake();
    273c:	eb ee       	ldi	r30, 0xEB	; 235
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	80 62       	ori	r24, 0x20	; 32
    2744:	80 83       	st	Z, r24
}
    2746:	08 95       	ret

00002748 <usb_init_device>:
//!
//! @returns Zero is returned if the device could not be initialized. A non-zero,
//!          positive number is returned if the initialization was successful.
uint8_t usb_init_device (void)
{
   Usb_select_device();
    2748:	80 91 d8 00 	lds	r24, 0x00D8
    274c:	8f 7b       	andi	r24, 0xBF	; 191
    274e:	80 93 d8 00 	sts	0x00D8, r24
   if(Is_usb_id_device())
    2752:	80 91 d9 00 	lds	r24, 0x00D9
    2756:	81 ff       	sbrs	r24, 1
    2758:	08 c0       	rjmp	.+16     	; 0x276a <usb_init_device+0x22>
   {
      Usb_select_endpoint(EP_CONTROL);
    275a:	10 92 e9 00 	sts	0x00E9, r1
      if(!Is_usb_endpoint_enabled())
    275e:	80 91 eb 00 	lds	r24, 0x00EB
    2762:	80 ff       	sbrs	r24, 0
    2764:	04 c0       	rjmp	.+8      	; 0x276e <usb_init_device+0x26>
                                SIZE_64,       \
                                ONE_BANK,      \
                                NYET_DISABLED);
      }
   }
   return false;
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	08 95       	ret
    276a:	80 e0       	ldi	r24, 0x00	; 0

}
    276c:	08 95       	ret
   if(Is_usb_id_device())
   {
      Usb_select_endpoint(EP_CONTROL);
      if(!Is_usb_endpoint_enabled())
      {
         return usb_configure_endpoint(EP_CONTROL,    \
    276e:	10 92 e9 00 	sts	0x00E9, r1
    2772:	82 e0       	ldi	r24, 0x02	; 2
    2774:	60 e3       	ldi	r22, 0x30	; 48
    2776:	0e 94 56 13 	call	0x26ac	; 0x26ac <usb_config_ep>
    277a:	08 95       	ret

0000277c <usb_user_read_request>:
  {
    default:
         return false;
  }
	
}
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	08 95       	ret

00002780 <usb_user_endpoint_init>:

//! usb_user_endpoint_init.
//!
//! This function configures the endpoints.
void usb_user_endpoint_init(void)
{
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
 usb_configure_endpoint(EP_IN,          
    2784:	c9 ee       	ldi	r28, 0xE9	; 233
    2786:	d0 e0       	ldi	r29, 0x00	; 0
    2788:	84 e0       	ldi	r24, 0x04	; 4
    278a:	88 83       	st	Y, r24
    278c:	81 e8       	ldi	r24, 0x81	; 129
    278e:	60 e3       	ldi	r22, 0x30	; 48
    2790:	0e 94 56 13 	call	0x26ac	; 0x26ac <usb_config_ep>
                        
                         ONE_BANK,
                        
                         NYET_ENABLED);
 
 usb_configure_endpoint(EP_OUT,        
    2794:	82 e0       	ldi	r24, 0x02	; 2
    2796:	88 83       	st	Y, r24
    2798:	80 e8       	ldi	r24, 0x80	; 128
    279a:	60 e3       	ldi	r22, 0x30	; 48
    279c:	0e 94 56 13 	call	0x26ac	; 0x26ac <usb_config_ep>
                        
                         ONE_BANK,
                        
                         NYET_ENABLED);

usb_configure_endpoint(EP_EVENT,        
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	88 83       	st	Y, r24
    27a4:	81 e8       	ldi	r24, 0x81	; 129
    27a6:	64 e3       	ldi	r22, 0x34	; 52
    27a8:	0e 94 56 13 	call	0x26ac	; 0x26ac <usb_config_ep>
                         TYPE_BULK,     
                         DIRECTION_IN,
                            SIZE_64,
                         TWO_BANKS,
                         NYET_ENABLED);
}
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	08 95       	ret

000027b2 <usb_user_get_descriptor>:
//! @retval true The descriptor was found and put in the TX buffer. False is
//!              returned if the descriptor could not be found.

bool usb_user_get_descriptor(uint8_t type, uint8_t string)
{
    switch(type)
    27b2:	83 30       	cpi	r24, 0x03	; 3
    27b4:	31 f5       	brne	.+76     	; 0x2802 <usb_user_get_descriptor+0x50>
    {
        case STRING_DESCRIPTOR:
	        switch (string)
    27b6:	61 30       	cpi	r22, 0x01	; 1
    27b8:	69 f0       	breq	.+26     	; 0x27d4 <usb_user_get_descriptor+0x22>
    27ba:	61 30       	cpi	r22, 0x01	; 1
    27bc:	28 f0       	brcs	.+10     	; 0x27c8 <usb_user_get_descriptor+0x16>
    27be:	62 30       	cpi	r22, 0x02	; 2
    27c0:	79 f0       	breq	.+30     	; 0x27e0 <usb_user_get_descriptor+0x2e>
    27c2:	63 30       	cpi	r22, 0x03	; 3
    27c4:	01 f5       	brne	.+64     	; 0x2806 <usb_user_get_descriptor+0x54>
    27c6:	12 c0       	rjmp	.+36     	; 0x27ec <usb_user_get_descriptor+0x3a>
	        {
    	        case LANG_ID:
		            data_to_transfer = sizeof (usb_user_language_id);
    27c8:	84 e0       	ldi	r24, 0x04	; 4
    27ca:	80 93 20 11 	sts	0x1120, r24
		            pbuffer = &(usb_user_language_id.bLength);
    27ce:	89 e8       	ldi	r24, 0x89	; 137
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	11 c0       	rjmp	.+34     	; 0x27f6 <usb_user_get_descriptor+0x44>
		            return true;

	            case MAN_INDEX:
		            data_to_transfer = sizeof (usb_user_manufacturer_string_descriptor);
    27d4:	8c e0       	ldi	r24, 0x0C	; 12
    27d6:	80 93 20 11 	sts	0x1120, r24
		            pbuffer = &(usb_user_manufacturer_string_descriptor.bLength);
    27da:	8b e4       	ldi	r24, 0x4B	; 75
    27dc:	91 e0       	ldi	r25, 0x01	; 1
    27de:	0b c0       	rjmp	.+22     	; 0x27f6 <usb_user_get_descriptor+0x44>
		            return true;

	            case PROD_INDEX:
		            data_to_transfer = sizeof (usb_user_product_string_descriptor);
    27e0:	86 e1       	ldi	r24, 0x16	; 22
    27e2:	80 93 20 11 	sts	0x1120, r24
		            pbuffer = &(usb_user_product_string_descriptor.bLength);
    27e6:	87 e5       	ldi	r24, 0x57	; 87
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	05 c0       	rjmp	.+10     	; 0x27f6 <usb_user_get_descriptor+0x44>
		            return true;

	            case SN_INDEX:
		            data_to_transfer = sizeof (usb_user_serial_number);
    27ec:	8c e1       	ldi	r24, 0x1C	; 28
    27ee:	80 93 20 11 	sts	0x1120, r24
		            pbuffer = &(usb_user_serial_number.bLength);
    27f2:	8d e6       	ldi	r24, 0x6D	; 109
    27f4:	91 e0       	ldi	r25, 0x01	; 1
    27f6:	90 93 22 11 	sts	0x1122, r25
    27fa:	80 93 21 11 	sts	0x1121, r24
		            return true;
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	08 95       	ret
	            default:
		            return false;
	        }
	
	    default:
		    return false;
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	08 95       	ret
		            data_to_transfer = sizeof (usb_user_serial_number);
		            pbuffer = &(usb_user_serial_number.bLength);
		            return true;

	            default:
		            return false;
    2806:	80 e0       	ldi	r24, 0x00	; 0
	        }
	
	    default:
		    return false;
	}
}
    2808:	08 95       	ret

0000280a <usb_enum_var_init>:
{
uint8_t ep_num;

   for( ep_num=0 ; ep_num<NB_ENDPOINTS ; ep_num++ )
   {
      endpoint_status[ep_num] = 0;
    280a:	10 92 5c 0c 	sts	0x0C5C, r1
    280e:	10 92 5d 0c 	sts	0x0C5D, r1
    2812:	10 92 5e 0c 	sts	0x0C5E, r1
   }
   usb_connected        = false;         //!< USB is not connected
    2816:	10 92 5f 0c 	sts	0x0C5F, r1
   usb_configuration_nb = 0    ;         //!< Default configuration number is 0
    281a:	10 92 1f 11 	sts	0x111F, r1
}
    281e:	08 95       	ret

00002820 <usb_process_request>:
//! function, the device is ready to manage the next request.
void usb_process_request(void)
{
	uint8_t	 bmRequest;

   bmRequestType = Usb_read_byte();
    2820:	80 91 f1 00 	lds	r24, 0x00F1
    2824:	80 93 5a 0c 	sts	0x0C5A, r24
   bmRequest     = Usb_read_byte();
    2828:	60 91 f1 00 	lds	r22, 0x00F1

   switch (bmRequest)
    282c:	65 30       	cpi	r22, 0x05	; 5
    282e:	09 f4       	brne	.+2      	; 0x2832 <usb_process_request+0x12>
    2830:	c0 c0       	rjmp	.+384    	; 0x29b2 <usb_process_request+0x192>
    2832:	66 30       	cpi	r22, 0x06	; 6
    2834:	50 f4       	brcc	.+20     	; 0x284a <usb_process_request+0x2a>
    2836:	61 30       	cpi	r22, 0x01	; 1
    2838:	09 f4       	brne	.+2      	; 0x283c <usb_process_request+0x1c>
    283a:	f4 c0       	rjmp	.+488    	; 0x2a24 <usb_process_request+0x204>
    283c:	61 30       	cpi	r22, 0x01	; 1
    283e:	08 f4       	brcc	.+2      	; 0x2842 <usb_process_request+0x22>
    2840:	57 c1       	rjmp	.+686    	; 0x2af0 <usb_process_request+0x2d0>
    2842:	63 30       	cpi	r22, 0x03	; 3
    2844:	09 f0       	breq	.+2      	; 0x2848 <usb_process_request+0x28>
    2846:	ae c1       	rjmp	.+860    	; 0x2ba4 <usb_process_request+0x384>
    2848:	24 c1       	rjmp	.+584    	; 0x2a92 <usb_process_request+0x272>
    284a:	68 30       	cpi	r22, 0x08	; 8
    284c:	09 f4       	brne	.+2      	; 0x2850 <usb_process_request+0x30>
    284e:	95 c0       	rjmp	.+298    	; 0x297a <usb_process_request+0x15a>
    2850:	69 30       	cpi	r22, 0x09	; 9
    2852:	20 f4       	brcc	.+8      	; 0x285c <usb_process_request+0x3c>
    2854:	66 30       	cpi	r22, 0x06	; 6
    2856:	09 f0       	breq	.+2      	; 0x285a <usb_process_request+0x3a>
    2858:	a5 c1       	rjmp	.+842    	; 0x2ba4 <usb_process_request+0x384>
    285a:	07 c0       	rjmp	.+14     	; 0x286a <usb_process_request+0x4a>
    285c:	69 30       	cpi	r22, 0x09	; 9
    285e:	09 f4       	brne	.+2      	; 0x2862 <usb_process_request+0x42>
    2860:	c9 c0       	rjmp	.+402    	; 0x29f4 <usb_process_request+0x1d4>
    2862:	6a 30       	cpi	r22, 0x0A	; 10
    2864:	09 f0       	breq	.+2      	; 0x2868 <usb_process_request+0x48>
    2866:	9e c1       	rjmp	.+828    	; 0x2ba4 <usb_process_request+0x384>
    2868:	7b c1       	rjmp	.+758    	; 0x2b60 <usb_process_request+0x340>
   {
    case GET_DESCRIPTOR:
         if (0x80 == bmRequestType) { usb_get_descriptor(); }
    286a:	80 38       	cpi	r24, 0x80	; 128
    286c:	09 f0       	breq	.+2      	; 0x2870 <usb_process_request+0x50>
    286e:	83 c0       	rjmp	.+262    	; 0x2976 <usb_process_request+0x156>
    uint8_t  descriptor_type;
    uint8_t  string_type;
    uint8_t  dummy;
    uint8_t  nb_byte;

   zlp             = false;                  /* no zero length packet */
    2870:	10 92 5b 0c 	sts	0x0C5B, r1
   string_type     = Usb_read_byte();        /* read LSB of wValue    */
    2874:	60 91 f1 00 	lds	r22, 0x00F1
   descriptor_type = Usb_read_byte();        /* read MSB of wValue    */
    2878:	80 91 f1 00 	lds	r24, 0x00F1

   switch (descriptor_type)
    287c:	81 30       	cpi	r24, 0x01	; 1
    287e:	19 f0       	breq	.+6      	; 0x2886 <usb_process_request+0x66>
    2880:	82 30       	cpi	r24, 0x02	; 2
    2882:	89 f4       	brne	.+34     	; 0x28a6 <usb_process_request+0x86>
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <usb_process_request+0x72>
   {
    case DEVICE_DESCRIPTOR:
      data_to_transfer = Usb_get_dev_desc_length(); //!< sizeof (usb_user_device_descriptor);
    2886:	82 e1       	ldi	r24, 0x12	; 18
    2888:	80 93 20 11 	sts	0x1120, r24
      pbuffer          = Usb_get_dev_desc_pointer();
    288c:	82 e1       	ldi	r24, 0x12	; 18
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	05 c0       	rjmp	.+10     	; 0x289c <usb_process_request+0x7c>
      break;
    case CONFIGURATION_DESCRIPTOR:
      data_to_transfer = Usb_get_conf_desc_length(); //!< sizeof (usb_user_configuration_descriptor);
    2892:	87 e2       	ldi	r24, 0x27	; 39
    2894:	80 93 20 11 	sts	0x1120, r24
      pbuffer          = Usb_get_conf_desc_pointer();
    2898:	84 e2       	ldi	r24, 0x24	; 36
    289a:	91 e0       	ldi	r25, 0x01	; 1
    289c:	90 93 22 11 	sts	0x1122, r25
    28a0:	80 93 21 11 	sts	0x1121, r24
    28a4:	05 c0       	rjmp	.+10     	; 0x28b0 <usb_process_request+0x90>
      break;
    default:
      if( usb_user_get_descriptor(descriptor_type, string_type)==false )
    28a6:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <usb_user_get_descriptor>
    28aa:	88 23       	and	r24, r24
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <usb_process_request+0x90>
    28ae:	6b c1       	rjmp	.+726    	; 0x2b86 <usb_process_request+0x366>
         return;
      }
      break;
   }

   dummy = Usb_read_byte();                     //!< don't care of wIndex field
    28b0:	80 91 f1 00 	lds	r24, 0x00F1
   dummy = Usb_read_byte();
    28b4:	80 91 f1 00 	lds	r24, 0x00F1
   
   dummy = Usb_read_byte(); // LSB .
    28b8:	80 91 f1 00 	lds	r24, 0x00F1
   wLength = Usb_read_byte() << 8;
    28bc:	90 91 f1 00 	lds	r25, 0x00F1
    28c0:	39 2f       	mov	r19, r25
    28c2:	20 e0       	ldi	r18, 0x00	; 0
   wLength |= dummy;
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	82 2b       	or	r24, r18
    28c8:	93 2b       	or	r25, r19
   
   //LSB(wLength) = Usb_read_byte();      //!< read wLength
   //MSB(wLength) = Usb_read_byte();
   
   Usb_ack_receive_setup() ;                  //!< clear the receive setup flag
    28ca:	20 91 e8 00 	lds	r18, 0x00E8
    28ce:	27 7f       	andi	r18, 0xF7	; 247
    28d0:	20 93 e8 00 	sts	0x00E8, r18

   if (wLength > data_to_transfer)
    28d4:	40 91 20 11 	lds	r20, 0x1120
    28d8:	24 2f       	mov	r18, r20
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	28 17       	cp	r18, r24
    28de:	39 07       	cpc	r19, r25
    28e0:	48 f4       	brcc	.+18     	; 0x28f4 <usb_process_request+0xd4>
   {
      if ((data_to_transfer % EP_CONTROL_LENGTH) == 0) { zlp = true; }
    28e2:	4f 73       	andi	r20, 0x3F	; 63
    28e4:	21 f4       	brne	.+8      	; 0x28ee <usb_process_request+0xce>
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	80 93 5b 0c 	sts	0x0C5B, r24
    28ec:	25 c0       	rjmp	.+74     	; 0x2938 <usb_process_request+0x118>
      else { zlp = false; }                   //!< no need of zero length packet
    28ee:	10 92 5b 0c 	sts	0x0C5B, r1
    28f2:	22 c0       	rjmp	.+68     	; 0x2938 <usb_process_request+0x118>
   }
   else
   {
      data_to_transfer = (uint8_t)wLength;         //!< send only requested number of data
    28f4:	80 93 20 11 	sts	0x1120, r24
    28f8:	1f c0       	rjmp	.+62     	; 0x2938 <usb_process_request+0x118>
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
   {
      while(!Is_usb_read_control_enabled());
    28fa:	80 91 e8 00 	lds	r24, 0x00E8
    28fe:	80 ff       	sbrs	r24, 0
    2900:	fc cf       	rjmp	.-8      	; 0x28fa <usb_process_request+0xda>
    2902:	81 e4       	ldi	r24, 0x41	; 65
    2904:	10 c0       	rjmp	.+32     	; 0x2926 <usb_process_request+0x106>
    2906:	81 50       	subi	r24, 0x01	; 1

		nb_byte=0;
      while(data_to_transfer != 0)			//!< Send data until necessary
      {
			if(nb_byte++==EP_CONTROL_LENGTH) //!< Check endpoint 0 size
    2908:	91 f0       	breq	.+36     	; 0x292e <usb_process_request+0x10e>
			{
				break;
			}
            
            
         Usb_write_byte(*pbuffer);
    290a:	e0 91 21 11 	lds	r30, 0x1121
    290e:	f0 91 22 11 	lds	r31, 0x1122
    2912:	21 91       	ld	r18, Z+
    2914:	20 93 f1 00 	sts	0x00F1, r18
         pbuffer ++;
    2918:	f0 93 22 11 	sts	0x1122, r31
    291c:	e0 93 21 11 	sts	0x1121, r30
         data_to_transfer --;
    2920:	91 50       	subi	r25, 0x01	; 1
    2922:	90 93 20 11 	sts	0x1120, r25
   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
   {
      while(!Is_usb_read_control_enabled());

		nb_byte=0;
      while(data_to_transfer != 0)			//!< Send data until necessary
    2926:	90 91 20 11 	lds	r25, 0x1120
    292a:	99 23       	and	r25, r25
    292c:	61 f7       	brne	.-40     	; 0x2906 <usb_process_request+0xe6>
            
         Usb_write_byte(*pbuffer);
         pbuffer ++;
         data_to_transfer --;
      }
      Usb_send_control_in();
    292e:	80 91 e8 00 	lds	r24, 0x00E8
    2932:	8e 7f       	andi	r24, 0xFE	; 254
    2934:	80 93 e8 00 	sts	0x00E8, r24
   else
   {
      data_to_transfer = (uint8_t)wLength;         //!< send only requested number of data
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
    2938:	80 91 20 11 	lds	r24, 0x1120
    293c:	88 23       	and	r24, r24
    293e:	21 f0       	breq	.+8      	; 0x2948 <usb_process_request+0x128>
    2940:	80 91 e8 00 	lds	r24, 0x00E8
    2944:	82 ff       	sbrs	r24, 2
    2946:	d9 cf       	rjmp	.-78     	; 0x28fa <usb_process_request+0xda>
         data_to_transfer --;
      }
      Usb_send_control_in();
   }

   Usb_send_control_in();
    2948:	80 91 e8 00 	lds	r24, 0x00E8
    294c:	8e 7f       	andi	r24, 0xFE	; 254
    294e:	80 93 e8 00 	sts	0x00E8, r24

   if(Is_usb_receive_out()) { Usb_ack_receive_out(); return; } //!< abort from Host
    2952:	80 91 e8 00 	lds	r24, 0x00E8
    2956:	82 fd       	sbrc	r24, 2
    2958:	f8 c0       	rjmp	.+496    	; 0x2b4a <usb_process_request+0x32a>
   if(zlp == true)        { Usb_send_control_in(); }
    295a:	80 91 5b 0c 	lds	r24, 0x0C5B
    295e:	88 23       	and	r24, r24
    2960:	29 f0       	breq	.+10     	; 0x296c <usb_process_request+0x14c>
    2962:	80 91 e8 00 	lds	r24, 0x00E8
    2966:	8e 7f       	andi	r24, 0xFE	; 254
    2968:	80 93 e8 00 	sts	0x00E8, r24

   while(!Is_usb_receive_out());
    296c:	80 91 e8 00 	lds	r24, 0x00E8
    2970:	82 ff       	sbrs	r24, 2
    2972:	fc cf       	rjmp	.-8      	; 0x296c <usb_process_request+0x14c>
    2974:	ea c0       	rjmp	.+468    	; 0x2b4a <usb_process_request+0x32a>

   switch (bmRequest)
   {
    case GET_DESCRIPTOR:
         if (0x80 == bmRequestType) { usb_get_descriptor(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    2976:	66 e0       	ldi	r22, 0x06	; 6
    2978:	12 c1       	rjmp	.+548    	; 0x2b9e <usb_process_request+0x37e>
			break;

    case GET_CONFIGURATION:
         if (0x80 == bmRequestType) { usb_get_configuration(); }
    297a:	80 38       	cpi	r24, 0x80	; 128
    297c:	c1 f4       	brne	.+48     	; 0x29ae <usb_process_request+0x18e>
//!
//! This function manages the GET CONFIGURATION request. The current
//! configuration number is returned.
void usb_get_configuration(void)
{
   Usb_ack_receive_setup();
    297e:	80 91 e8 00 	lds	r24, 0x00E8
    2982:	87 7f       	andi	r24, 0xF7	; 247
    2984:	80 93 e8 00 	sts	0x00E8, r24

   Usb_write_byte(usb_configuration_nb);
    2988:	80 91 1f 11 	lds	r24, 0x111F
    298c:	80 93 f1 00 	sts	0x00F1, r24
   Usb_ack_in_ready();
    2990:	80 91 e8 00 	lds	r24, 0x00E8
    2994:	8e 7f       	andi	r24, 0xFE	; 254
    2996:	80 93 e8 00 	sts	0x00E8, r24
    299a:	80 91 e8 00 	lds	r24, 0x00E8
    299e:	8f 77       	andi	r24, 0x7F	; 127
    29a0:	80 93 e8 00 	sts	0x00E8, r24

   while( !Is_usb_receive_out() );
    29a4:	80 91 e8 00 	lds	r24, 0x00E8
    29a8:	82 ff       	sbrs	r24, 2
    29aa:	fc cf       	rjmp	.-8      	; 0x29a4 <usb_process_request+0x184>
    29ac:	ce c0       	rjmp	.+412    	; 0x2b4a <usb_process_request+0x32a>
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
			break;

    case GET_CONFIGURATION:
         if (0x80 == bmRequestType) { usb_get_configuration(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    29ae:	68 e0       	ldi	r22, 0x08	; 8
    29b0:	f6 c0       	rjmp	.+492    	; 0x2b9e <usb_process_request+0x37e>
         break;

    case SET_ADDRESS:
         if (0x00 == bmRequestType) { usb_set_address(); }
    29b2:	88 23       	and	r24, r24
    29b4:	e9 f4       	brne	.+58     	; 0x29f0 <usb_process_request+0x1d0>
//!
//! This function manages the SET ADDRESS request. When complete, the device
//! will filter the requests using the new address.
void usb_set_address(void)
{
    uint8_t address = Usb_read_byte();
    29b6:	80 91 f1 00 	lds	r24, 0x00F1
   Usb_configure_address(address);
    29ba:	90 91 e3 00 	lds	r25, 0x00E3
    29be:	8f 77       	andi	r24, 0x7F	; 127
    29c0:	90 78       	andi	r25, 0x80	; 128
    29c2:	89 2b       	or	r24, r25
    29c4:	80 93 e3 00 	sts	0x00E3, r24

   Usb_ack_receive_setup();
    29c8:	80 91 e8 00 	lds	r24, 0x00E8
    29cc:	87 7f       	andi	r24, 0xF7	; 247
    29ce:	80 93 e8 00 	sts	0x00E8, r24

   Usb_send_control_in();                    //!< send a ZLP for STATUS phase
    29d2:	80 91 e8 00 	lds	r24, 0x00E8
    29d6:	8e 7f       	andi	r24, 0xFE	; 254
    29d8:	80 93 e8 00 	sts	0x00E8, r24
   while(!Is_usb_in_ready());                //!< waits for status phase done
    29dc:	80 91 e8 00 	lds	r24, 0x00E8
    29e0:	80 ff       	sbrs	r24, 0
    29e2:	fc cf       	rjmp	.-8      	; 0x29dc <usb_process_request+0x1bc>
                                             //!< before using the new address
   Usb_enable_address();
    29e4:	80 91 e3 00 	lds	r24, 0x00E3
    29e8:	80 68       	ori	r24, 0x80	; 128
    29ea:	80 93 e3 00 	sts	0x00E3, r24
    29ee:	08 95       	ret
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
         break;

    case SET_ADDRESS:
         if (0x00 == bmRequestType) { usb_set_address(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    29f0:	65 e0       	ldi	r22, 0x05	; 5
    29f2:	d5 c0       	rjmp	.+426    	; 0x2b9e <usb_process_request+0x37e>
         break;

    case SET_CONFIGURATION:
         if (0x00 == bmRequestType) { usb_set_configuration(); }
    29f4:	88 23       	and	r24, r24
    29f6:	a1 f4       	brne	.+40     	; 0x2a20 <usb_process_request+0x200>
//! number.
void usb_set_configuration( void )
{
    uint8_t configuration_number;

   configuration_number = Usb_read_byte();
    29f8:	90 91 f1 00 	lds	r25, 0x00F1

   if (configuration_number <= NB_CONFIGURATION)
    29fc:	92 30       	cpi	r25, 0x02	; 2
    29fe:	08 f0       	brcs	.+2      	; 0x2a02 <usb_process_request+0x1e2>
    2a00:	c2 c0       	rjmp	.+388    	; 0x2b86 <usb_process_request+0x366>
   {
      Usb_ack_receive_setup();
    2a02:	80 91 e8 00 	lds	r24, 0x00E8
    2a06:	87 7f       	andi	r24, 0xF7	; 247
    2a08:	80 93 e8 00 	sts	0x00E8, r24
      usb_configuration_nb = configuration_number;
    2a0c:	90 93 1f 11 	sts	0x111F, r25
      Usb_enable_stall_handshake();
      Usb_ack_receive_setup();
      return;
   }

   Usb_send_control_in();                    //!< send a ZLP for STATUS phase
    2a10:	80 91 e8 00 	lds	r24, 0x00E8
    2a14:	8e 7f       	andi	r24, 0xFE	; 254
    2a16:	80 93 e8 00 	sts	0x00E8, r24

   usb_user_endpoint_init();  //!< endpoint configuration
    2a1a:	0e 94 c0 13 	call	0x2780	; 0x2780 <usb_user_endpoint_init>
    2a1e:	08 95       	ret
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
         break;

    case SET_CONFIGURATION:
         if (0x00 == bmRequestType) { usb_set_configuration(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    2a20:	69 e0       	ldi	r22, 0x09	; 9
    2a22:	bd c0       	rjmp	.+378    	; 0x2b9e <usb_process_request+0x37e>
         break;

    case CLEAR_FEATURE:
         if (0x02 >= bmRequestType) { usb_clear_feature(); }
    2a24:	83 30       	cpi	r24, 0x03	; 3
    2a26:	98 f5       	brcc	.+102    	; 0x2a8e <usb_process_request+0x26e>
void usb_clear_feature(void)
{
    uint8_t wValue;
    uint8_t wIndex;

   if (bmRequestType == ZERO_TYPE)
    2a28:	88 23       	and	r24, r24
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <usb_process_request+0x20e>
    2a2c:	ac c0       	rjmp	.+344    	; 0x2b86 <usb_process_request+0x366>
      //!< OUT request following the SETUP may be acknowledged
      Usb_enable_stall_handshake();
      Usb_ack_receive_setup();
      return;
   }
   else if (bmRequestType == INTERFACE_TYPE)
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <usb_process_request+0x214>
    2a32:	a9 c0       	rjmp	.+338    	; 0x2b86 <usb_process_request+0x366>
      Usb_ack_receive_setup();
      return;
   }
   else if (bmRequestType == ENDPOINT_TYPE)
   {
      wValue = Usb_read_byte();
    2a34:	80 91 f1 00 	lds	r24, 0x00F1
   //   dummy  = Usb_read_byte();                //!< dummy read

      if (wValue == FEATURE_ENDPOINT_HALT)
    2a38:	88 23       	and	r24, r24
    2a3a:	09 f0       	breq	.+2      	; 0x2a3e <usb_process_request+0x21e>
    2a3c:	a4 c0       	rjmp	.+328    	; 0x2b86 <usb_process_request+0x366>
      {
         wIndex = (Usb_read_byte() & MSK_EP_DIR);
    2a3e:	e0 91 f1 00 	lds	r30, 0x00F1
    2a42:	ef 77       	andi	r30, 0x7F	; 127

         Usb_select_endpoint(wIndex);
    2a44:	e0 93 e9 00 	sts	0x00E9, r30
         if(Is_usb_endpoint_enabled())
    2a48:	80 91 eb 00 	lds	r24, 0x00EB
    2a4c:	80 ff       	sbrs	r24, 0
    2a4e:	9b c0       	rjmp	.+310    	; 0x2b86 <usb_process_request+0x366>
         {
            if(wIndex != EP_CONTROL)
    2a50:	ee 23       	and	r30, r30
    2a52:	b1 f0       	breq	.+44     	; 0x2a80 <usb_process_request+0x260>
            {
               Usb_disable_stall_handshake();
    2a54:	80 91 eb 00 	lds	r24, 0x00EB
    2a58:	80 61       	ori	r24, 0x10	; 16
    2a5a:	80 93 eb 00 	sts	0x00EB, r24
               Usb_reset_endpoint(wIndex);
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 2e       	mov	r0, r30
    2a64:	02 c0       	rjmp	.+4      	; 0x2a6a <usb_process_request+0x24a>
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	0a 94       	dec	r0
    2a6c:	e2 f7       	brpl	.-8      	; 0x2a66 <usb_process_request+0x246>
    2a6e:	80 93 ea 00 	sts	0x00EA, r24
    2a72:	10 92 ea 00 	sts	0x00EA, r1
               Usb_reset_data_toggle();
    2a76:	80 91 eb 00 	lds	r24, 0x00EB
    2a7a:	88 60       	ori	r24, 0x08	; 8
    2a7c:	80 93 eb 00 	sts	0x00EB, r24
            }
            Usb_select_endpoint(EP_CONTROL);
    2a80:	10 92 e9 00 	sts	0x00E9, r1
            endpoint_status[wIndex] = 0x00;
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	e4 5a       	subi	r30, 0xA4	; 164
    2a88:	f3 4f       	sbci	r31, 0xF3	; 243
    2a8a:	10 82       	st	Z, r1
    2a8c:	26 c0       	rjmp	.+76     	; 0x2ada <usb_process_request+0x2ba>
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
         break;

    case CLEAR_FEATURE:
         if (0x02 >= bmRequestType) { usb_clear_feature(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    2a8e:	61 e0       	ldi	r22, 0x01	; 1
    2a90:	86 c0       	rjmp	.+268    	; 0x2b9e <usb_process_request+0x37e>
         break;

    case SET_FEATURE:
         if (0x02 >= bmRequestType) { usb_set_feature(); }
    2a92:	83 30       	cpi	r24, 0x03	; 3
    2a94:	58 f5       	brcc	.+86     	; 0x2aec <usb_process_request+0x2cc>
void usb_set_feature(void)
{
    uint8_t wValue;
    uint8_t wIndex;

   if (bmRequestType == INTERFACE_TYPE)
    2a96:	81 30       	cpi	r24, 0x01	; 1
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <usb_process_request+0x27c>
    2a9a:	75 c0       	rjmp	.+234    	; 0x2b86 <usb_process_request+0x366>
      //!< OUT request following the SETUP may be acknowledged
      Usb_enable_stall_handshake();
      Usb_ack_receive_setup();
      return;
   }
   else if (bmRequestType == ENDPOINT_TYPE)
    2a9c:	82 30       	cpi	r24, 0x02	; 2
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <usb_process_request+0x282>
    2aa0:	8f c0       	rjmp	.+286    	; 0x2bc0 <usb_process_request+0x3a0>
   {
      wValue = Usb_read_byte();
    2aa2:	80 91 f1 00 	lds	r24, 0x00F1
      //dummy    = Usb_read_byte();                //!< dummy read
        
      if (wValue == FEATURE_ENDPOINT_HALT)
    2aa6:	88 23       	and	r24, r24
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <usb_process_request+0x28c>
    2aaa:	6d c0       	rjmp	.+218    	; 0x2b86 <usb_process_request+0x366>
      {
         wIndex = (Usb_read_byte() & MSK_EP_DIR);
    2aac:	e0 91 f1 00 	lds	r30, 0x00F1
    2ab0:	ef 77       	andi	r30, 0x7F	; 127

         if (wIndex == EP_CONTROL)
    2ab2:	09 f4       	brne	.+2      	; 0x2ab6 <usb_process_request+0x296>
    2ab4:	68 c0       	rjmp	.+208    	; 0x2b86 <usb_process_request+0x366>
            Usb_enable_stall_handshake();
            Usb_ack_receive_setup();
            return;
         }

         Usb_select_endpoint(wIndex);
    2ab6:	e0 93 e9 00 	sts	0x00E9, r30
         if(Is_usb_endpoint_enabled())
    2aba:	80 91 eb 00 	lds	r24, 0x00EB
    2abe:	80 ff       	sbrs	r24, 0
    2ac0:	62 c0       	rjmp	.+196    	; 0x2b86 <usb_process_request+0x366>
         {
            Usb_enable_stall_handshake();
    2ac2:	80 91 eb 00 	lds	r24, 0x00EB
    2ac6:	80 62       	ori	r24, 0x20	; 32
    2ac8:	80 93 eb 00 	sts	0x00EB, r24
            Usb_select_endpoint(EP_CONTROL);
    2acc:	10 92 e9 00 	sts	0x00E9, r1
            endpoint_status[wIndex] = 0x01;
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	e4 5a       	subi	r30, 0xA4	; 164
    2ad4:	f3 4f       	sbci	r31, 0xF3	; 243
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	80 83       	st	Z, r24
            Usb_ack_receive_setup();
    2ada:	80 91 e8 00 	lds	r24, 0x00E8
    2ade:	87 7f       	andi	r24, 0xF7	; 247
    2ae0:	80 93 e8 00 	sts	0x00E8, r24
            Usb_send_control_in();
    2ae4:	80 91 e8 00 	lds	r24, 0x00E8
    2ae8:	8e 7f       	andi	r24, 0xFE	; 254
    2aea:	55 c0       	rjmp	.+170    	; 0x2b96 <usb_process_request+0x376>
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
         break;

    case SET_FEATURE:
         if (0x02 >= bmRequestType) { usb_set_feature(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    2aec:	63 e0       	ldi	r22, 0x03	; 3
    2aee:	57 c0       	rjmp	.+174    	; 0x2b9e <usb_process_request+0x37e>
         break;

    case GET_STATUS:
         if ((0x7F < bmRequestType) & (0x82 >= bmRequestType))
    2af0:	98 2f       	mov	r25, r24
    2af2:	90 58       	subi	r25, 0x80	; 128
    2af4:	93 30       	cpi	r25, 0x03	; 3
    2af6:	90 f5       	brcc	.+100    	; 0x2b5c <usb_process_request+0x33c>
void usb_get_status(void)
{
    uint8_t wIndex;
    uint8_t dummy;

   dummy    = Usb_read_byte();                 //!< dummy read
    2af8:	90 91 f1 00 	lds	r25, 0x00F1
   dummy    = Usb_read_byte();                 //!< dummy read
    2afc:	90 91 f1 00 	lds	r25, 0x00F1
   dummy++;
   wIndex = Usb_read_byte();
    2b00:	e0 91 f1 00 	lds	r30, 0x00F1

   switch(bmRequestType)
    2b04:	81 38       	cpi	r24, 0x81	; 129
    2b06:	11 f0       	breq	.+4      	; 0x2b0c <usb_process_request+0x2ec>
    2b08:	82 38       	cpi	r24, 0x82	; 130
    2b0a:	41 f0       	breq	.+16     	; 0x2b1c <usb_process_request+0x2fc>
   {
    case REQUEST_DEVICE_STATUS:    Usb_ack_receive_setup();
                                   Usb_write_byte(DEVICE_STATUS);
                                   break;

    case REQUEST_INTERFACE_STATUS: Usb_ack_receive_setup();
    2b0c:	80 91 e8 00 	lds	r24, 0x00E8
    2b10:	87 7f       	andi	r24, 0xF7	; 247
    2b12:	80 93 e8 00 	sts	0x00E8, r24
                                   Usb_write_byte(INTERFACE_STATUS);
    2b16:	10 92 f1 00 	sts	0x00F1, r1
    2b1a:	0c c0       	rjmp	.+24     	; 0x2b34 <usb_process_request+0x314>
                                   break;

    case REQUEST_ENDPOINT_STATUS:  Usb_ack_receive_setup();
    2b1c:	80 91 e8 00 	lds	r24, 0x00E8
    2b20:	87 7f       	andi	r24, 0xF7	; 247
    2b22:	80 93 e8 00 	sts	0x00E8, r24
                                   wIndex = wIndex & MSK_EP_DIR;
    2b26:	ef 77       	andi	r30, 0x7F	; 127
                                   Usb_write_byte(endpoint_status[wIndex]);
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	e4 5a       	subi	r30, 0xA4	; 164
    2b2c:	f3 4f       	sbci	r31, 0xF3	; 243
    2b2e:	80 81       	ld	r24, Z
    2b30:	80 93 f1 00 	sts	0x00F1, r24
                                   Usb_enable_stall_handshake();
                                   Usb_ack_receive_setup();
                                   return;
   }

   Usb_write_byte(0x00);
    2b34:	10 92 f1 00 	sts	0x00F1, r1
   Usb_send_control_in();
    2b38:	80 91 e8 00 	lds	r24, 0x00E8
    2b3c:	8e 7f       	andi	r24, 0xFE	; 254
    2b3e:	80 93 e8 00 	sts	0x00E8, r24

   while( !Is_usb_receive_out() );
    2b42:	80 91 e8 00 	lds	r24, 0x00E8
    2b46:	82 ff       	sbrs	r24, 2
    2b48:	fc cf       	rjmp	.-8      	; 0x2b42 <usb_process_request+0x322>
   Usb_ack_receive_out();
    2b4a:	80 91 e8 00 	lds	r24, 0x00E8
    2b4e:	8b 7f       	andi	r24, 0xFB	; 251
    2b50:	80 93 e8 00 	sts	0x00E8, r24
    2b54:	80 91 e8 00 	lds	r24, 0x00E8
    2b58:	8f 77       	andi	r24, 0x7F	; 127
    2b5a:	1d c0       	rjmp	.+58     	; 0x2b96 <usb_process_request+0x376>
         break;

    case GET_STATUS:
         if ((0x7F < bmRequestType) & (0x82 >= bmRequestType))
                                    { usb_get_status(); }
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
    2b5c:	60 e0       	ldi	r22, 0x00	; 0
    2b5e:	1f c0       	rjmp	.+62     	; 0x2b9e <usb_process_request+0x37e>
         break;

    case GET_INTERFACE:
	       if (bmRequestType == 0x81) { usb_get_interface(); }
    2b60:	81 38       	cpi	r24, 0x81	; 129
    2b62:	e1 f4       	brne	.+56     	; 0x2b9c <usb_process_request+0x37c>
* REQUIREMENTS:
*****************************************************************************/
void usb_get_interface (void)
{
  uint8_t dummy;
  dummy = Usb_read_byte();
    2b64:	80 91 f1 00 	lds	r24, 0x00F1
  dummy = Usb_read_byte();
    2b68:	80 91 f1 00 	lds	r24, 0x00F1
  
  dummy = Usb_read_byte(); // Read LSB
    2b6c:	80 91 f1 00 	lds	r24, 0x00F1
  wInterface = Usb_read_byte() << 8;
    2b70:	90 91 f1 00 	lds	r25, 0x00F1
    2b74:	39 2f       	mov	r19, r25
    2b76:	20 e0       	ldi	r18, 0x00	; 0
  wInterface |= dummy;
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	82 2b       	or	r24, r18
    2b7c:	93 2b       	or	r25, r19
    2b7e:	90 93 1e 11 	sts	0x111E, r25
    2b82:	80 93 1d 11 	sts	0x111D, r24
  
  Usb_enable_stall_handshake();
    2b86:	80 91 eb 00 	lds	r24, 0x00EB
    2b8a:	80 62       	ori	r24, 0x20	; 32
    2b8c:	80 93 eb 00 	sts	0x00EB, r24
  Usb_ack_receive_setup();
    2b90:	80 91 e8 00 	lds	r24, 0x00E8
    2b94:	87 7f       	andi	r24, 0xF7	; 247
    2b96:	80 93 e8 00 	sts	0x00E8, r24
    2b9a:	08 95       	ret
         else                       { usb_user_read_request(bmRequestType, bmRequest); }
         break;

    case GET_INTERFACE:
	       if (bmRequestType == 0x81) { usb_get_interface(); }
          else { usb_user_read_request(bmRequestType, bmRequest); }
    2b9c:	6a e0       	ldi	r22, 0x0A	; 10
    2b9e:	0e 94 be 13 	call	0x277c	; 0x277c <usb_user_read_request>
    2ba2:	08 95       	ret

    case SET_DESCRIPTOR:
    case SET_INTERFACE:
    case SYNCH_FRAME:
    default: //!< un-supported request => call to user read request
         if(usb_user_read_request(bmRequestType, bmRequest) == false)
    2ba4:	0e 94 be 13 	call	0x277c	; 0x277c <usb_user_read_request>
    2ba8:	88 23       	and	r24, r24
    2baa:	51 f4       	brne	.+20     	; 0x2bc0 <usb_process_request+0x3a0>
         {
            Usb_enable_stall_handshake();
    2bac:	80 91 eb 00 	lds	r24, 0x00EB
    2bb0:	80 62       	ori	r24, 0x20	; 32
    2bb2:	80 93 eb 00 	sts	0x00EB, r24
            Usb_ack_receive_setup();
    2bb6:	80 91 e8 00 	lds	r24, 0x00E8
    2bba:	87 7f       	andi	r24, 0xF7	; 247
    2bbc:	80 93 e8 00 	sts	0x00E8, r24
    2bc0:	08 95       	ret

00002bc2 <ieee802_15_4_pib_init>:
bool mac_i_am_coordinator;
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

void ieee802_15_4_pib_init(void) {
    mac_pib_macAssociationPermit          = macAssociationPermit_def;
    2bc2:	10 92 23 11 	sts	0x1123, r1
    mac_pib_macCoordExtendedAddress       = 0;
    2bc6:	10 92 36 11 	sts	0x1136, r1
    2bca:	10 92 37 11 	sts	0x1137, r1
    2bce:	10 92 38 11 	sts	0x1138, r1
    2bd2:	10 92 39 11 	sts	0x1139, r1
    2bd6:	10 92 3a 11 	sts	0x113A, r1
    2bda:	10 92 3b 11 	sts	0x113B, r1
    2bde:	10 92 3c 11 	sts	0x113C, r1
    2be2:	10 92 3d 11 	sts	0x113D, r1
    mac_pib_macCoordShortAddress          = macCoordShortAddress_def;
    2be6:	8f ef       	ldi	r24, 0xFF	; 255
    2be8:	9f ef       	ldi	r25, 0xFF	; 255
    2bea:	90 93 2b 11 	sts	0x112B, r25
    2bee:	80 93 2a 11 	sts	0x112A, r24
    mac_pib_macDSN                        = ((mac_pib_macExtendedAddress >> 8*0) & 0xFF);
    2bf2:	20 91 2e 11 	lds	r18, 0x112E
    2bf6:	20 93 26 11 	sts	0x1126, r18
    mac_pib_macPANId                      = macPANId_def;
    2bfa:	90 93 2d 11 	sts	0x112D, r25
    2bfe:	80 93 2c 11 	sts	0x112C, r24
    mac_pib_macShortAddress               = macShortAddress_def;
    2c02:	90 93 3f 11 	sts	0x113F, r25
    2c06:	80 93 3e 11 	sts	0x113E, r24
    mac_pib_macRxOnWhenIdle               = macRxOnWhenIdle_def;
    2c0a:	10 92 24 11 	sts	0x1124, r1
    mac_pib_macTransactionPersistenceTime = macTransactionPersistenceTime_def;
    2c0e:	84 ef       	ldi	r24, 0xF4	; 244
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	90 93 28 11 	sts	0x1128, r25
    2c16:	80 93 27 11 	sts	0x1127, r24
    mac_pib_current_channel               = 11;
    2c1a:	8b e0       	ldi	r24, 0x0B	; 11
    2c1c:	80 93 29 11 	sts	0x1129, r24
    mac_pib_macAssociationPermit          = macAssociationPermit_def;
    mac_i_am_coordinator                  = false;
    2c20:	10 92 25 11 	sts	0x1125, r1
}
    2c24:	08 95       	ret

00002c26 <ieee802_15_4_set_pan_id>:


uint8_t ieee802_15_4_set_pan_id(uint16_t pan_id) {
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	ec 01       	movw	r28, r24
    uint8_t set_pan_id_status = MAC_INVALID_PARAMETER;
    
    if (true != tat_wake_up()) {
    2c2c:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <tat_wake_up>
    2c30:	88 23       	and	r24, r24
    2c32:	49 f0       	breq	.+18     	; 0x2c46 <ieee802_15_4_set_pan_id+0x20>
    } else {
        mac_pib_macPANId = pan_id;
    2c34:	d0 93 2d 11 	sts	0x112D, r29
    2c38:	c0 93 2c 11 	sts	0x112C, r28
        tat_set_pan_id(mac_pib_macPANId);
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <tat_set_pan_id>
        set_pan_id_status = MAC_SUCCESS;
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	01 c0       	rjmp	.+2      	; 0x2c48 <ieee802_15_4_set_pan_id+0x22>
    mac_i_am_coordinator                  = false;
}


uint8_t ieee802_15_4_set_pan_id(uint16_t pan_id) {
    uint8_t set_pan_id_status = MAC_INVALID_PARAMETER;
    2c46:	88 ee       	ldi	r24, 0xE8	; 232
        tat_set_pan_id(mac_pib_macPANId);
        set_pan_id_status = MAC_SUCCESS;
    }
    
    return set_pan_id_status;
}
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	08 95       	ret

00002c4e <ieee802_15_4_set_short_address>:


uint8_t ieee802_15_4_set_short_address(uint16_t short_address) {
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	ec 01       	movw	r28, r24
    uint8_t set_short_address_status = MAC_INVALID_PARAMETER;
    
    if (true != tat_wake_up()) {
    2c54:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <tat_wake_up>
    2c58:	88 23       	and	r24, r24
    2c5a:	49 f0       	breq	.+18     	; 0x2c6e <ieee802_15_4_set_short_address+0x20>
    } else {
        mac_pib_macShortAddress = short_address;
    2c5c:	d0 93 3f 11 	sts	0x113F, r29
    2c60:	c0 93 3e 11 	sts	0x113E, r28
        tat_set_short_address(mac_pib_macShortAddress);
    2c64:	ce 01       	movw	r24, r28
    2c66:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <tat_set_short_address>
        set_short_address_status = MAC_SUCCESS;
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	01 c0       	rjmp	.+2      	; 0x2c70 <ieee802_15_4_set_short_address+0x22>
    return set_pan_id_status;
}


uint8_t ieee802_15_4_set_short_address(uint16_t short_address) {
    uint8_t set_short_address_status = MAC_INVALID_PARAMETER;
    2c6e:	88 ee       	ldi	r24, 0xE8	; 232
        tat_set_short_address(mac_pib_macShortAddress);
        set_short_address_status = MAC_SUCCESS;
    }
    
    return set_short_address_status;
}
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	08 95       	ret

00002c76 <ieee802_15_4_set_channel>:


uint8_t ieee802_15_4_set_channel(uint8_t channel) {
    2c76:	1f 93       	push	r17
    2c78:	18 2f       	mov	r17, r24
    uint8_t set_channel_status = MAC_INVALID_PARAMETER;
    
    if (true != tat_wake_up()) {
    2c7a:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <tat_wake_up>
    2c7e:	88 23       	and	r24, r24
    2c80:	49 f0       	breq	.+18     	; 0x2c94 <ieee802_15_4_set_channel+0x1e>
    } else if (true != tat_set_channel(channel)) {
    2c82:	81 2f       	mov	r24, r17
    2c84:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <tat_set_channel>
    2c88:	88 23       	and	r24, r24
    2c8a:	21 f0       	breq	.+8      	; 0x2c94 <ieee802_15_4_set_channel+0x1e>
    } else {
        mac_pib_current_channel = channel;
    2c8c:	10 93 29 11 	sts	0x1129, r17
        set_channel_status = MAC_SUCCESS;
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	01 c0       	rjmp	.+2      	; 0x2c96 <ieee802_15_4_set_channel+0x20>
    return set_short_address_status;
}


uint8_t ieee802_15_4_set_channel(uint8_t channel) {
    uint8_t set_channel_status = MAC_INVALID_PARAMETER;
    2c94:	88 ee       	ldi	r24, 0xE8	; 232
        mac_pib_current_channel = channel;
        set_channel_status = MAC_SUCCESS;
    }
    
    return set_channel_status;
}
    2c96:	1f 91       	pop	r17
    2c98:	08 95       	ret

00002c9a <ieee802_15_4_start_request>:
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

uint8_t ieee802_15_4_start_request(uint16_t pan_id, uint8_t channel, bool pan_coordinator) {
    2c9a:	1f 93       	push	r17
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <ieee802_15_4_start_request+0x8>
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	9c 01       	movw	r18, r24
    2ca8:	14 2f       	mov	r17, r20
    /* Check that the internal state is correct. */
    if ((IEEE_MAC_ASSOCIATED != IEEE802_15_4_GET_STATE()) && 
    2caa:	80 91 8d 01 	lds	r24, 0x018D
    2cae:	84 30       	cpi	r24, 0x04	; 4
    2cb0:	11 f0       	breq	.+4      	; 0x2cb6 <ieee802_15_4_start_request+0x1c>
    2cb2:	88 23       	and	r24, r24
    2cb4:	31 f5       	brne	.+76     	; 0x2d02 <ieee802_15_4_start_request+0x68>
        /* Jump to the local error handler. */
        goto ieee_start_error;
    }
    
    /* Perform sanity checks on all function parameters. */
    if (BROADCAST == pan_id) {
    2cb6:	8f ef       	ldi	r24, 0xFF	; 255
    2cb8:	2f 3f       	cpi	r18, 0xFF	; 255
    2cba:	38 07       	cpc	r19, r24
    2cbc:	11 f1       	breq	.+68     	; 0x2d02 <ieee802_15_4_start_request+0x68>
        /* Jump to the local error handler. */
        goto ieee_start_error;
    }
    
    
    if ((channel < MIN_CHANNEL) || (channel > MAX_CHANNEL)) {
    2cbe:	86 2f       	mov	r24, r22
    2cc0:	8b 50       	subi	r24, 0x0B	; 11
    2cc2:	80 31       	cpi	r24, 0x10	; 16
    2cc4:	f0 f4       	brcc	.+60     	; 0x2d02 <ieee802_15_4_start_request+0x68>
        
        /* Jump to the local error handler. */
        goto ieee_start_error;
    }
    
    if(MAC_SUCCESS != ieee802_15_4_set_pan_id(pan_id)) {
    2cc6:	c9 01       	movw	r24, r18
    2cc8:	6a 83       	std	Y+2, r22	; 0x02
    2cca:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ieee802_15_4_set_pan_id>
    2cce:	6a 81       	ldd	r22, Y+2	; 0x02
    2cd0:	88 23       	and	r24, r24
    2cd2:	b9 f4       	brne	.+46     	; 0x2d02 <ieee802_15_4_start_request+0x68>
                
        /* Jump to the local error handler. */
        goto ieee_start_error;
    } else if (true != tat_set_channel(channel)) {
    2cd4:	86 2f       	mov	r24, r22
    2cd6:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <tat_set_channel>
    2cda:	88 23       	and	r24, r24
    2cdc:	91 f0       	breq	.+36     	; 0x2d02 <ieee802_15_4_start_request+0x68>
                
        /* Jump to the local error handler. */
        goto ieee_start_error;
    } else {
        IEEE802_15_4_SET_I_AM_COORDINATOR(pan_coordinator);
    2cde:	10 93 25 11 	sts	0x1125, r17
        tat_set_pan_coordinator(pan_coordinator);
    2ce2:	81 2f       	mov	r24, r17
    2ce4:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <tat_set_pan_coordinator>
        
        /* For nonbeacon-enabled networks the macRxOnWhenIdle is set true
         * since the coordinator is always awake.
         */
        IEEE802_15_4_SET_RX_ON_WHEN_IDLE(true);
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	80 93 24 11 	sts	0x1124, r24
        
        /* Update the internal state to reflect that the node has successfully
         * been started as a cooridinator.
         */
        IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
    2cee:	8f b7       	in	r24, 0x3f	; 63
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	f8 94       	cli
    2cf4:	85 e0       	ldi	r24, 0x05	; 5
    2cf6:	80 93 8d 01 	sts	0x018D, r24
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	8f bf       	out	0x3f, r24	; 63
        return MAC_SUCCESS;
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	03 c0       	rjmp	.+6      	; 0x2d08 <ieee802_15_4_start_request+0x6e>
    
    /* Handle any error that occured during the primitive execution. */
    ieee_start_error:
    

    tat_go_to_sleep();
    2d02:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    
    return MAC_INVALID_PARAMETER;
    2d06:	88 ee       	ldi	r24, 0xE8	; 232
}
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	1f 91       	pop	r17
    2d12:	08 95       	ret

00002d14 <go_to_rx>:
    }
}


static void go_to_rx(void) {
    tat_reset();
    2d14:	0e 94 76 26 	call	0x4cec	; 0x4cec <tat_reset>
    (bool)tat_set_state(RX_AACK_ON);
    2d18:	86 e1       	ldi	r24, 0x16	; 22
    2d1a:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
}
    2d1e:	08 95       	ret

00002d20 <ieee802_15_4_init>:
static ieee802_15_4_meta_data_t frame_info;
/*================================= PROTOTYPES       =========================*/
/*! \brief Do a state transition to receive mode. */
static void go_to_rx(void);

bool ieee802_15_4_init(uint64_t ieee_address) {
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	0f 92       	push	r0
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    IEEE802_15_4_SET_STATE(IEEE_MAC_UNINITIALIZED);
    2d2a:	ef b7       	in	r30, 0x3f	; 63
    2d2c:	e9 83       	std	Y+1, r30	; 0x01
    2d2e:	f8 94       	cli
    2d30:	e1 e0       	ldi	r30, 0x01	; 1
    2d32:	e0 93 8d 01 	sts	0x018D, r30
    2d36:	e9 81       	ldd	r30, Y+1	; 0x01
    2d38:	ef bf       	out	0x3f, r30	; 63
    
    /* The macro must come before ieee802_15_4_reset is called. The macro
     * shall only be called here and never from "user space".
     */
    IEEE802_15_4_SET_EXTENDED_ADDRESS(ieee_address);
    2d3a:	20 93 2e 11 	sts	0x112E, r18
    2d3e:	30 93 2f 11 	sts	0x112F, r19
    2d42:	40 93 30 11 	sts	0x1130, r20
    2d46:	50 93 31 11 	sts	0x1131, r21
    2d4a:	60 93 32 11 	sts	0x1132, r22
    2d4e:	70 93 33 11 	sts	0x1133, r23
    2d52:	80 93 34 11 	sts	0x1134, r24
    2d56:	90 93 35 11 	sts	0x1135, r25
    
    /* Set all indication callbacks to NULL. */
    mcdi = NULL;
    2d5a:	10 92 09 0d 	sts	0x0D09, r1
    2d5e:	10 92 08 0d 	sts	0x0D08, r1
    mai  = NULL;
    2d62:	10 92 07 0d 	sts	0x0D07, r1
    2d66:	10 92 06 0d 	sts	0x0D06, r1
    mdi  = NULL;
    2d6a:	10 92 05 0d 	sts	0x0D05, r1
    2d6e:	10 92 04 0d 	sts	0x0D04, r1
    moi  = NULL;
    2d72:	10 92 03 0d 	sts	0x0D03, r1
    2d76:	10 92 02 0d 	sts	0x0D02, r1
    mcsi = NULL;
    2d7a:	10 92 01 0d 	sts	0x0D01, r1
    2d7e:	10 92 00 0d 	sts	0x0D00, r1
    mbni = NULL;
    2d82:	10 92 ff 0c 	sts	0x0CFF, r1
    2d86:	10 92 fe 0c 	sts	0x0CFE, r1
    
    bool init_status = false;
    if (true != ieee802_15_4_reset(true)) {
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	0e 94 b6 22 	call	0x456c	; 0x456c <ieee802_15_4_reset>
    2d90:	88 23       	and	r24, r24
    2d92:	49 f0       	breq	.+18     	; 0x2da6 <ieee802_15_4_init+0x86>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    2d94:	8f b7       	in	r24, 0x3f	; 63
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	f8 94       	cli
    2d9a:	10 92 8d 01 	sts	0x018D, r1
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	8f bf       	out	0x3f, r24	; 63
        init_status = true;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	01 c0       	rjmp	.+2      	; 0x2da8 <ieee802_15_4_init+0x88>
    mdi  = NULL;
    moi  = NULL;
    mcsi = NULL;
    mbni = NULL;
    
    bool init_status = false;
    2da6:	80 e0       	ldi	r24, 0x00	; 0
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
        init_status = true;
    }
    
    return init_status;
}
    2da8:	0f 90       	pop	r0
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <ieee802_15_4_deinit>:


void ieee802_15_4_deinit(void) {
    /* Turn off the radio transceiver. */
    tat_deinit();
    2db0:	0e 94 57 26 	call	0x4cae	; 0x4cae <tat_deinit>
    
    mcdi = NULL;
    2db4:	10 92 09 0d 	sts	0x0D09, r1
    2db8:	10 92 08 0d 	sts	0x0D08, r1
    mai  = NULL;
    2dbc:	10 92 07 0d 	sts	0x0D07, r1
    2dc0:	10 92 06 0d 	sts	0x0D06, r1
    mdi  = NULL;
    2dc4:	10 92 05 0d 	sts	0x0D05, r1
    2dc8:	10 92 04 0d 	sts	0x0D04, r1
    moi  = NULL;
    2dcc:	10 92 03 0d 	sts	0x0D03, r1
    2dd0:	10 92 02 0d 	sts	0x0D02, r1
    mcsi = NULL;
    2dd4:	10 92 01 0d 	sts	0x0D01, r1
    2dd8:	10 92 00 0d 	sts	0x0D00, r1
        
    /* Set the IEEE 802.15.4 MAC's internal state. */
    ieee802_15_4_state = IEEE_MAC_UNINITIALIZED;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	80 93 8d 01 	sts	0x018D, r24
}
    2de2:	08 95       	ret

00002de4 <ieee802_15_4_get_mcps_data_indication>:


ieee802_15_4_data_indication_t ieee802_15_4_get_mcps_data_indication(void) {    
    return mcdi;
}
    2de4:	80 91 08 0d 	lds	r24, 0x0D08
    2de8:	90 91 09 0d 	lds	r25, 0x0D09
    2dec:	08 95       	ret

00002dee <ieee802_15_4_clear_mcps_data_indication>:


void ieee802_15_4_clear_mcps_data_indication(void) {
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	0f 92       	push	r0
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2df8:	8f b7       	in	r24, 0x3f	; 63
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	f8 94       	cli
    mcdi = NULL;
    2dfe:	10 92 09 0d 	sts	0x0D09, r1
    2e02:	10 92 08 0d 	sts	0x0D08, r1
    LEAVE_CRITICAL_REGION();
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	8f bf       	out	0x3f, r24	; 63
}
    2e0a:	0f 90       	pop	r0
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <ieee802_15_4_set_mcps_data_indication>:


void ieee802_15_4_set_mcps_data_indication(ieee802_15_4_data_indication_t indication) {
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	0f 92       	push	r0
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2e1c:	2f b7       	in	r18, 0x3f	; 63
    2e1e:	29 83       	std	Y+1, r18	; 0x01
    2e20:	f8 94       	cli
    mcdi = indication;
    2e22:	90 93 09 0d 	sts	0x0D09, r25
    2e26:	80 93 08 0d 	sts	0x0D08, r24
    LEAVE_CRITICAL_REGION();
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	8f bf       	out	0x3f, r24	; 63
}
    2e2e:	0f 90       	pop	r0
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <ieee802_15_4_get_mlme_associate_indication>:


ieee802_15_4_associate_indication_t ieee802_15_4_get_mlme_associate_indication(void) {    
    return mai;
}
    2e36:	80 91 06 0d 	lds	r24, 0x0D06
    2e3a:	90 91 07 0d 	lds	r25, 0x0D07
    2e3e:	08 95       	ret

00002e40 <ieee802_15_4_clear_mlme_associate_indication>:


void ieee802_15_4_clear_mlme_associate_indication(void) {
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	0f 92       	push	r0
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2e4a:	8f b7       	in	r24, 0x3f	; 63
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	f8 94       	cli
    mai = NULL;
    2e50:	10 92 07 0d 	sts	0x0D07, r1
    2e54:	10 92 06 0d 	sts	0x0D06, r1
    LEAVE_CRITICAL_REGION();
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	8f bf       	out	0x3f, r24	; 63
}
    2e5c:	0f 90       	pop	r0
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <ieee802_15_4_set_mlme_associate_indication>:


void ieee802_15_4_set_mlme_associate_indication(ieee802_15_4_associate_indication_t indication) {
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	0f 92       	push	r0
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2e6e:	2f b7       	in	r18, 0x3f	; 63
    2e70:	29 83       	std	Y+1, r18	; 0x01
    2e72:	f8 94       	cli
    mai = indication;
    2e74:	90 93 07 0d 	sts	0x0D07, r25
    2e78:	80 93 06 0d 	sts	0x0D06, r24
    LEAVE_CRITICAL_REGION();
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	8f bf       	out	0x3f, r24	; 63
}
    2e80:	0f 90       	pop	r0
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	08 95       	ret

00002e88 <ieee802_15_4_get_mlme_disassociate_indication>:


ieee802_15_4_disassociate_indication_t ieee802_15_4_get_mlme_disassociate_indication(void) {    
    return mdi;
}
    2e88:	80 91 04 0d 	lds	r24, 0x0D04
    2e8c:	90 91 05 0d 	lds	r25, 0x0D05
    2e90:	08 95       	ret

00002e92 <ieee802_15_4_clear_mlme_disassociate_indication>:


void ieee802_15_4_clear_mlme_disassociate_indication(void) {
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	0f 92       	push	r0
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2e9c:	8f b7       	in	r24, 0x3f	; 63
    2e9e:	89 83       	std	Y+1, r24	; 0x01
    2ea0:	f8 94       	cli
    mdi = NULL;
    2ea2:	10 92 05 0d 	sts	0x0D05, r1
    2ea6:	10 92 04 0d 	sts	0x0D04, r1
    LEAVE_CRITICAL_REGION();
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	8f bf       	out	0x3f, r24	; 63
}
    2eae:	0f 90       	pop	r0
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <ieee802_15_4_set_mlme_disassociate_indication>:


void ieee802_15_4_set_mlme_disassociate_indication(ieee802_15_4_disassociate_indication_t indication) {
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	0f 92       	push	r0
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2ec0:	2f b7       	in	r18, 0x3f	; 63
    2ec2:	29 83       	std	Y+1, r18	; 0x01
    2ec4:	f8 94       	cli
    mdi = indication;
    2ec6:	90 93 05 0d 	sts	0x0D05, r25
    2eca:	80 93 04 0d 	sts	0x0D04, r24
    LEAVE_CRITICAL_REGION();
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	8f bf       	out	0x3f, r24	; 63
}
    2ed2:	0f 90       	pop	r0
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <ieee802_15_4_get_mlme_orphan_indication>:


ieee802_15_4_orphan_indication_t ieee802_15_4_get_mlme_orphan_indication(void) {    
    return moi;
}
    2eda:	80 91 02 0d 	lds	r24, 0x0D02
    2ede:	90 91 03 0d 	lds	r25, 0x0D03
    2ee2:	08 95       	ret

00002ee4 <ieee802_15_4_clear_mlme_orphan_indication>:


void ieee802_15_4_clear_mlme_orphan_indication(void) {
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	0f 92       	push	r0
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2eee:	8f b7       	in	r24, 0x3f	; 63
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	f8 94       	cli
    moi = NULL;
    2ef4:	10 92 03 0d 	sts	0x0D03, r1
    2ef8:	10 92 02 0d 	sts	0x0D02, r1
    LEAVE_CRITICAL_REGION();
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	8f bf       	out	0x3f, r24	; 63
}
    2f00:	0f 90       	pop	r0
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <ieee802_15_4_set_mlme_orphan_indication>:


void ieee802_15_4_set_mlme_orphan_indication(ieee802_15_4_orphan_indication_t indication) {
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	0f 92       	push	r0
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2f12:	2f b7       	in	r18, 0x3f	; 63
    2f14:	29 83       	std	Y+1, r18	; 0x01
    2f16:	f8 94       	cli
    moi = indication;
    2f18:	90 93 03 0d 	sts	0x0D03, r25
    2f1c:	80 93 02 0d 	sts	0x0D02, r24
    LEAVE_CRITICAL_REGION();
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	8f bf       	out	0x3f, r24	; 63
}
    2f24:	0f 90       	pop	r0
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <ieee802_15_4_get_mlme_comm_status_indication>:


ieee802_15_4_comm_status_indication_t ieee802_15_4_get_mlme_comm_status_indication(void) {    
    return mcsi;
}
    2f2c:	80 91 00 0d 	lds	r24, 0x0D00
    2f30:	90 91 01 0d 	lds	r25, 0x0D01
    2f34:	08 95       	ret

00002f36 <ieee802_15_4_clear_mlme_comm_status_indication>:


void ieee802_15_4_clear_mlme_comm_status_indication(void) {
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	0f 92       	push	r0
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2f40:	8f b7       	in	r24, 0x3f	; 63
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	f8 94       	cli
    mcsi = NULL;
    2f46:	10 92 01 0d 	sts	0x0D01, r1
    2f4a:	10 92 00 0d 	sts	0x0D00, r1
    LEAVE_CRITICAL_REGION();
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	8f bf       	out	0x3f, r24	; 63
}
    2f52:	0f 90       	pop	r0
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	08 95       	ret

00002f5a <ieee802_15_4_set_mlme_comm_status_indication>:


void ieee802_15_4_set_mlme_comm_status_indication(ieee802_15_4_comm_status_indication_t indication) {
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	0f 92       	push	r0
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2f64:	2f b7       	in	r18, 0x3f	; 63
    2f66:	29 83       	std	Y+1, r18	; 0x01
    2f68:	f8 94       	cli
    mcsi = indication;
    2f6a:	90 93 01 0d 	sts	0x0D01, r25
    2f6e:	80 93 00 0d 	sts	0x0D00, r24
    LEAVE_CRITICAL_REGION();
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	8f bf       	out	0x3f, r24	; 63
}
    2f76:	0f 90       	pop	r0
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <ieee802_15_4_get_mlme_beacon_notify_indication>:


ieee802_15_4_beacon_notify_indication_t ieee802_15_4_get_mlme_beacon_notify_indication(void) {    
    return mbni;
}
    2f7e:	80 91 fe 0c 	lds	r24, 0x0CFE
    2f82:	90 91 ff 0c 	lds	r25, 0x0CFF
    2f86:	08 95       	ret

00002f88 <ieee802_15_4_clear_mlme_beacon_notify_indication>:


void ieee802_15_4_clear_mlme_beacon_notify_indication(void) {
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	0f 92       	push	r0
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2f92:	8f b7       	in	r24, 0x3f	; 63
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	f8 94       	cli
    mbni = NULL;
    2f98:	10 92 ff 0c 	sts	0x0CFF, r1
    2f9c:	10 92 fe 0c 	sts	0x0CFE, r1
    LEAVE_CRITICAL_REGION();
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	8f bf       	out	0x3f, r24	; 63
}
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <ieee802_15_4_set_mlme_beacon_notify_indication>:


void ieee802_15_4_set_mlme_beacon_notify_indication(ieee802_15_4_beacon_notify_indication_t indication) {
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	0f 92       	push	r0
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    2fb6:	2f b7       	in	r18, 0x3f	; 63
    2fb8:	29 83       	std	Y+1, r18	; 0x01
    2fba:	f8 94       	cli
    mbni = indication;
    2fbc:	90 93 ff 0c 	sts	0x0CFF, r25
    2fc0:	80 93 fe 0c 	sts	0x0CFE, r24
    LEAVE_CRITICAL_REGION();
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	8f bf       	out	0x3f, r24	; 63
}
    2fc8:	0f 90       	pop	r0
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <ieee802_15_4_pd_data_indication>:


void ieee802_15_4_pd_data_indication(void *frame_length) {
    2fd0:	1f 93       	push	r17
     * length accespted by the TAT.
     */


    /* Extract frame length from the event parameter. */
    uint8_t length = *((uint8_t*)frame_length);
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	10 81       	ld	r17, Z
    
    /* Upload frame. Take the LQI field into count, so add two (frame length + LQI).*/
    if (true != tat_read_frame(length + 2, pd_frame_buffer)) {
    2fd6:	81 2f       	mov	r24, r17
    2fd8:	8e 5f       	subi	r24, 0xFE	; 254
    2fda:	60 e6       	ldi	r22, 0x60	; 96
    2fdc:	7c e0       	ldi	r23, 0x0C	; 12
    2fde:	0e 94 38 27 	call	0x4e70	; 0x4e70 <tat_read_frame>
    2fe2:	88 23       	and	r24, r24
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <ieee802_15_4_pd_data_indication+0x18>
    2fe6:	f0 c0       	rjmp	.+480    	; 0x31c8 <ieee802_15_4_pd_data_indication+0x1f8>
        go_to_rx();
        return;
    }
    
    /* Store LQI from the frame. */
    frame_info.lqi = pd_frame_buffer[length + 1];
    2fe8:	e1 2f       	mov	r30, r17
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	e0 5a       	subi	r30, 0xA0	; 160
    2fee:	f3 4f       	sbci	r31, 0xF3	; 243
    2ff0:	81 81       	ldd	r24, Z+1	; 0x01
    2ff2:	80 93 fd 0c 	sts	0x0CFD, r24
    
    // 2. Extract the FCF field. */
    uint16_t fcf = (pd_frame_buffer[1] << 8 * 0); // Read FCF LSB.
    2ff6:	80 91 61 0c 	lds	r24, 0x0C61
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    fcf         |= (pd_frame_buffer[2] << 8 * 1); // Read FCF MSB.
    2ffc:	30 91 62 0c 	lds	r19, 0x0C62
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	82 2b       	or	r24, r18
    3004:	93 2b       	or	r25, r19
    
    // 4. Check if this frame has security enabled. Not supported on MAC level.
    if (FCF_SECURITY_ENABLED == (fcf & FCF_SECURITY_ENABLED)) {
    3006:	83 fd       	sbrc	r24, 3
    3008:	df c0       	rjmp	.+446    	; 0x31c8 <ieee802_15_4_pd_data_indication+0x1f8>
        go_to_rx();
        return;
    }
    
    // 5. Get frame type and verify that it is supported.
    uint8_t frame_type = FCF_GET_FRAMETYPE(fcf);
    300a:	28 2f       	mov	r18, r24
    300c:	27 70       	andi	r18, 0x07	; 7
    if ((FCF_FRAMETYPE_DATA != frame_type) && 
    300e:	21 30       	cpi	r18, 0x01	; 1
    3010:	29 f0       	breq	.+10     	; 0x301c <ieee802_15_4_pd_data_indication+0x4c>
    3012:	23 30       	cpi	r18, 0x03	; 3
    3014:	19 f0       	breq	.+6      	; 0x301c <ieee802_15_4_pd_data_indication+0x4c>
        (FCF_FRAMETYPE_MAC_CMD != frame_type) &&
    3016:	22 23       	and	r18, r18
    3018:	09 f0       	breq	.+2      	; 0x301c <ieee802_15_4_pd_data_indication+0x4c>
    301a:	d6 c0       	rjmp	.+428    	; 0x31c8 <ieee802_15_4_pd_data_indication+0x1f8>
        (FCF_FRAMETYPE_BEACON != frame_type)) {
        go_to_rx();
        return;
    }
    
    frame_info.frame_type = frame_type;
    301c:	20 93 e1 0c 	sts	0x0CE1, r18
    
    // 6. Read the addressing mode used and check that it is valid.
    frame_info.dst_addr_mode = FCF_GET_DEST_ADDR_MODE(fcf);
    3020:	29 2f       	mov	r18, r25
    3022:	26 95       	lsr	r18
    3024:	26 95       	lsr	r18
    3026:	23 70       	andi	r18, 0x03	; 3
    3028:	20 93 e3 0c 	sts	0x0CE3, r18
    frame_info.src_addr_mode = FCF_GET_SOURCE_ADDR_MODE(fcf);
    302c:	49 2f       	mov	r20, r25
    302e:	42 95       	swap	r20
    3030:	46 95       	lsr	r20
    3032:	46 95       	lsr	r20
    3034:	43 70       	andi	r20, 0x03	; 3
    3036:	40 93 ee 0c 	sts	0x0CEE, r20
    if ((FCF_NO_ADDR == (frame_info.dst_addr_mode)) && 
    303a:	22 23       	and	r18, r18
    303c:	19 f4       	brne	.+6      	; 0x3044 <ieee802_15_4_pd_data_indication+0x74>
    303e:	44 23       	and	r20, r20
    3040:	09 f4       	brne	.+2      	; 0x3044 <ieee802_15_4_pd_data_indication+0x74>
    3042:	c2 c0       	rjmp	.+388    	; 0x31c8 <ieee802_15_4_pd_data_indication+0x1f8>
        return;
    }
    
    /* Extract sequence number. */
    uint8_t i = 3;
    frame_info.seq_nmbr = pd_frame_buffer[i];
    3044:	30 91 63 0c 	lds	r19, 0x0C63
    3048:	30 93 e2 0c 	sts	0x0CE2, r19
    i++;
    
    // 7. Extract Destination addressing fields.
    frame_info.dst_addr = 0;
    304c:	e6 ee       	ldi	r30, 0xE6	; 230
    304e:	fc e0       	ldi	r31, 0x0C	; 12
    3050:	10 92 e6 0c 	sts	0x0CE6, r1
    3054:	11 82       	std	Z+1, r1	; 0x01
    3056:	12 82       	std	Z+2, r1	; 0x02
    3058:	13 82       	std	Z+3, r1	; 0x03
    305a:	14 82       	std	Z+4, r1	; 0x04
    305c:	15 82       	std	Z+5, r1	; 0x05
    305e:	16 82       	std	Z+6, r1	; 0x06
    3060:	17 82       	std	Z+7, r1	; 0x07
    if (FCF_NO_ADDR == (frame_info.dst_addr_mode)) {
    3062:	22 23       	and	r18, r18
    3064:	d1 f1       	breq	.+116    	; 0x30da <ieee802_15_4_pd_data_indication+0x10a>
        // No destination address is only possible if this is a PAN Coordinator and
        // the received frame is a Data Request command. Or that the frame is a Beacon.
    } else if (FCF_SHORT_ADDR == (frame_info.dst_addr_mode)) {
    3066:	22 30       	cpi	r18, 0x02	; 2
    3068:	91 f4       	brne	.+36     	; 0x308e <ieee802_15_4_pd_data_indication+0xbe>
        memcpy((void *)(&(frame_info.dst_pan_id)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    306a:	20 91 64 0c 	lds	r18, 0x0C64
    306e:	30 91 65 0c 	lds	r19, 0x0C65
    3072:	30 93 e5 0c 	sts	0x0CE5, r19
    3076:	20 93 e4 0c 	sts	0x0CE4, r18
        i += sizeof(uint16_t);
        memcpy((void *)(&(frame_info.dst_addr)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    307a:	20 91 66 0c 	lds	r18, 0x0C66
    307e:	30 91 67 0c 	lds	r19, 0x0C67
    3082:	30 93 e7 0c 	sts	0x0CE7, r19
    3086:	20 93 e6 0c 	sts	0x0CE6, r18
        i += sizeof(uint16_t);
    308a:	28 e0       	ldi	r18, 0x08	; 8
    308c:	27 c0       	rjmp	.+78     	; 0x30dc <ieee802_15_4_pd_data_indication+0x10c>
    } else if (FCF_LONG_ADDR == (frame_info.dst_addr_mode)) {
    308e:	23 30       	cpi	r18, 0x03	; 3
    3090:	09 f0       	breq	.+2      	; 0x3094 <ieee802_15_4_pd_data_indication+0xc4>
    3092:	9a c0       	rjmp	.+308    	; 0x31c8 <ieee802_15_4_pd_data_indication+0x1f8>
        memcpy((void *)(&(frame_info.dst_pan_id)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    3094:	20 91 64 0c 	lds	r18, 0x0C64
    3098:	30 91 65 0c 	lds	r19, 0x0C65
    309c:	30 93 e5 0c 	sts	0x0CE5, r19
    30a0:	20 93 e4 0c 	sts	0x0CE4, r18
        i += sizeof(uint16_t);
        memcpy((void *)(&(frame_info.dst_addr)), (void *)(&pd_frame_buffer[i]), sizeof(uint64_t));
    30a4:	20 91 66 0c 	lds	r18, 0x0C66
    30a8:	20 93 e6 0c 	sts	0x0CE6, r18
    30ac:	20 91 67 0c 	lds	r18, 0x0C67
    30b0:	21 83       	std	Z+1, r18	; 0x01
    30b2:	20 91 68 0c 	lds	r18, 0x0C68
    30b6:	22 83       	std	Z+2, r18	; 0x02
    30b8:	20 91 69 0c 	lds	r18, 0x0C69
    30bc:	23 83       	std	Z+3, r18	; 0x03
    30be:	20 91 6a 0c 	lds	r18, 0x0C6A
    30c2:	24 83       	std	Z+4, r18	; 0x04
    30c4:	20 91 6b 0c 	lds	r18, 0x0C6B
    30c8:	25 83       	std	Z+5, r18	; 0x05
    30ca:	20 91 6c 0c 	lds	r18, 0x0C6C
    30ce:	26 83       	std	Z+6, r18	; 0x06
    30d0:	20 91 6d 0c 	lds	r18, 0x0C6D
    30d4:	27 83       	std	Z+7, r18	; 0x07
        i += sizeof(uint64_t);
    30d6:	2e e0       	ldi	r18, 0x0E	; 14
    30d8:	01 c0       	rjmp	.+2      	; 0x30dc <ieee802_15_4_pd_data_indication+0x10c>
    }
    
    /* Extract sequence number. */
    uint8_t i = 3;
    frame_info.seq_nmbr = pd_frame_buffer[i];
    i++;
    30da:	24 e0       	ldi	r18, 0x04	; 4
        go_to_rx();
        return;
    }
    
    // 8. Extract Source addressing fields.
    frame_info.src_addr = 0;
    30dc:	10 92 f1 0c 	sts	0x0CF1, r1
    30e0:	10 92 f2 0c 	sts	0x0CF2, r1
    30e4:	10 92 f3 0c 	sts	0x0CF3, r1
    30e8:	10 92 f4 0c 	sts	0x0CF4, r1
    30ec:	10 92 f5 0c 	sts	0x0CF5, r1
    30f0:	10 92 f6 0c 	sts	0x0CF6, r1
    30f4:	10 92 f7 0c 	sts	0x0CF7, r1
    30f8:	10 92 f8 0c 	sts	0x0CF8, r1
    if (FCF_NO_ADDR == (frame_info.src_addr_mode)) {
    30fc:	44 23       	and	r20, r20
    30fe:	b1 f1       	breq	.+108    	; 0x316c <ieee802_15_4_pd_data_indication+0x19c>
    } else {
        // Either a short or long address is available. Check for PAN_ID compression.
        if (FCF_INTRA_PAN != (fcf & FCF_INTRA_PAN)) {
    3100:	86 fd       	sbrc	r24, 6
    3102:	0b c0       	rjmp	.+22     	; 0x311a <ieee802_15_4_pd_data_indication+0x14a>
            memcpy((void *)(&(frame_info.src_pan_id)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    3104:	e2 2f       	mov	r30, r18
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	e0 5a       	subi	r30, 0xA0	; 160
    310a:	f3 4f       	sbci	r31, 0xF3	; 243
    310c:	80 81       	ld	r24, Z
    310e:	91 81       	ldd	r25, Z+1	; 0x01
    3110:	90 93 f0 0c 	sts	0x0CF0, r25
    3114:	80 93 ef 0c 	sts	0x0CEF, r24
            i += sizeof(uint16_t);
    3118:	2e 5f       	subi	r18, 0xFE	; 254
    311a:	e2 2f       	mov	r30, r18
    311c:	f0 e0       	ldi	r31, 0x00	; 0
        } // END: if (FCF_INTRA_PAN == (fcf & FCF_INTRA_PAN)) ...
        
        if (FCF_SHORT_ADDR == (frame_info.src_addr_mode)) {    
    311e:	42 30       	cpi	r20, 0x02	; 2
    3120:	51 f4       	brne	.+20     	; 0x3136 <ieee802_15_4_pd_data_indication+0x166>
            memcpy((void *)(&(frame_info.src_addr)), (void *)(&pd_frame_buffer[i]), sizeof(uint16_t));
    3122:	e0 5a       	subi	r30, 0xA0	; 160
    3124:	f3 4f       	sbci	r31, 0xF3	; 243
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	90 93 f2 0c 	sts	0x0CF2, r25
    312e:	80 93 f1 0c 	sts	0x0CF1, r24
            i += sizeof(uint16_t);
    3132:	2e 5f       	subi	r18, 0xFE	; 254
    3134:	1b c0       	rjmp	.+54     	; 0x316c <ieee802_15_4_pd_data_indication+0x19c>
        } else {
            memcpy((void *)(&(frame_info.src_addr)), (void *)(&pd_frame_buffer[i]), sizeof(uint64_t));
    3136:	e0 5a       	subi	r30, 0xA0	; 160
    3138:	f3 4f       	sbci	r31, 0xF3	; 243
    313a:	80 81       	ld	r24, Z
    313c:	80 93 f1 0c 	sts	0x0CF1, r24
    3140:	81 81       	ldd	r24, Z+1	; 0x01
    3142:	80 93 f2 0c 	sts	0x0CF2, r24
    3146:	82 81       	ldd	r24, Z+2	; 0x02
    3148:	80 93 f3 0c 	sts	0x0CF3, r24
    314c:	83 81       	ldd	r24, Z+3	; 0x03
    314e:	80 93 f4 0c 	sts	0x0CF4, r24
    3152:	84 81       	ldd	r24, Z+4	; 0x04
    3154:	80 93 f5 0c 	sts	0x0CF5, r24
    3158:	85 81       	ldd	r24, Z+5	; 0x05
    315a:	80 93 f6 0c 	sts	0x0CF6, r24
    315e:	86 81       	ldd	r24, Z+6	; 0x06
    3160:	80 93 f7 0c 	sts	0x0CF7, r24
    3164:	87 81       	ldd	r24, Z+7	; 0x07
    3166:	80 93 f8 0c 	sts	0x0CF8, r24
            i += sizeof(uint64_t);
    316a:	28 5f       	subi	r18, 0xF8	; 248
        }
    }
    
    // 9. Set the command type if applicable.
    if (FCF_FRAMETYPE_MAC_CMD == (frame_info.frame_type)) {
    316c:	e0 91 e1 0c 	lds	r30, 0x0CE1
    3170:	e3 30       	cpi	r30, 0x03	; 3
    3172:	49 f4       	brne	.+18     	; 0x3186 <ieee802_15_4_pd_data_indication+0x1b6>
        frame_info.cmd_type = pd_frame_buffer[i];
    3174:	a2 2f       	mov	r26, r18
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	a0 5a       	subi	r26, 0xA0	; 160
    317a:	b3 4f       	sbci	r27, 0xF3	; 243
    317c:	8c 91       	ld	r24, X
    317e:	80 93 f9 0c 	sts	0x0CF9, r24
        i++;
    3182:	2f 5f       	subi	r18, 0xFF	; 255
    3184:	02 c0       	rjmp	.+4      	; 0x318a <ieee802_15_4_pd_data_indication+0x1ba>
    } else {
        frame_info.cmd_type = 0;
    3186:	10 92 f9 0c 	sts	0x0CF9, r1
    }
    
    // 10. Set pointer to msdu and calculate msdu length.
    frame_info.msdu = &pd_frame_buffer[i];
    318a:	82 2f       	mov	r24, r18
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	80 5a       	subi	r24, 0xA0	; 160
    3190:	93 4f       	sbci	r25, 0xF3	; 243
    3192:	90 93 fb 0c 	sts	0x0CFB, r25
    3196:	80 93 fa 0c 	sts	0x0CFA, r24
    
    /* Decrement frame index so that msdu length calculation is correct. The decrement
     * by one is done since 'i' is always pointing to the start of the next field.
     */
    i--;
    319a:	20 95       	com	r18
    frame_info.msdu_length = length - i - CRC_SIZE;
    319c:	21 0f       	add	r18, r17
    319e:	20 93 fc 0c 	sts	0x0CFC, r18
    31a2:	e1 50       	subi	r30, 0x01	; 1
    31a4:	e3 30       	cpi	r30, 0x03	; 3
    31a6:	40 f4       	brcc	.+16     	; 0x31b8 <ieee802_15_4_pd_data_indication+0x1e8>
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	ee 0f       	add	r30, r30
    31ac:	ff 1f       	adc	r31, r31
    31ae:	e0 57       	subi	r30, 0x70	; 112
    31b0:	fe 4f       	sbci	r31, 0xFE	; 254
    31b2:	80 81       	ld	r24, Z
    31b4:	91 81       	ldd	r25, Z+1	; 0x01
    31b6:	02 c0       	rjmp	.+4      	; 0x31bc <ieee802_15_4_pd_data_indication+0x1ec>
    31b8:	86 e4       	ldi	r24, 0x46	; 70
    31ba:	9c e1       	ldi	r25, 0x1C	; 28
            event_handler = ieee802_15_4_mlme_beacon_indication;
        break;
    }
    
    /* Post the appropriate indication event, or free up the packet. */
    if (true != vrt_post_event(event_handler, ((void *)(&frame_info)))) {
    31bc:	61 ee       	ldi	r22, 0xE1	; 225
    31be:	7c e0       	ldi	r23, 0x0C	; 12
    31c0:	0e 94 85 29 	call	0x530a	; 0x530a <vrt_post_event>
    31c4:	88 23       	and	r24, r24
    31c6:	11 f4       	brne	.+4      	; 0x31cc <ieee802_15_4_pd_data_indication+0x1fc>
        go_to_rx();
    31c8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <go_to_rx>
    }
}
    31cc:	1f 91       	pop	r17
    31ce:	08 95       	ret

000031d0 <ieee802_15_4_send>:


bool ieee802_15_4_send(uint8_t length, uint8_t *data) {
    31d0:	1f 93       	push	r17
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	18 2f       	mov	r17, r24
    31d8:	eb 01       	movw	r28, r22
    /* Do state transition to TX_ARET_ON. */
    if (true != tat_wake_up()) {
    31da:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <tat_wake_up>
    31de:	88 23       	and	r24, r24
    31e0:	59 f0       	breq	.+22     	; 0x31f8 <ieee802_15_4_send+0x28>
    } else if (true != tat_set_state(TX_ARET_ON)) {
    31e2:	89 e1       	ldi	r24, 0x19	; 25
    31e4:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    31e8:	88 23       	and	r24, r24
    31ea:	31 f0       	breq	.+12     	; 0x31f8 <ieee802_15_4_send+0x28>
    } else {
        
        /* Send frame. */
        tat_send_frame(length, data);
    31ec:	81 2f       	mov	r24, r17
    31ee:	be 01       	movw	r22, r28
    31f0:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <tat_send_frame>
        return true;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	01 c0       	rjmp	.+2      	; 0x31fa <ieee802_15_4_send+0x2a>
    }
    
    return false;
    31f8:	80 e0       	ldi	r24, 0x00	; 0
}
    31fa:	df 91       	pop	r29
    31fc:	cf 91       	pop	r28
    31fe:	1f 91       	pop	r17
    3200:	08 95       	ret

00003202 <ieee802_15_4_send_ack_event_handler>:
    /* Frame has been sent and then ACK'ed. The radio transeiver will now have 
     * been taken to TRX_OFF. */
   
    uint8_t mac_state = IEEE802_15_4_GET_STATE();
    
    switch (mac_state) {
    3202:	20 91 8d 01 	lds	r18, 0x018D
    3206:	28 30       	cpi	r18, 0x08	; 8
    3208:	c1 f0       	breq	.+48     	; 0x323a <ieee802_15_4_send_ack_event_handler+0x38>
    320a:	29 30       	cpi	r18, 0x09	; 9
    320c:	38 f4       	brcc	.+14     	; 0x321c <ieee802_15_4_send_ack_event_handler+0x1a>
    320e:	23 30       	cpi	r18, 0x03	; 3
    3210:	89 f0       	breq	.+34     	; 0x3234 <ieee802_15_4_send_ack_event_handler+0x32>
    3212:	26 30       	cpi	r18, 0x06	; 6
    3214:	91 f0       	breq	.+36     	; 0x323a <ieee802_15_4_send_ack_event_handler+0x38>
    3216:	22 30       	cpi	r18, 0x02	; 2
    3218:	11 f5       	brne	.+68     	; 0x325e <ieee802_15_4_send_ack_event_handler+0x5c>
    321a:	1b c0       	rjmp	.+54     	; 0x3252 <ieee802_15_4_send_ack_event_handler+0x50>
    321c:	2d 30       	cpi	r18, 0x0D	; 13
    321e:	99 f0       	breq	.+38     	; 0x3246 <ieee802_15_4_send_ack_event_handler+0x44>
    3220:	2e 30       	cpi	r18, 0x0E	; 14
    3222:	18 f4       	brcc	.+6      	; 0x322a <ieee802_15_4_send_ack_event_handler+0x28>
    3224:	2b 30       	cpi	r18, 0x0B	; 11
    3226:	d9 f4       	brne	.+54     	; 0x325e <ieee802_15_4_send_ack_event_handler+0x5c>
    3228:	0b c0       	rjmp	.+22     	; 0x3240 <ieee802_15_4_send_ack_event_handler+0x3e>
    322a:	2e 30       	cpi	r18, 0x0E	; 14
    322c:	79 f0       	breq	.+30     	; 0x324c <ieee802_15_4_send_ack_event_handler+0x4a>
    322e:	2f 30       	cpi	r18, 0x0F	; 15
    3230:	b1 f4       	brne	.+44     	; 0x325e <ieee802_15_4_send_ack_event_handler+0x5c>
    3232:	12 c0       	rjmp	.+36     	; 0x3258 <ieee802_15_4_send_ack_event_handler+0x56>
        case IEEE_MAC_TX_WAITING_ACK:
            ieee802_15_4_data_process_ack(tx_status);
    3234:	0e 94 25 20 	call	0x404a	; 0x404a <ieee802_15_4_data_process_ack>
        break;
    3238:	08 95       	ret
        
        case IEEE_MAC_WAITING_ASSOCIATION_REQUEST_ACK:
        case IEEE_MAC_WAITING_DATA_REQUEST_ACK:
            ieee802_15_4_associate_process_ack(tx_status);
    323a:	0e 94 b7 1b 	call	0x376e	; 0x376e <ieee802_15_4_associate_process_ack>
        break;
    323e:	08 95       	ret
        
        case IEEE_MAC_WAITING_ASSOCIATE_RESPONSE_ACK:
            ieee802_15_4_associate_response_process_ack(tx_status);
    3240:	0e 94 26 1c 	call	0x384c	; 0x384c <ieee802_15_4_associate_response_process_ack>
        break;
    3244:	08 95       	ret
        
        case IEEE_MAC_DISASSOCIATE_WAITING_ACK:
            ieee802_15_4_disassociate_process_ack(tx_status);
    3246:	0e 94 c2 21 	call	0x4384	; 0x4384 <ieee802_15_4_disassociate_process_ack>
        break;
    324a:	08 95       	ret
        
        case IEEE_MAC_WAITING_FOR_COORD_REALIGN_ACK:
            ieee802_15_4_coord_realign_process_ack(tx_status);
    324c:	0e 94 86 22 	call	0x450c	; 0x450c <ieee802_15_4_coord_realign_process_ack>
        break;
    3250:	08 95       	ret
        
        case IEEE_MAC_BUSY_SCANNING:
            ieee802_15_4_scan_process_ack(tx_status);
    3252:	0e 94 e6 24 	call	0x49cc	; 0x49cc <ieee802_15_4_scan_process_ack>
        break;
    3256:	08 95       	ret
        
        case IEEE_MAC_WAITING_BEACON_ACK:
            ieee802_15_4_process_beacon_ack(tx_status);
    3258:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <ieee802_15_4_process_beacon_ack>
        break;
    325c:	08 95       	ret
        
        default:
            /* Return to RX mode if the device is set to do so. */
            if (true == IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    325e:	80 91 24 11 	lds	r24, 0x1124
    3262:	88 23       	and	r24, r24
    3264:	19 f0       	breq	.+6      	; 0x326c <ieee802_15_4_send_ack_event_handler+0x6a>
                go_to_rx();
    3266:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <go_to_rx>
    326a:	08 95       	ret
            } else {
                tat_go_to_sleep();
    326c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    3270:	08 95       	ret

00003272 <send_comm_status_indication>:
    
    send_comm_status_indication(mcsi_status);  
}


static void send_comm_status_indication(uint8_t status) {
    3272:	1f 93       	push	r17
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	0f 92       	push	r0
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	18 2f       	mov	r17, r24
    ieee802_15_4_comm_status_indication_t msci_callback = ieee802_15_4_get_mlme_comm_status_indication();
    3280:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <ieee802_15_4_get_mlme_comm_status_indication>
    3284:	fc 01       	movw	r30, r24
    
    if (NULL == msci_callback) { return; }
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	91 f0       	breq	.+36     	; 0x32ae <send_comm_status_indication+0x3c>
    
    mcsi.status = status;
    328a:	10 93 1e 0d 	sts	0x0D1E, r17
    
    /* Execute callback. */
    msci_callback(&mcsi);
    328e:	8a e0       	ldi	r24, 0x0A	; 10
    3290:	9d e0       	ldi	r25, 0x0D	; 13
    3292:	09 95       	icall
    
    /* Ensure that the Coordinator is taken back to RX_AACK_ON state. */
    tat_reset();
    3294:	0e 94 76 26 	call	0x4cec	; 0x4cec <tat_reset>
    (bool)tat_set_state(RX_AACK_ON);
    3298:	86 e1       	ldi	r24, 0x16	; 22
    329a:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
    329e:	8f b7       	in	r24, 0x3f	; 63
    32a0:	89 83       	std	Y+1, r24	; 0x01
    32a2:	f8 94       	cli
    32a4:	85 e0       	ldi	r24, 0x05	; 5
    32a6:	80 93 8d 01 	sts	0x018D, r24
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	8f bf       	out	0x3f, r24	; 63
}
    32ae:	0f 90       	pop	r0
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	1f 91       	pop	r17
    32b6:	08 95       	ret

000032b8 <ieee802_15_4_associate_request>:
 *  \param[in] status Status that the MLME_COMM_STATUS.indication will be sent with.
 */
static void send_comm_status_indication(uint8_t status);


bool ieee802_15_4_associate_request(mlme_associate_req_t *mar) {
    32b8:	0f 93       	push	r16
    32ba:	1f 93       	push	r17
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <ieee802_15_4_associate_request+0xa>
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	8c 01       	movw	r16, r24
    /* Check that the device is in the correct state. */
    if (IEEE_MAC_IDLE != IEEE802_15_4_GET_STATE()) { return false; }
    32c8:	80 91 8d 01 	lds	r24, 0x018D
    32cc:	88 23       	and	r24, r24
    32ce:	09 f0       	breq	.+2      	; 0x32d2 <ieee802_15_4_associate_request+0x1a>
    32d0:	e7 c0       	rjmp	.+462    	; 0x34a0 <ieee802_15_4_associate_request+0x1e8>
    
    /* Perform sanity check on all function parameters. */
    if (NULL == mar) { return false; }
    32d2:	01 15       	cp	r16, r1
    32d4:	11 05       	cpc	r17, r1
    32d6:	09 f4       	brne	.+2      	; 0x32da <ieee802_15_4_associate_request+0x22>
    32d8:	e3 c0       	rjmp	.+454    	; 0x34a0 <ieee802_15_4_associate_request+0x1e8>
    if (NULL == (mar->mlme_associate_confirm)) { return false; }    
    32da:	d8 01       	movw	r26, r16
    32dc:	1d 96       	adiw	r26, 0x0d	; 13
    32de:	8d 91       	ld	r24, X+
    32e0:	9c 91       	ld	r25, X
    32e2:	1e 97       	sbiw	r26, 0x0e	; 14
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	09 f4       	brne	.+2      	; 0x32ea <ieee802_15_4_associate_request+0x32>
    32e8:	db c0       	rjmp	.+438    	; 0x34a0 <ieee802_15_4_associate_request+0x1e8>
    
    /* Store confirm callback and storage for confirm parameters. */
    confirm_ptr = &(mar->mac);
    32ea:	98 01       	movw	r18, r16
    32ec:	21 5f       	subi	r18, 0xF1	; 241
    32ee:	3f 4f       	sbci	r19, 0xFF	; 255
    32f0:	30 93 3b 0d 	sts	0x0D3B, r19
    32f4:	20 93 3a 0d 	sts	0x0D3A, r18
    mlme_associate_confirm = mar->mlme_associate_confirm;
    32f8:	90 93 3d 0d 	sts	0x0D3D, r25
    32fc:	80 93 3c 0d 	sts	0x0D3C, r24
    
    uint8_t channel = mar->LogicalChannel;
    if ((channel < MIN_CHANNEL) || (channel > MAX_CHANNEL)) { return false; }
    3300:	8c 91       	ld	r24, X
    3302:	8b 50       	subi	r24, 0x0B	; 11
    3304:	80 31       	cpi	r24, 0x10	; 16
    3306:	08 f0       	brcs	.+2      	; 0x330a <ieee802_15_4_associate_request+0x52>
    3308:	cb c0       	rjmp	.+406    	; 0x34a0 <ieee802_15_4_associate_request+0x1e8>
    
    if (BROADCAST == (mar->CoordPANId))  { return false; }
    330a:	12 96       	adiw	r26, 0x02	; 2
    330c:	8d 91       	ld	r24, X+
    330e:	9c 91       	ld	r25, X
    3310:	13 97       	sbiw	r26, 0x03	; 3
    3312:	bf ef       	ldi	r27, 0xFF	; 255
    3314:	8f 3f       	cpi	r24, 0xFF	; 255
    3316:	9b 07       	cpc	r25, r27
    3318:	09 f4       	brne	.+2      	; 0x331c <ieee802_15_4_associate_request+0x64>
    331a:	c2 c0       	rjmp	.+388    	; 0x34a0 <ieee802_15_4_associate_request+0x1e8>
    
    uint8_t addr_mode = mar->CoordAddrMode;
    331c:	f8 01       	movw	r30, r16
    331e:	21 81       	ldd	r18, Z+1	; 0x01
    
    if ((FCF_SHORT_ADDR != addr_mode) && (FCF_LONG_ADDR != addr_mode)) { return false; }
    3320:	82 2f       	mov	r24, r18
    3322:	82 50       	subi	r24, 0x02	; 2
    3324:	82 30       	cpi	r24, 0x02	; 2
    3326:	08 f0       	brcs	.+2      	; 0x332a <ieee802_15_4_associate_request+0x72>
    3328:	bb c0       	rjmp	.+374    	; 0x34a0 <ieee802_15_4_associate_request+0x1e8>
    
    /* 1. Build FCF. */
    uint8_t index = 0;
    uint16_t fcf;
    
    if (FCF_SHORT_ADDR == addr_mode) {
    332a:	22 30       	cpi	r18, 0x02	; 2
    332c:	49 f4       	brne	.+18     	; 0x3340 <ieee802_15_4_associate_request+0x88>
        IEEE802_15_4_SET_COORD_SHORT_ADDRESS((mar->CoordAddress));
    332e:	84 81       	ldd	r24, Z+4	; 0x04
    3330:	95 81       	ldd	r25, Z+5	; 0x05
    3332:	90 93 2b 11 	sts	0x112B, r25
    3336:	80 93 2a 11 	sts	0x112A, r24
        fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) | FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR) |
    333a:	83 e2       	ldi	r24, 0x23	; 35
    333c:	98 ec       	ldi	r25, 0xC8	; 200
    333e:	2b c0       	rjmp	.+86     	; 0x3396 <ieee802_15_4_associate_request+0xde>
              FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR) | FCF_ACK_REQUEST;
    } else {
        memcpy((void *)(&(IEEE802_15_4_GET_COORD_EXTENDED_ADDRESS())), (void *)(&(mar->CoordAddress)), sizeof(uint64_t));
    3340:	d8 01       	movw	r26, r16
    3342:	14 96       	adiw	r26, 0x04	; 4
    3344:	8c 91       	ld	r24, X
    3346:	14 97       	sbiw	r26, 0x04	; 4
    3348:	80 93 36 11 	sts	0x1136, r24
    334c:	15 96       	adiw	r26, 0x05	; 5
    334e:	8c 91       	ld	r24, X
    3350:	15 97       	sbiw	r26, 0x05	; 5
    3352:	80 93 37 11 	sts	0x1137, r24
    3356:	16 96       	adiw	r26, 0x06	; 6
    3358:	8c 91       	ld	r24, X
    335a:	16 97       	sbiw	r26, 0x06	; 6
    335c:	80 93 38 11 	sts	0x1138, r24
    3360:	17 96       	adiw	r26, 0x07	; 7
    3362:	8c 91       	ld	r24, X
    3364:	17 97       	sbiw	r26, 0x07	; 7
    3366:	80 93 39 11 	sts	0x1139, r24
    336a:	18 96       	adiw	r26, 0x08	; 8
    336c:	8c 91       	ld	r24, X
    336e:	18 97       	sbiw	r26, 0x08	; 8
    3370:	80 93 3a 11 	sts	0x113A, r24
    3374:	19 96       	adiw	r26, 0x09	; 9
    3376:	8c 91       	ld	r24, X
    3378:	19 97       	sbiw	r26, 0x09	; 9
    337a:	80 93 3b 11 	sts	0x113B, r24
    337e:	1a 96       	adiw	r26, 0x0a	; 10
    3380:	8c 91       	ld	r24, X
    3382:	1a 97       	sbiw	r26, 0x0a	; 10
    3384:	80 93 3c 11 	sts	0x113C, r24
    3388:	1b 96       	adiw	r26, 0x0b	; 11
    338a:	8c 91       	ld	r24, X
    338c:	1b 97       	sbiw	r26, 0x0b	; 11
    338e:	80 93 3d 11 	sts	0x113D, r24
        
        fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) | FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR) |
    3392:	83 e2       	ldi	r24, 0x23	; 35
    3394:	9c ec       	ldi	r25, 0xCC	; 204
              FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR) | FCF_ACK_REQUEST;
    }
    
    // Add FCF fields.
    association_request[index++] = ((fcf >> 8*0) & 0xFF);
    3396:	33 e2       	ldi	r19, 0x23	; 35
    3398:	30 93 68 11 	sts	0x1168, r19
    association_request[index++] = ((fcf >> 8*1) & 0xFF);
    339c:	90 93 69 11 	sts	0x1169, r25

    /* 2. Add farme sequence number. */
    association_request[index++] = IEEE802_15_4_GET_DSN();
    33a0:	80 91 26 11 	lds	r24, 0x1126
    33a4:	80 93 6a 11 	sts	0x116A, r24
    33a8:	8f 5f       	subi	r24, 0xFF	; 255
    33aa:	80 93 26 11 	sts	0x1126, r24

    /* 3. Build Address Fields. */
    memcpy((void *)(&association_request[index]), (void *)(&(mar->CoordPANId)),sizeof(uint16_t));
    33ae:	f8 01       	movw	r30, r16
    33b0:	82 81       	ldd	r24, Z+2	; 0x02
    33b2:	93 81       	ldd	r25, Z+3	; 0x03
    33b4:	90 93 6c 11 	sts	0x116C, r25
    33b8:	80 93 6b 11 	sts	0x116B, r24
    index += sizeof(uint16_t);
    
    // Build the destination address.
    if (FCF_SHORT_ADDR == addr_mode) {
    33bc:	22 30       	cpi	r18, 0x02	; 2
    33be:	41 f4       	brne	.+16     	; 0x33d0 <ieee802_15_4_associate_request+0x118>
        memcpy((void *)(&association_request[index]), (void *)(&(mar->CoordAddress)), sizeof(uint16_t));
    33c0:	84 81       	ldd	r24, Z+4	; 0x04
    33c2:	95 81       	ldd	r25, Z+5	; 0x05
    33c4:	90 93 6e 11 	sts	0x116E, r25
    33c8:	80 93 6d 11 	sts	0x116D, r24
        index += sizeof(uint16_t);
    33cc:	27 e0       	ldi	r18, 0x07	; 7
    33ce:	0a c0       	rjmp	.+20     	; 0x33e4 <ieee802_15_4_associate_request+0x12c>
    } else {
        memcpy((void *)(&association_request[index]), (void *)(&(mar->CoordAddress)), sizeof(uint64_t));
    33d0:	ad e6       	ldi	r26, 0x6D	; 109
    33d2:	b1 e1       	ldi	r27, 0x11	; 17
    33d4:	f8 01       	movw	r30, r16
    33d6:	34 96       	adiw	r30, 0x04	; 4
    33d8:	88 e0       	ldi	r24, 0x08	; 8
    33da:	01 90       	ld	r0, Z+
    33dc:	0d 92       	st	X+, r0
    33de:	81 50       	subi	r24, 0x01	; 1
    33e0:	e1 f7       	brne	.-8      	; 0x33da <ieee802_15_4_associate_request+0x122>
        index += sizeof(uint64_t);
    33e2:	2d e0       	ldi	r18, 0x0D	; 13
    }

    // Source PAN ID equals broadcast (0xFFFF) PAN ID for this message.
    association_request[index++] = 0xFF;
    33e4:	e2 2f       	mov	r30, r18
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	e8 59       	subi	r30, 0x98	; 152
    33ea:	fe 4e       	sbci	r31, 0xEE	; 238
    33ec:	8f ef       	ldi	r24, 0xFF	; 255
    33ee:	80 83       	st	Z, r24
    33f0:	e2 2f       	mov	r30, r18
    33f2:	ef 5f       	subi	r30, 0xFF	; 255
    association_request[index++] = 0xFF;
    33f4:	ae 2f       	mov	r26, r30
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	a8 59       	subi	r26, 0x98	; 152
    33fa:	be 4e       	sbci	r27, 0xEE	; 238
    33fc:	8c 93       	st	X, r24
    33fe:	ef 5f       	subi	r30, 0xFF	; 255

    // Build the source address.
    memcpy((void *)(&association_request[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	e8 59       	subi	r30, 0x98	; 152
    3404:	fe 4e       	sbci	r31, 0xEE	; 238
    3406:	80 91 2e 11 	lds	r24, 0x112E
    340a:	80 83       	st	Z, r24
    340c:	80 91 2f 11 	lds	r24, 0x112F
    3410:	81 83       	std	Z+1, r24	; 0x01
    3412:	80 91 30 11 	lds	r24, 0x1130
    3416:	82 83       	std	Z+2, r24	; 0x02
    3418:	80 91 31 11 	lds	r24, 0x1131
    341c:	83 83       	std	Z+3, r24	; 0x03
    341e:	80 91 32 11 	lds	r24, 0x1132
    3422:	84 83       	std	Z+4, r24	; 0x04
    3424:	80 91 33 11 	lds	r24, 0x1133
    3428:	85 83       	std	Z+5, r24	; 0x05
    342a:	80 91 34 11 	lds	r24, 0x1134
    342e:	86 83       	std	Z+6, r24	; 0x06
    3430:	80 91 35 11 	lds	r24, 0x1135
    3434:	87 83       	std	Z+7, r24	; 0x07
    index += sizeof(uint64_t);
    3436:	e2 2f       	mov	r30, r18
    3438:	e6 5f       	subi	r30, 0xF6	; 246

    /* 4. Build the command frame id. */
    association_request[index++] = ASSOCIATIONREQUEST;
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	e8 59       	subi	r30, 0x98	; 152
    343e:	fe 4e       	sbci	r31, 0xEE	; 238
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	80 83       	st	Z, r24
    3444:	e2 2f       	mov	r30, r18
    3446:	e5 5f       	subi	r30, 0xF5	; 245

    /* 5. Build the capability info. */
    association_request[index++] = mar->CapabilityInformation;
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	e8 59       	subi	r30, 0x98	; 152
    344c:	fe 4e       	sbci	r31, 0xEE	; 238
    344e:	d8 01       	movw	r26, r16
    3450:	1c 96       	adiw	r26, 0x0c	; 12
    3452:	8c 91       	ld	r24, X
    3454:	1c 97       	sbiw	r26, 0x0c	; 12
    3456:	80 83       	st	Z, r24

    /* 7. Add dummy bytes in crc field. */
    index += 2;
    
    /* 8. Set necessary parameters and finally send the frame. */
    if ((MAC_SUCCESS != ieee802_15_4_set_pan_id(mar->CoordPANId))) {
    3458:	12 96       	adiw	r26, 0x02	; 2
    345a:	8d 91       	ld	r24, X+
    345c:	9c 91       	ld	r25, X
    345e:	13 97       	sbiw	r26, 0x03	; 3
    3460:	2a 83       	std	Y+2, r18	; 0x02
    3462:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ieee802_15_4_set_pan_id>
    3466:	88 23       	and	r24, r24
    3468:	c9 f4       	brne	.+50     	; 0x349c <ieee802_15_4_associate_request+0x1e4>
        goto association_request_error;
    } else if (true != tat_set_channel(mar->LogicalChannel)) {
    346a:	f8 01       	movw	r30, r16
    346c:	80 81       	ld	r24, Z
    346e:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <tat_set_channel>
    3472:	2a 81       	ldd	r18, Y+2	; 0x02
    3474:	88 23       	and	r24, r24
    3476:	91 f0       	breq	.+36     	; 0x349c <ieee802_15_4_associate_request+0x1e4>
        goto association_request_error;
    } else if (true != ieee802_15_4_send(index, association_request)) {
    3478:	82 2f       	mov	r24, r18
    347a:	82 5f       	subi	r24, 0xF2	; 242
    347c:	68 e6       	ldi	r22, 0x68	; 104
    347e:	71 e1       	ldi	r23, 0x11	; 17
    3480:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <ieee802_15_4_send>
    3484:	88 23       	and	r24, r24
    3486:	51 f0       	breq	.+20     	; 0x349c <ieee802_15_4_associate_request+0x1e4>
        goto association_request_error;
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_ASSOCIATION_REQUEST_ACK);
    3488:	8f b7       	in	r24, 0x3f	; 63
    348a:	89 83       	std	Y+1, r24	; 0x01
    348c:	f8 94       	cli
    348e:	86 e0       	ldi	r24, 0x06	; 6
    3490:	80 93 8d 01 	sts	0x018D, r24
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	8f bf       	out	0x3f, r24	; 63
        return true;
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	03 c0       	rjmp	.+6      	; 0x34a2 <ieee802_15_4_associate_request+0x1ea>
    
    /* Do error handling for the association request: Go to SLEEP. */
    association_request_error:
    
    
    tat_go_to_sleep();
    349c:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    
    if (BROADCAST == (mar->CoordPANId))  { return false; }
    
    uint8_t addr_mode = mar->CoordAddrMode;
    
    if ((FCF_SHORT_ADDR != addr_mode) && (FCF_LONG_ADDR != addr_mode)) { return false; }
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    
    
    tat_go_to_sleep();
    
    return false;
}
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	1f 91       	pop	r17
    34ac:	0f 91       	pop	r16
    34ae:	08 95       	ret

000034b0 <issue_associate_confirm>:
 *
 *  \param[in] status Status of the association process.
 *  \param[in] short_addr Short address the node shall operate with. 0xFFFF
 *                        indicates an error during the association process.
 */
void issue_associate_confirm(uint8_t status, uint16_t short_addr) {
    34b0:	0f 93       	push	r16
    34b2:	1f 93       	push	r17
    34b4:	df 93       	push	r29
    34b6:	cf 93       	push	r28
    34b8:	00 d0       	rcall	.+0      	; 0x34ba <issue_associate_confirm+0xa>
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
    34be:	8b 01       	movw	r16, r22
    /* Set internal state. */
    if (MAC_SUCCESS != status) {
    34c0:	88 23       	and	r24, r24
    34c2:	31 f0       	breq	.+12     	; 0x34d0 <issue_associate_confirm+0x20>
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    34c4:	9f b7       	in	r25, 0x3f	; 63
    34c6:	99 83       	std	Y+1, r25	; 0x01
    34c8:	f8 94       	cli
    34ca:	10 92 8d 01 	sts	0x018D, r1
    34ce:	06 c0       	rjmp	.+12     	; 0x34dc <issue_associate_confirm+0x2c>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_ASSOCIATED);
    34d0:	9f b7       	in	r25, 0x3f	; 63
    34d2:	99 83       	std	Y+1, r25	; 0x01
    34d4:	f8 94       	cli
    34d6:	94 e0       	ldi	r25, 0x04	; 4
    34d8:	90 93 8d 01 	sts	0x018D, r25
    34dc:	99 81       	ldd	r25, Y+1	; 0x01
    34de:	9f bf       	out	0x3f, r25	; 63
    }
    
    /* Now, put the radio transceiver to SLEEP. */
    tat_go_to_sleep();
    34e0:	8a 83       	std	Y+2, r24	; 0x02
    34e2:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    
    /* Build the confirm message and issue the associated callback. */
    confirm_ptr->status = status;
    34e6:	a0 91 3a 0d 	lds	r26, 0x0D3A
    34ea:	b0 91 3b 0d 	lds	r27, 0x0D3B
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	12 96       	adiw	r26, 0x02	; 2
    34f2:	8c 93       	st	X, r24
    34f4:	12 97       	sbiw	r26, 0x02	; 2
    confirm_ptr->AssocShortAddress = short_addr;
    34f6:	11 96       	adiw	r26, 0x01	; 1
    34f8:	1c 93       	st	X, r17
    34fa:	0e 93       	st	-X, r16
    
    mlme_associate_confirm(confirm_ptr);
    34fc:	e0 91 3c 0d 	lds	r30, 0x0D3C
    3500:	f0 91 3d 0d 	lds	r31, 0x0D3D
    3504:	cd 01       	movw	r24, r26
    3506:	09 95       	icall
}
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	cf 91       	pop	r28
    350e:	df 91       	pop	r29
    3510:	1f 91       	pop	r17
    3512:	0f 91       	pop	r16
    3514:	08 95       	ret

00003516 <ieee802_15_4_associate_process_timeout>:
    vrt_timer_stop_high_pri_delay();
    issue_associate_confirm(tx_status, 0xFFFF);
}


void ieee802_15_4_associate_process_timeout(void *null) {
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	0f 92       	push	r0
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    if (IEEE_MAC_WAITING_TO_SEND_DATA_REQUEST == IEEE802_15_4_GET_STATE()) {
    3520:	80 91 8d 01 	lds	r24, 0x018D
    3524:	87 30       	cpi	r24, 0x07	; 7
    3526:	09 f0       	breq	.+2      	; 0x352a <ieee802_15_4_associate_process_timeout+0x14>
    3528:	44 c0       	rjmp	.+136    	; 0x35b2 <ieee802_15_4_associate_process_timeout+0x9c>
    // of if we are forced to use the long address
    // (e.g. in case the coordinator indicates pending data for us using our long address)  
    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) | FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR) | FCF_ACK_REQUEST;
    
    // Add the Frame Control Field
    data_request[index++] = ((fcf >> 8*0) & 0xFF);
    352a:	83 e2       	ldi	r24, 0x23	; 35
    352c:	80 93 68 11 	sts	0x1168, r24
    data_request[index++] = ((fcf >> 8*1) & 0xFF);
    3530:	80 ec       	ldi	r24, 0xC0	; 192
    3532:	80 93 69 11 	sts	0x1169, r24

    /* 3. Add the sequence number. */
    data_request[index++] = IEEE802_15_4_GET_DSN();
    3536:	80 91 26 11 	lds	r24, 0x1126
    353a:	80 93 6a 11 	sts	0x116A, r24
    353e:	8f 5f       	subi	r24, 0xFF	; 255
    3540:	80 93 26 11 	sts	0x1126, r24

    /* 4. Add the Source PAN ID */
    data_request[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*0) & 0xFF);
    3544:	90 91 2c 11 	lds	r25, 0x112C
    3548:	80 91 2d 11 	lds	r24, 0x112D
    354c:	90 93 6b 11 	sts	0x116B, r25
    data_request[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*1) & 0xFF);
    3550:	80 93 6c 11 	sts	0x116C, r24
    
    /* 5. Add Source Address.*/
    memcpy((void *)(&data_request[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    3554:	ed e6       	ldi	r30, 0x6D	; 109
    3556:	f1 e1       	ldi	r31, 0x11	; 17
    3558:	80 91 2e 11 	lds	r24, 0x112E
    355c:	80 93 6d 11 	sts	0x116D, r24
    3560:	80 91 2f 11 	lds	r24, 0x112F
    3564:	81 83       	std	Z+1, r24	; 0x01
    3566:	80 91 30 11 	lds	r24, 0x1130
    356a:	82 83       	std	Z+2, r24	; 0x02
    356c:	80 91 31 11 	lds	r24, 0x1131
    3570:	83 83       	std	Z+3, r24	; 0x03
    3572:	80 91 32 11 	lds	r24, 0x1132
    3576:	84 83       	std	Z+4, r24	; 0x04
    3578:	80 91 33 11 	lds	r24, 0x1133
    357c:	85 83       	std	Z+5, r24	; 0x05
    357e:	80 91 34 11 	lds	r24, 0x1134
    3582:	86 83       	std	Z+6, r24	; 0x06
    3584:	80 91 35 11 	lds	r24, 0x1135
    3588:	87 83       	std	Z+7, r24	; 0x07
    index += sizeof(uint64_t);

    /* 6. Add command id. */
    data_request[index++] = DATAREQUEST;
    358a:	84 e0       	ldi	r24, 0x04	; 4
    358c:	80 93 75 11 	sts	0x1175, r24
        
    index += CRC_SIZE; // Two bytes are added for CRC. The radio transceiver will calculate it.
    
    if (true != ieee802_15_4_send(index, data_request)) {
    3590:	80 e1       	ldi	r24, 0x10	; 16
    3592:	bf 01       	movw	r22, r30
    3594:	65 50       	subi	r22, 0x05	; 5
    3596:	70 40       	sbci	r23, 0x00	; 0
    3598:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <ieee802_15_4_send>
    359c:	88 23       	and	r24, r24
    359e:	11 f4       	brne	.+4      	; 0x35a4 <ieee802_15_4_associate_process_timeout+0x8e>
        issue_associate_confirm(MAC_TRANSACTION_OVERFLOW, 0xFFFF);
    35a0:	81 ef       	ldi	r24, 0xF1	; 241
    35a2:	0a c0       	rjmp	.+20     	; 0x35b8 <ieee802_15_4_associate_process_timeout+0xa2>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_DATA_REQUEST_ACK);
    35a4:	8f b7       	in	r24, 0x3f	; 63
    35a6:	89 83       	std	Y+1, r24	; 0x01
    35a8:	f8 94       	cli
    35aa:	88 e0       	ldi	r24, 0x08	; 8
    35ac:	80 93 8d 01 	sts	0x018D, r24
    35b0:	15 c0       	rjmp	.+42     	; 0x35dc <ieee802_15_4_associate_process_timeout+0xc6>


void ieee802_15_4_associate_process_timeout(void *null) {
    if (IEEE_MAC_WAITING_TO_SEND_DATA_REQUEST == IEEE802_15_4_GET_STATE()) {
        send_data_request();
    } else if (IEEE_MAC_WAITING_ASSOCIATION_RESPONSE == IEEE802_15_4_GET_STATE()) {
    35b2:	89 30       	cpi	r24, 0x09	; 9
    35b4:	31 f4       	brne	.+12     	; 0x35c2 <ieee802_15_4_associate_process_timeout+0xac>
        /* An Association response was not received. */
        issue_associate_confirm(MAC_NO_ACK, 0xFFFF);
    35b6:	89 ee       	ldi	r24, 0xE9	; 233
    35b8:	6f ef       	ldi	r22, 0xFF	; 255
    35ba:	7f ef       	ldi	r23, 0xFF	; 255
    35bc:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <issue_associate_confirm>
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <ieee802_15_4_associate_process_timeout+0xca>
    } else if (IEEE_MAC_WAITING_FOR_DATA_REQUEST == IEEE802_15_4_GET_STATE()) {
    35c2:	8c 30       	cpi	r24, 0x0C	; 12
    35c4:	21 f4       	brne	.+8      	; 0x35ce <ieee802_15_4_associate_process_timeout+0xb8>
        /* Send MLME_COMM_STATUS.indication. */
        send_comm_status_indication(MAC_TRANSACTION_EXPIRED);
    35c6:	80 ef       	ldi	r24, 0xF0	; 240
    35c8:	0e 94 39 19 	call	0x3272	; 0x3272 <send_comm_status_indication>
    35cc:	09 c0       	rjmp	.+18     	; 0x35e0 <ieee802_15_4_associate_process_timeout+0xca>
    } else {
        /* Error: Turn off the radio transceiver and set the IEEE 802.15.4 MAC's
         * state back to Idle.
         */
        tat_go_to_sleep();
    35ce:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    35d2:	8f b7       	in	r24, 0x3f	; 63
    35d4:	89 83       	std	Y+1, r24	; 0x01
    35d6:	f8 94       	cli
    35d8:	10 92 8d 01 	sts	0x018D, r1
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	8f bf       	out	0x3f, r24	; 63
    }
}
    35e0:	0f 90       	pop	r0
    35e2:	cf 91       	pop	r28
    35e4:	df 91       	pop	r29
    35e6:	08 95       	ret

000035e8 <ieee802_15_4_associate_response>:
    
    return false;
}


bool ieee802_15_4_associate_response(mlme_associate_resp_t* mar) {
    35e8:	ef 92       	push	r14
    35ea:	ff 92       	push	r15
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	df 93       	push	r29
    35f2:	cf 93       	push	r28
    35f4:	0f 92       	push	r0
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	fc 01       	movw	r30, r24
    /* Verify that the IEEE 802.15.4 MAC state is correct. */
    if (IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) { return false; }
    35fc:	80 91 8d 01 	lds	r24, 0x018D
    3600:	85 30       	cpi	r24, 0x05	; 5
    3602:	09 f0       	breq	.+2      	; 0x3606 <ieee802_15_4_associate_response+0x1e>
    3604:	a9 c0       	rjmp	.+338    	; 0x3758 <ieee802_15_4_associate_response+0x170>
    
    /* Perform sanity check on the function parameters. */
    if (NULL == mar) { return false; }
    3606:	30 97       	sbiw	r30, 0x00	; 0
    3608:	09 f4       	brne	.+2      	; 0x360c <ieee802_15_4_associate_response+0x24>
    360a:	a6 c0       	rjmp	.+332    	; 0x3758 <ieee802_15_4_associate_response+0x170>
    uint16_t fcf;
    
    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) | FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR) |
          FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR)  | FCF_ACK_REQUEST | FCF_INTRA_PAN;
    
    association_response[index++] = ((fcf >> 8*0) & 0xFF);
    360c:	83 e6       	ldi	r24, 0x63	; 99
    360e:	80 93 1f 0d 	sts	0x0D1F, r24
    association_response[index++] = ((fcf >> 8*1) & 0xFF);
    3612:	8c ec       	ldi	r24, 0xCC	; 204
    3614:	80 93 20 0d 	sts	0x0D20, r24
    
    /* 3. Add sequence number. */
    association_response[index++] = IEEE802_15_4_GET_DSN();
    3618:	80 91 26 11 	lds	r24, 0x1126
    361c:	80 93 21 0d 	sts	0x0D21, r24
    3620:	8f 5f       	subi	r24, 0xFF	; 255
    3622:	80 93 26 11 	sts	0x1126, r24
    
    /* 4. Add Address Fields. */
    memcpy((void *)(&association_response[index]), (void *)(&(IEEE802_15_4_GET_PAN_ID())), sizeof(uint16_t));
    3626:	80 91 2c 11 	lds	r24, 0x112C
    362a:	90 91 2d 11 	lds	r25, 0x112D
    362e:	90 93 23 0d 	sts	0x0D23, r25
    3632:	80 93 22 0d 	sts	0x0D22, r24
    index += sizeof(uint16_t);
    
    memcpy((void *)(&association_response[index]), (void *)(&(mar->DeviceAddress)), sizeof(uint64_t));
    3636:	24 e2       	ldi	r18, 0x24	; 36
    3638:	3d e0       	ldi	r19, 0x0D	; 13
    363a:	bf 01       	movw	r22, r30
    363c:	48 e0       	ldi	r20, 0x08	; 8
    363e:	db 01       	movw	r26, r22
    3640:	0d 90       	ld	r0, X+
    3642:	bd 01       	movw	r22, r26
    3644:	d9 01       	movw	r26, r18
    3646:	0d 92       	st	X+, r0
    3648:	9d 01       	movw	r18, r26
    364a:	41 50       	subi	r20, 0x01	; 1
    364c:	c1 f7       	brne	.-16     	; 0x363e <ieee802_15_4_associate_response+0x56>
    index += sizeof(uint64_t);
    
    memcpy((void *)(&association_response[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    364e:	e0 90 2e 11 	lds	r14, 0x112E
    3652:	f0 90 2f 11 	lds	r15, 0x112F
    3656:	00 91 30 11 	lds	r16, 0x1130
    365a:	10 91 31 11 	lds	r17, 0x1131
    365e:	70 91 32 11 	lds	r23, 0x1132
    3662:	60 91 33 11 	lds	r22, 0x1133
    3666:	50 91 34 11 	lds	r21, 0x1134
    366a:	40 91 35 11 	lds	r20, 0x1135
    366e:	e0 92 2c 0d 	sts	0x0D2C, r14
    3672:	f0 92 2d 0d 	sts	0x0D2D, r15
    3676:	00 93 2e 0d 	sts	0x0D2E, r16
    367a:	10 93 2f 0d 	sts	0x0D2F, r17
    367e:	70 93 30 0d 	sts	0x0D30, r23
    3682:	60 93 31 0d 	sts	0x0D31, r22
    3686:	50 93 32 0d 	sts	0x0D32, r21
    368a:	40 93 33 0d 	sts	0x0D33, r20
    index += sizeof(uint64_t);

    /* 5. Add the command frame id. */
    association_response[index++] = ASSOCIATIONRESPONSE;
    368e:	22 e0       	ldi	r18, 0x02	; 2
    3690:	20 93 34 0d 	sts	0x0D34, r18

    /* 6. Add short address assigned to the associating device. */
    memcpy((void *)(&association_response[index]), (void *)(&(mar->AssocShortAddress)), sizeof(uint16_t));
    3694:	20 85       	ldd	r18, Z+8	; 0x08
    3696:	31 85       	ldd	r19, Z+9	; 0x09
    3698:	30 93 36 0d 	sts	0x0D36, r19
    369c:	20 93 35 0d 	sts	0x0D35, r18
    index += sizeof(uint16_t);

    /* 7. Set the association status. */
    association_response[index++] = mar->status;
    36a0:	22 85       	ldd	r18, Z+10	; 0x0a
    36a2:	20 93 37 0d 	sts	0x0D37, r18

    // Add dummy bytes in crc field.
    index += 2;
   
    /* Prebuild MLME_COMM_STATUS.indication. */
    mcsi.PANId = IEEE802_15_4_GET_PAN_ID();
    36a6:	90 93 0b 0d 	sts	0x0D0B, r25
    36aa:	80 93 0a 0d 	sts	0x0D0A, r24
    mcsi.SrcAddrMode = FCF_LONG_ADDR;
    36ae:	83 e0       	ldi	r24, 0x03	; 3
    36b0:	80 93 0c 0d 	sts	0x0D0C, r24
    memcpy((void *)(&mcsi.SrcAddr), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())),\
    36b4:	ad e0       	ldi	r26, 0x0D	; 13
    36b6:	bd e0       	ldi	r27, 0x0D	; 13
    36b8:	e0 92 0d 0d 	sts	0x0D0D, r14
    36bc:	11 96       	adiw	r26, 0x01	; 1
    36be:	fc 92       	st	X, r15
    36c0:	11 97       	sbiw	r26, 0x01	; 1
    36c2:	12 96       	adiw	r26, 0x02	; 2
    36c4:	0c 93       	st	X, r16
    36c6:	12 97       	sbiw	r26, 0x02	; 2
    36c8:	13 96       	adiw	r26, 0x03	; 3
    36ca:	1c 93       	st	X, r17
    36cc:	13 97       	sbiw	r26, 0x03	; 3
    36ce:	14 96       	adiw	r26, 0x04	; 4
    36d0:	7c 93       	st	X, r23
    36d2:	14 97       	sbiw	r26, 0x04	; 4
    36d4:	15 96       	adiw	r26, 0x05	; 5
    36d6:	6c 93       	st	X, r22
    36d8:	15 97       	sbiw	r26, 0x05	; 5
    36da:	16 96       	adiw	r26, 0x06	; 6
    36dc:	5c 93       	st	X, r21
    36de:	16 97       	sbiw	r26, 0x06	; 6
    36e0:	17 96       	adiw	r26, 0x07	; 7
    36e2:	4c 93       	st	X, r20
    36e4:	17 97       	sbiw	r26, 0x07	; 7
           sizeof(uint64_t));    
    mcsi.DstAddrMode = FCF_LONG_ADDR;
    36e6:	80 93 15 0d 	sts	0x0D15, r24
    memcpy((void *)(&mcsi.DstAddr), (void *)(&(mar->DeviceAddress)), sizeof(uint64_t));
    36ea:	19 96       	adiw	r26, 0x09	; 9
    36ec:	80 81       	ld	r24, Z
    36ee:	80 93 16 0d 	sts	0x0D16, r24
    36f2:	81 81       	ldd	r24, Z+1	; 0x01
    36f4:	11 96       	adiw	r26, 0x01	; 1
    36f6:	8c 93       	st	X, r24
    36f8:	11 97       	sbiw	r26, 0x01	; 1
    36fa:	82 81       	ldd	r24, Z+2	; 0x02
    36fc:	12 96       	adiw	r26, 0x02	; 2
    36fe:	8c 93       	st	X, r24
    3700:	12 97       	sbiw	r26, 0x02	; 2
    3702:	83 81       	ldd	r24, Z+3	; 0x03
    3704:	13 96       	adiw	r26, 0x03	; 3
    3706:	8c 93       	st	X, r24
    3708:	13 97       	sbiw	r26, 0x03	; 3
    370a:	84 81       	ldd	r24, Z+4	; 0x04
    370c:	14 96       	adiw	r26, 0x04	; 4
    370e:	8c 93       	st	X, r24
    3710:	14 97       	sbiw	r26, 0x04	; 4
    3712:	85 81       	ldd	r24, Z+5	; 0x05
    3714:	15 96       	adiw	r26, 0x05	; 5
    3716:	8c 93       	st	X, r24
    3718:	15 97       	sbiw	r26, 0x05	; 5
    371a:	86 81       	ldd	r24, Z+6	; 0x06
    371c:	16 96       	adiw	r26, 0x06	; 6
    371e:	8c 93       	st	X, r24
    3720:	16 97       	sbiw	r26, 0x06	; 6
    3722:	87 81       	ldd	r24, Z+7	; 0x07
    3724:	17 96       	adiw	r26, 0x07	; 7
    3726:	8c 93       	st	X, r24
    
    bool response_status = false;
    /* 8. Set a timeout for the Data Request command to arrive. */
    IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_FOR_DATA_REQUEST);
    3728:	8f b7       	in	r24, 0x3f	; 63
    372a:	89 83       	std	Y+1, r24	; 0x01
    372c:	f8 94       	cli
    372e:	8c e0       	ldi	r24, 0x0C	; 12
    3730:	80 93 8d 01 	sts	0x018D, r24
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	8f bf       	out	0x3f, r24	; 63
    uint32_t ticks = IEEE802_15_4_SYMBOL_TO_TICKS(2 * aResponseWaitTime);
        
    if (true != vrt_timer_start_high_pri_delay(ticks, ieee802_15_4_associate_process_timeout,\
    3738:	60 e0       	ldi	r22, 0x00	; 0
    373a:	70 ee       	ldi	r23, 0xE0	; 224
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	4b e8       	ldi	r20, 0x8B	; 139
    3742:	5a e1       	ldi	r21, 0x1A	; 26
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	0e 94 ee 32 	call	0x65dc	; 0x65dc <vrt_timer_start_high_pri_delay>
    374c:	88 23       	and	r24, r24
    374e:	31 f4       	brne	.+12     	; 0x375c <ieee802_15_4_associate_response+0x174>
                                               (void*)NULL)) {
                                                   
        ieee802_15_4_associate_process_timeout(NULL);                                         
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	0e 94 8b 1a 	call	0x3516	; 0x3516 <ieee802_15_4_associate_process_timeout>
bool ieee802_15_4_associate_response(mlme_associate_resp_t* mar) {
    /* Verify that the IEEE 802.15.4 MAC state is correct. */
    if (IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) { return false; }
    
    /* Perform sanity check on the function parameters. */
    if (NULL == mar) { return false; }
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	01 c0       	rjmp	.+2      	; 0x375e <ieee802_15_4_associate_response+0x176>
                                               (void*)NULL)) {
                                                   
        ieee802_15_4_associate_process_timeout(NULL);                                         
    } else {
        
        response_status = true;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    return response_status;
}
    375e:	0f 90       	pop	r0
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	1f 91       	pop	r17
    3766:	0f 91       	pop	r16
    3768:	ff 90       	pop	r15
    376a:	ef 90       	pop	r14
    376c:	08 95       	ret

0000376e <ieee802_15_4_associate_process_ack>:


void ieee802_15_4_associate_process_ack(void *ack_status) {
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	00 d0       	rcall	.+0      	; 0x3774 <ieee802_15_4_associate_process_ack+0x6>
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62
    /* Extract the transmission status from the ack_status pointer. */
    uint8_t tx_status = *((uint8_t *)ack_status);
    3778:	fc 01       	movw	r30, r24
    377a:	80 81       	ld	r24, Z
    
    if ((TRAC_SUCCESS == tx_status) || (TRAC_SUCCESS_DATA_PENDING == tx_status)) {
    377c:	82 30       	cpi	r24, 0x02	; 2
    377e:	18 f5       	brcc	.+70     	; 0x37c6 <ieee802_15_4_associate_process_ack+0x58>
        /* If this ACK is a response to the data request, the transceiver must be set 
         * in RX_AACK_ON mode before the response timer is started.
         */
        if (IEEE_MAC_WAITING_DATA_REQUEST_ACK == IEEE802_15_4_GET_STATE()) {
    3780:	80 91 8d 01 	lds	r24, 0x018D
    3784:	88 30       	cpi	r24, 0x08	; 8
    3786:	51 f4       	brne	.+20     	; 0x379c <ieee802_15_4_associate_process_ack+0x2e>
            
            if(true != tat_set_state(RX_AACK_ON)) {
    3788:	86 e1       	ldi	r24, 0x16	; 22
    378a:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    378e:	88 23       	and	r24, r24
    3790:	f1 f0       	breq	.+60     	; 0x37ce <ieee802_15_4_associate_process_ack+0x60>
                tx_status = MAC_CHANNEL_ACCESS_FAILURE;
                goto associate_ack_error;
            } else {
                IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_ASSOCIATION_RESPONSE);
    3792:	8f b7       	in	r24, 0x3f	; 63
    3794:	89 83       	std	Y+1, r24	; 0x01
    3796:	f8 94       	cli
    3798:	89 e0       	ldi	r24, 0x09	; 9
    379a:	04 c0       	rjmp	.+8      	; 0x37a4 <ieee802_15_4_associate_process_ack+0x36>
            }
        } else {
            IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_TO_SEND_DATA_REQUEST);
    379c:	8f b7       	in	r24, 0x3f	; 63
    379e:	89 83       	std	Y+1, r24	; 0x01
    37a0:	f8 94       	cli
    37a2:	87 e0       	ldi	r24, 0x07	; 7
    37a4:	80 93 8d 01 	sts	0x018D, r24
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	8f bf       	out	0x3f, r24	; 63
        }
        
        /* Start response wait symbol timer. */
        uint32_t ticks = IEEE802_15_4_SYMBOL_TO_TICKS(aResponseWaitTime);
        if (true != vrt_timer_start_high_pri_delay(ticks, ieee802_15_4_associate_process_timeout,\
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	70 ef       	ldi	r23, 0xF0	; 240
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	4b e8       	ldi	r20, 0x8B	; 139
    37b6:	5a e1       	ldi	r21, 0x1A	; 26
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	0e 94 ee 32 	call	0x65dc	; 0x65dc <vrt_timer_start_high_pri_delay>
    37c0:	88 23       	and	r24, r24
    37c2:	29 f0       	breq	.+10     	; 0x37ce <ieee802_15_4_associate_process_ack+0x60>
    37c4:	11 c0       	rjmp	.+34     	; 0x37e8 <ieee802_15_4_associate_process_ack+0x7a>
        } else {
            /* Timer started. Wait for it to expire. */
            return;
        }
    } else {
        if (TRAC_NO_ACK == tx_status) {
    37c6:	85 30       	cpi	r24, 0x05	; 5
    37c8:	21 f0       	breq	.+8      	; 0x37d2 <ieee802_15_4_associate_process_ack+0x64>
            tx_status = MAC_NO_ACK;
        } else if (TRAC_CHANNEL_ACCESS_FAILURE == tx_status) {
    37ca:	83 30       	cpi	r24, 0x03	; 3
    37cc:	21 f4       	brne	.+8      	; 0x37d6 <ieee802_15_4_associate_process_ack+0x68>
                                                   (void *)NULL)) {
                                                             
            /* In lack of a better error status in the IEEE 802.15.4 standard this one is
             * reported back to the next higher layer.
             */
            tx_status = MAC_CHANNEL_ACCESS_FAILURE;
    37ce:	81 ee       	ldi	r24, 0xE1	; 225
    37d0:	03 c0       	rjmp	.+6      	; 0x37d8 <ieee802_15_4_associate_process_ack+0x6a>
            /* Timer started. Wait for it to expire. */
            return;
        }
    } else {
        if (TRAC_NO_ACK == tx_status) {
            tx_status = MAC_NO_ACK;
    37d2:	89 ee       	ldi	r24, 0xE9	; 233
    37d4:	01 c0       	rjmp	.+2      	; 0x37d8 <ieee802_15_4_associate_process_ack+0x6a>
        } else if (TRAC_CHANNEL_ACCESS_FAILURE == tx_status) {
            tx_status = MAC_CHANNEL_ACCESS_FAILURE;
        } else {
            tx_status = MAC_NO_DATA;
    37d6:	8b ee       	ldi	r24, 0xEB	; 235
     * successful.
     */
    associate_ack_error:
    
    
    vrt_timer_stop_high_pri_delay();
    37d8:	8a 83       	std	Y+2, r24	; 0x02
    37da:	0e 94 40 33 	call	0x6680	; 0x6680 <vrt_timer_stop_high_pri_delay>
    issue_associate_confirm(tx_status, 0xFFFF);
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	6f ef       	ldi	r22, 0xFF	; 255
    37e2:	7f ef       	ldi	r23, 0xFF	; 255
    37e4:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <issue_associate_confirm>
}
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	08 95       	ret

000037f2 <ieee802_15_4_send_association_response>:
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_DATA_REQUEST_ACK);
    }
}


void ieee802_15_4_send_association_response(void) {
    37f2:	1f 93       	push	r17
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	0f 92       	push	r0
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    /* The radio transceiver will be in RX_ACK_ON or BUSY_RX_AACK_ON when entering 
     * this function. Change state to TX_ARET_ON for frame transmission.
     */
    uint8_t time_out = 0xFF;
    37fe:	1f ef       	ldi	r17, 0xFF	; 255
    3800:	85 e3       	ldi	r24, 0x35	; 53
    3802:	8a 95       	dec	r24
    3804:	f1 f7       	brne	.-4      	; 0x3802 <ieee802_15_4_send_association_response+0x10>
    3806:	00 00       	nop
    do {
        delay_us(20);
        time_out--;
    3808:	11 50       	subi	r17, 0x01	; 1
    } while ((CMD_PLL_ON != tat_get_state()) && (0 != time_out));
    380a:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <tat_get_state>
    380e:	89 30       	cpi	r24, 0x09	; 9
    3810:	19 f0       	breq	.+6      	; 0x3818 <ieee802_15_4_send_association_response+0x26>
    3812:	11 23       	and	r17, r17
    3814:	a9 f7       	brne	.-22     	; 0x3800 <ieee802_15_4_send_association_response+0xe>
    3816:	09 c0       	rjmp	.+18     	; 0x382a <ieee802_15_4_send_association_response+0x38>
    
    /* Check if the wait loop above timed out, or if the RX_AACK_ON state was entered. */
    if (0 == time_out) {
    3818:	11 23       	and	r17, r17
    381a:	39 f0       	breq	.+14     	; 0x382a <ieee802_15_4_send_association_response+0x38>
        send_comm_status_indication(MAC_CHANNEL_ACCESS_FAILURE);
    } else if (true != ieee802_15_4_send(ASSOCIATION_RESPONSE_CMD_SIZE, association_response)) {
    381c:	8b e1       	ldi	r24, 0x1B	; 27
    381e:	6f e1       	ldi	r22, 0x1F	; 31
    3820:	7d e0       	ldi	r23, 0x0D	; 13
    3822:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <ieee802_15_4_send>
    3826:	88 23       	and	r24, r24
    3828:	21 f4       	brne	.+8      	; 0x3832 <ieee802_15_4_send_association_response+0x40>
        send_comm_status_indication(MAC_CHANNEL_ACCESS_FAILURE);
    382a:	81 ee       	ldi	r24, 0xE1	; 225
    382c:	0e 94 39 19 	call	0x3272	; 0x3272 <send_comm_status_indication>
    3830:	08 c0       	rjmp	.+16     	; 0x3842 <ieee802_15_4_send_association_response+0x50>
    } else {
        /* Set new IEEE 802.15.4 MAC state. */
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_ASSOCIATE_RESPONSE_ACK);
    3832:	8f b7       	in	r24, 0x3f	; 63
    3834:	89 83       	std	Y+1, r24	; 0x01
    3836:	f8 94       	cli
    3838:	8b e0       	ldi	r24, 0x0B	; 11
    383a:	80 93 8d 01 	sts	0x018D, r24
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	8f bf       	out	0x3f, r24	; 63
        /* Transmission of the associated Association Response was successful. Wait for the ACK to arrive. */
    }
}
    3842:	0f 90       	pop	r0
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	1f 91       	pop	r17
    384a:	08 95       	ret

0000384c <ieee802_15_4_associate_response_process_ack>:

void ieee802_15_4_associate_response_process_ack(void *tx_status) {
    /* Set status of the MLME_COMM_STATUS.indication, and then execute the 
     * callback.
     */
    uint8_t mcsi_status = *((uint8_t *)tx_status);
    384c:	fc 01       	movw	r30, r24
    384e:	80 81       	ld	r24, Z
    
    if (TRAC_SUCCESS == mcsi_status) {
    3850:	88 23       	and	r24, r24
    3852:	49 f0       	breq	.+18     	; 0x3866 <ieee802_15_4_associate_response_process_ack+0x1a>
        mcsi_status = MAC_SUCCESS;
    } else if (TRAC_NO_ACK == mcsi_status) {
    3854:	85 30       	cpi	r24, 0x05	; 5
    3856:	21 f0       	breq	.+8      	; 0x3860 <ieee802_15_4_associate_response_process_ack+0x14>
        mcsi_status = MAC_NO_ACK;
    } else if (TRAC_CHANNEL_ACCESS_FAILURE == mcsi_status) {
    3858:	83 30       	cpi	r24, 0x03	; 3
    385a:	21 f4       	brne	.+8      	; 0x3864 <ieee802_15_4_associate_response_process_ack+0x18>
        mcsi_status = MAC_CHANNEL_ACCESS_FAILURE;
    385c:	81 ee       	ldi	r24, 0xE1	; 225
    385e:	03 c0       	rjmp	.+6      	; 0x3866 <ieee802_15_4_associate_response_process_ack+0x1a>
    uint8_t mcsi_status = *((uint8_t *)tx_status);
    
    if (TRAC_SUCCESS == mcsi_status) {
        mcsi_status = MAC_SUCCESS;
    } else if (TRAC_NO_ACK == mcsi_status) {
        mcsi_status = MAC_NO_ACK;
    3860:	89 ee       	ldi	r24, 0xE9	; 233
    3862:	01 c0       	rjmp	.+2      	; 0x3866 <ieee802_15_4_associate_response_process_ack+0x1a>
    } else if (TRAC_CHANNEL_ACCESS_FAILURE == mcsi_status) {
        mcsi_status = MAC_CHANNEL_ACCESS_FAILURE;
    } else {
        mcsi_status = MAC_NO_DATA;
    3864:	8b ee       	ldi	r24, 0xEB	; 235
    }
    
    send_comm_status_indication(mcsi_status);  
    3866:	0e 94 39 19 	call	0x3272	; 0x3272 <send_comm_status_indication>
}
    386a:	08 95       	ret

0000386c <ieee802_15_4_beacon_notify_do_callback>:
    (bool)tat_set_state(RX_AACK_ON);
    IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
}


void ieee802_15_4_beacon_notify_do_callback(void *mbni) {
    386c:	cf 93       	push	r28
    386e:	df 93       	push	r29
    3870:	ec 01       	movw	r28, r24
    ieee802_15_4_beacon_notify_indication_t mbni_callback = ieee802_15_4_get_mlme_beacon_notify_indication();
    3872:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <ieee802_15_4_get_mlme_beacon_notify_indication>
    3876:	fc 01       	movw	r30, r24
    if (NULL == mbni_callback) {
    3878:	00 97       	sbiw	r24, 0x00	; 0
    387a:	11 f0       	breq	.+4      	; 0x3880 <ieee802_15_4_beacon_notify_do_callback+0x14>
        MEM_FREE(mbni);
        return;
    }
    
    /* Execute the callback and free up allocated memory. */
    mbni_callback((mlme_beacon_notify_ind_t *)mbni);
    387c:	ce 01       	movw	r24, r28
    387e:	09 95       	icall
    MEM_FREE(mbni);
    3880:	ce 01       	movw	r24, r28
    3882:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
}
    3886:	df 91       	pop	r29
    3888:	cf 91       	pop	r28
    388a:	08 95       	ret

0000388c <ieee802_15_4_mlme_beacon_indication>:
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

void ieee802_15_4_mlme_beacon_indication(void *beacon_frame_info) {
    388c:	ef 92       	push	r14
    388e:	ff 92       	push	r15
    3890:	0f 93       	push	r16
    3892:	1f 93       	push	r17
    3894:	cf 93       	push	r28
    3896:	df 93       	push	r29
    /* Handle the beacon: Issue a MLME_BEACON_NOTIFICATION.indication and 
     * add the pan descriptor to the list if the device is busy doing a
     * active or passive scan.*/
    
    /* Cast the beacon frame info. */
    ieee802_15_4_meta_data_t *frame_info = (ieee802_15_4_meta_data_t *)beacon_frame_info;
    3898:	8c 01       	movw	r16, r24
     * active or passive scan. It is here safe to use the IEEE 802.15.4 MAC's
     * internal command buffer to build the PAN Descriptor.
     */
    ieee802_15_4_pan_descriptor_t *pan_desc = (ieee802_15_4_pan_descriptor_t *)IEEE802_15_4_GET_TX_BUFFER();
    
    pan_desc->CoordAddrMode = frame_info->src_addr_mode;
    389a:	dc 01       	movw	r26, r24
    389c:	1d 96       	adiw	r26, 0x0d	; 13
    389e:	8c 91       	ld	r24, X
    38a0:	1d 97       	sbiw	r26, 0x0d	; 13
    38a2:	80 93 68 11 	sts	0x1168, r24
    pan_desc->CoordPANId = frame_info->src_pan_id;
    38a6:	1e 96       	adiw	r26, 0x0e	; 14
    38a8:	8d 91       	ld	r24, X+
    38aa:	9c 91       	ld	r25, X
    38ac:	1f 97       	sbiw	r26, 0x0f	; 15
    38ae:	90 93 6a 11 	sts	0x116A, r25
    38b2:	80 93 69 11 	sts	0x1169, r24
    pan_desc->CoordAddress = 0;
    38b6:	10 92 6b 11 	sts	0x116B, r1
    38ba:	10 92 6c 11 	sts	0x116C, r1
    38be:	10 92 6d 11 	sts	0x116D, r1
    38c2:	10 92 6e 11 	sts	0x116E, r1
    38c6:	10 92 6f 11 	sts	0x116F, r1
    38ca:	10 92 70 11 	sts	0x1170, r1
    38ce:	10 92 71 11 	sts	0x1171, r1
    38d2:	10 92 72 11 	sts	0x1172, r1
    
    memcpy((void *)(&(pan_desc->CoordAddress)), (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
    38d6:	ab e6       	ldi	r26, 0x6B	; 107
    38d8:	b1 e1       	ldi	r27, 0x11	; 17
    38da:	f8 01       	movw	r30, r16
    38dc:	70 96       	adiw	r30, 0x10	; 16
    38de:	88 e0       	ldi	r24, 0x08	; 8
    38e0:	01 90       	ld	r0, Z+
    38e2:	0d 92       	st	X+, r0
    38e4:	81 50       	subi	r24, 0x01	; 1
    38e6:	e1 f7       	brne	.-8      	; 0x38e0 <ieee802_15_4_mlme_beacon_indication+0x54>
    
    pan_desc->LogicalChannel = IEEE802_15_4_GET_CHANNEL();
    38e8:	60 91 29 11 	lds	r22, 0x1129
    38ec:	60 93 73 11 	sts	0x1173, r22
    
    uint8_t *beacon_payload = frame_info->msdu;
    38f0:	d8 01       	movw	r26, r16
    38f2:	59 96       	adiw	r26, 0x19	; 25
    38f4:	ed 91       	ld	r30, X+
    38f6:	fc 91       	ld	r31, X
    38f8:	5a 97       	sbiw	r26, 0x1a	; 26
    
    pan_desc->SuperframeSpec = 0;
    38fa:	10 92 75 11 	sts	0x1175, r1
    38fe:	10 92 74 11 	sts	0x1174, r1
    pan_desc->SuperframeSpec = beacon_payload[1] << 8;
    3902:	91 81       	ldd	r25, Z+1	; 0x01
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	90 93 75 11 	sts	0x1175, r25
    390a:	80 93 74 11 	sts	0x1174, r24
    pan_desc->SuperframeSpec |= beacon_payload[0];
    390e:	20 81       	ld	r18, Z
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	28 2b       	or	r18, r24
    3914:	39 2b       	or	r19, r25
    3916:	30 93 75 11 	sts	0x1175, r19
    391a:	20 93 74 11 	sts	0x1174, r18
    
    pan_desc->LinkQuality = frame_info->lqi;
    391e:	5c 96       	adiw	r26, 0x1c	; 28
    3920:	8c 91       	ld	r24, X
    3922:	5c 97       	sbiw	r26, 0x1c	; 28
    3924:	80 93 76 11 	sts	0x1176, r24
    
    /* Do scan stuff herein. */
    if (IEEE_MAC_BUSY_SCANNING == IEEE802_15_4_GET_STATE()) {
    3928:	80 91 8d 01 	lds	r24, 0x018D
    392c:	82 30       	cpi	r24, 0x02	; 2
    392e:	09 f0       	breq	.+2      	; 0x3932 <ieee802_15_4_mlme_beacon_indication+0xa6>
    3930:	57 c0       	rjmp	.+174    	; 0x39e0 <ieee802_15_4_mlme_beacon_indication+0x154>
        /* First set a start pointer to the first element in the MLME_SCAN.confirm's
         * resultList.
         */
        mlme_scan_conf_t *msc = mac_param.scan.msc;
    3932:	a0 91 48 11 	lds	r26, 0x1148
    3936:	b0 91 49 11 	lds	r27, 0x1149
        
        ieee802_15_4_pan_descriptor_t *pan_desc_ptr = \
    393a:	fd 01       	movw	r30, r26
    393c:	33 96       	adiw	r30, 0x03	; 3
         * A PAN is considered the same as an existing one if all, the PAN Id, the
         * coordinator address mode, the coordinator address, and the Logical Channel
         * compare equal.
         */
        bool known_pan = false;
        for(uint8_t i = 0; i < (msc->ResultListSize); i++, pan_desc_ptr++) {
    393e:	12 96       	adiw	r26, 0x02	; 2
    3940:	5c 91       	ld	r21, X
    3942:	12 97       	sbiw	r26, 0x02	; 2
    3944:	40 e0       	ldi	r20, 0x00	; 0
    3946:	3b c0       	rjmp	.+118    	; 0x39be <ieee802_15_4_mlme_beacon_indication+0x132>
            if ((pan_desc->CoordPANId == pan_desc_ptr->CoordPANId)
    3948:	20 91 69 11 	lds	r18, 0x1169
    394c:	30 91 6a 11 	lds	r19, 0x116A
    3950:	81 81       	ldd	r24, Z+1	; 0x01
    3952:	92 81       	ldd	r25, Z+2	; 0x02
    3954:	28 17       	cp	r18, r24
    3956:	39 07       	cpc	r19, r25
    3958:	81 f5       	brne	.+96     	; 0x39ba <ieee802_15_4_mlme_beacon_indication+0x12e>
                && ((pan_desc->CoordAddrMode) == (pan_desc_ptr->CoordAddrMode))
    395a:	90 91 68 11 	lds	r25, 0x1168
    395e:	80 81       	ld	r24, Z
    3960:	98 17       	cp	r25, r24
    3962:	59 f5       	brne	.+86     	; 0x39ba <ieee802_15_4_mlme_beacon_indication+0x12e>
                && ((pan_desc->CoordAddress) == (pan_desc_ptr->CoordAddress))
    3964:	90 91 6b 11 	lds	r25, 0x116B
    3968:	83 81       	ldd	r24, Z+3	; 0x03
    396a:	98 17       	cp	r25, r24
    396c:	31 f5       	brne	.+76     	; 0x39ba <ieee802_15_4_mlme_beacon_indication+0x12e>
    396e:	90 91 6c 11 	lds	r25, 0x116C
    3972:	84 81       	ldd	r24, Z+4	; 0x04
    3974:	98 17       	cp	r25, r24
    3976:	09 f5       	brne	.+66     	; 0x39ba <ieee802_15_4_mlme_beacon_indication+0x12e>
    3978:	90 91 6d 11 	lds	r25, 0x116D
    397c:	85 81       	ldd	r24, Z+5	; 0x05
    397e:	98 17       	cp	r25, r24
    3980:	e1 f4       	brne	.+56     	; 0x39ba <ieee802_15_4_mlme_beacon_indication+0x12e>
    3982:	90 91 6e 11 	lds	r25, 0x116E
    3986:	86 81       	ldd	r24, Z+6	; 0x06
    3988:	98 17       	cp	r25, r24
    398a:	b9 f4       	brne	.+46     	; 0x39ba <ieee802_15_4_mlme_beacon_indication+0x12e>
    398c:	90 91 6f 11 	lds	r25, 0x116F
    3990:	87 81       	ldd	r24, Z+7	; 0x07
    3992:	98 17       	cp	r25, r24
    3994:	91 f4       	brne	.+36     	; 0x39ba <ieee802_15_4_mlme_beacon_indication+0x12e>
    3996:	90 91 70 11 	lds	r25, 0x1170
    399a:	80 85       	ldd	r24, Z+8	; 0x08
    399c:	98 17       	cp	r25, r24
    399e:	69 f4       	brne	.+26     	; 0x39ba <ieee802_15_4_mlme_beacon_indication+0x12e>
    39a0:	90 91 71 11 	lds	r25, 0x1171
    39a4:	81 85       	ldd	r24, Z+9	; 0x09
    39a6:	98 17       	cp	r25, r24
    39a8:	41 f4       	brne	.+16     	; 0x39ba <ieee802_15_4_mlme_beacon_indication+0x12e>
    39aa:	90 91 72 11 	lds	r25, 0x1172
    39ae:	82 85       	ldd	r24, Z+10	; 0x0a
    39b0:	98 17       	cp	r25, r24
    39b2:	19 f4       	brne	.+6      	; 0x39ba <ieee802_15_4_mlme_beacon_indication+0x12e>
                && ((pan_desc->LogicalChannel) == (pan_desc_ptr->LogicalChannel))) {
    39b4:	83 85       	ldd	r24, Z+11	; 0x0b
    39b6:	68 17       	cp	r22, r24
    39b8:	99 f0       	breq	.+38     	; 0x39e0 <ieee802_15_4_mlme_beacon_indication+0x154>
         * A PAN is considered the same as an existing one if all, the PAN Id, the
         * coordinator address mode, the coordinator address, and the Logical Channel
         * compare equal.
         */
        bool known_pan = false;
        for(uint8_t i = 0; i < (msc->ResultListSize); i++, pan_desc_ptr++) {
    39ba:	4f 5f       	subi	r20, 0xFF	; 255
    39bc:	3f 96       	adiw	r30, 0x0f	; 15
    39be:	45 17       	cp	r20, r21
    39c0:	18 f2       	brcs	.-122    	; 0x3948 <ieee802_15_4_mlme_beacon_indication+0xbc>
    39c2:	3f c0       	rjmp	.+126    	; 0x3a42 <ieee802_15_4_mlme_beacon_indication+0x1b6>
            }
        }
        
        /* Check if a new PAN was found and if there is room to store it. */
        if((true != known_pan) && ((msc->ResultListSize) < IEEE802_15_4_MAX_NMBR_OF_PANDESC)) {
            memcpy((void *)pan_desc_ptr, (void *)pan_desc, sizeof(ieee802_15_4_pan_descriptor_t));
    39c4:	c8 e6       	ldi	r28, 0x68	; 104
    39c6:	d1 e1       	ldi	r29, 0x11	; 17
    39c8:	8f e0       	ldi	r24, 0x0F	; 15
    39ca:	09 90       	ld	r0, Y+
    39cc:	01 92       	st	Z+, r0
    39ce:	81 50       	subi	r24, 0x01	; 1
    39d0:	e1 f7       	brne	.-8      	; 0x39ca <ieee802_15_4_mlme_beacon_indication+0x13e>
            (msc->ResultListSize)++;
    39d2:	12 96       	adiw	r26, 0x02	; 2
    39d4:	8c 91       	ld	r24, X
    39d6:	12 97       	sbiw	r26, 0x02	; 2
    39d8:	8f 5f       	subi	r24, 0xFF	; 255
    39da:	12 96       	adiw	r26, 0x02	; 2
    39dc:	8c 93       	st	X, r24
    39de:	12 97       	sbiw	r26, 0x02	; 2
    
    /* In all cases (pan or device) if the payload is not equal to zero
     * or macAutoRequest is false, then we have to generate a 
     * MLME_BEACON_NOTIFY.indication.
     */
    if((frame_info->msdu_length > 0)/* || (mac_pib_macAutoRequest == false)*/) {
    39e0:	f8 01       	movw	r30, r16
    39e2:	83 8d       	ldd	r24, Z+27	; 0x1b
    39e4:	88 23       	and	r24, r24
    39e6:	09 f1       	breq	.+66     	; 0x3a2a <ieee802_15_4_mlme_beacon_indication+0x19e>
        /* Try to allocate some memory to build the MLME_BEACON_NOTIFICATION.indication on. */
        mlme_beacon_notify_ind_t *mbni = (mlme_beacon_notify_ind_t *)MEM_ALLOC(mlme_beacon_notify_ind_t);
    39e8:	80 e1       	ldi	r24, 0x10	; 16
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    39f0:	e8 2e       	mov	r14, r24
    39f2:	e7 01       	movw	r28, r14
    39f4:	7e 01       	movw	r14, r28
    39f6:	f9 2e       	mov	r15, r25
    39f8:	e7 01       	movw	r28, r14
        
        /* Verify that the memory was allocated before continuing execution. */
        if (NULL == mbni) {
    39fa:	20 97       	sbiw	r28, 0x00	; 0
    39fc:	b1 f0       	breq	.+44     	; 0x3a2a <ieee802_15_4_mlme_beacon_indication+0x19e>
        } else {
            /* Build MLME_BEACON_NOTIFIY.indication message and post the
             * associated event.
             */
            mbni->BSN = frame_info->seq_nmbr;
    39fe:	d8 01       	movw	r26, r16
    3a00:	11 96       	adiw	r26, 0x01	; 1
    3a02:	8c 91       	ld	r24, X
    3a04:	f7 01       	movw	r30, r14
    3a06:	81 93       	st	Z+, r24
            memcpy((void *)(&(mbni->PANDescriptor)), (void *)pan_desc, sizeof(ieee802_15_4_pan_descriptor_t));
    3a08:	a8 e6       	ldi	r26, 0x68	; 104
    3a0a:	b1 e1       	ldi	r27, 0x11	; 17
    3a0c:	8f e0       	ldi	r24, 0x0F	; 15
    3a0e:	0d 90       	ld	r0, X+
    3a10:	01 92       	st	Z+, r0
    3a12:	81 50       	subi	r24, 0x01	; 1
    3a14:	e1 f7       	brne	.-8      	; 0x3a0e <ieee802_15_4_mlme_beacon_indication+0x182>
            
            if (true != vrt_post_event(ieee802_15_4_beacon_notify_do_callback, (void *)mbni)) {
    3a16:	86 e3       	ldi	r24, 0x36	; 54
    3a18:	9c e1       	ldi	r25, 0x1C	; 28
    3a1a:	be 01       	movw	r22, r28
    3a1c:	0e 94 85 29 	call	0x530a	; 0x530a <vrt_post_event>
    3a20:	88 23       	and	r24, r24
    3a22:	19 f4       	brne	.+6      	; 0x3a2a <ieee802_15_4_mlme_beacon_indication+0x19e>
                MEM_FREE(mbni);
    3a24:	ce 01       	movw	r24, r28
    3a26:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
            }
        }
    }
    
    if (true == IEEE802_15_4_GET_RX_ON_WHEN_IDLE() ||
    3a2a:	80 91 24 11 	lds	r24, 0x1124
    3a2e:	88 23       	and	r24, r24
    3a30:	21 f4       	brne	.+8      	; 0x3a3a <ieee802_15_4_mlme_beacon_indication+0x1ae>
    3a32:	80 91 8d 01 	lds	r24, 0x018D
    3a36:	82 30       	cpi	r24, 0x02	; 2
    3a38:	39 f4       	brne	.+14     	; 0x3a48 <ieee802_15_4_mlme_beacon_indication+0x1bc>
        (IEEE_MAC_BUSY_SCANNING == IEEE802_15_4_GET_STATE())) {
        (bool)tat_set_state(RX_AACK_ON);
    3a3a:	86 e1       	ldi	r24, 0x16	; 22
    3a3c:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    3a40:	03 c0       	rjmp	.+6      	; 0x3a48 <ieee802_15_4_mlme_beacon_indication+0x1bc>
                break;
            }
        }
        
        /* Check if a new PAN was found and if there is room to store it. */
        if((true != known_pan) && ((msc->ResultListSize) < IEEE802_15_4_MAX_NMBR_OF_PANDESC)) {
    3a42:	54 30       	cpi	r21, 0x04	; 4
    3a44:	68 f6       	brcc	.-102    	; 0x39e0 <ieee802_15_4_mlme_beacon_indication+0x154>
    3a46:	be cf       	rjmp	.-132    	; 0x39c4 <ieee802_15_4_mlme_beacon_indication+0x138>
    
    if (true == IEEE802_15_4_GET_RX_ON_WHEN_IDLE() ||
        (IEEE_MAC_BUSY_SCANNING == IEEE802_15_4_GET_STATE())) {
        (bool)tat_set_state(RX_AACK_ON);
    }
}
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	1f 91       	pop	r17
    3a4e:	0f 91       	pop	r16
    3a50:	ff 90       	pop	r15
    3a52:	ef 90       	pop	r14
    3a54:	08 95       	ret

00003a56 <ieee802_15_4_send_beacon>:


void ieee802_15_4_send_beacon(void) {
    3a56:	df 93       	push	r29
    3a58:	cf 93       	push	r28
    3a5a:	0f 92       	push	r0
    3a5c:	cd b7       	in	r28, 0x3d	; 61
    3a5e:	de b7       	in	r29, 0x3e	; 62
    /* Devices are only allowed to send beacons if their short adddres is different
     * from the broadcast address (0xFFFF).*/
    if (BROADCAST == (IEEE802_15_4_GET_SHORT_ADDRESS())) { return; }
    3a60:	80 91 3e 11 	lds	r24, 0x113E
    3a64:	90 91 3f 11 	lds	r25, 0x113F
    3a68:	2f ef       	ldi	r18, 0xFF	; 255
    3a6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a6c:	92 07       	cpc	r25, r18
    3a6e:	e1 f1       	breq	.+120    	; 0x3ae8 <ieee802_15_4_send_beacon+0x92>
    
    fcf = FCF_SET_SOURCE_ADDR_MODE(FCF_SHORT_ADDR) |
          FCF_SET_FRAMETYPE(FCF_FRAMETYPE_BEACON);

    // Add FCF fields.
    beacon[index++] = ((fcf >> 8*0) & 0xFF);
    3a70:	10 92 68 11 	sts	0x1168, r1
    beacon[index++] = ((fcf >> 8*1) & 0xFF);
    3a74:	20 e8       	ldi	r18, 0x80	; 128
    3a76:	20 93 69 11 	sts	0x1169, r18

    /* 2. Add farme sequence number. */
    beacon[index++] = IEEE802_15_4_GET_DSN();
    3a7a:	20 91 26 11 	lds	r18, 0x1126
    3a7e:	20 93 6a 11 	sts	0x116A, r18
    3a82:	2f 5f       	subi	r18, 0xFF	; 255
    3a84:	20 93 26 11 	sts	0x1126, r18
    
    /* 3. Add addressing fields. */
    beacon[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*0) & 0xFF);
    3a88:	30 91 2c 11 	lds	r19, 0x112C
    3a8c:	20 91 2d 11 	lds	r18, 0x112D
    3a90:	30 93 6b 11 	sts	0x116B, r19
    beacon[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*1) & 0xFF);
    3a94:	20 93 6c 11 	sts	0x116C, r18
    
    beacon[index++] = ((IEEE802_15_4_GET_SHORT_ADDRESS() >> 8*0) & 0xFF);
    3a98:	80 93 6d 11 	sts	0x116D, r24
    beacon[index++] = ((IEEE802_15_4_GET_SHORT_ADDRESS() >> 8*1) & 0xFF);
    3a9c:	90 93 6e 11 	sts	0x116E, r25
    
    if (true) {
        superframe_spec |= (1U << 13);
    }
    
    if (true == IEEE802_15_4_GET_I_AM_COORDINATOR()) {
    3aa0:	80 91 25 11 	lds	r24, 0x1125
    3aa4:	88 23       	and	r24, r24
    3aa6:	19 f4       	brne	.+6      	; 0x3aae <ieee802_15_4_send_beacon+0x58>
    uint16_t superframe_spec = 0x0F;
    superframe_spec |= (0x0F << 4);
    superframe_spec |= (0x0F << 8);
    
    if (true) {
        superframe_spec |= (1U << 13);
    3aa8:	8f ef       	ldi	r24, 0xFF	; 255
    3aaa:	9f e2       	ldi	r25, 0x2F	; 47
    3aac:	02 c0       	rjmp	.+4      	; 0x3ab2 <ieee802_15_4_send_beacon+0x5c>
    }
    
    if (true == IEEE802_15_4_GET_I_AM_COORDINATOR()) {
        superframe_spec |= (1U << 14);
    3aae:	8f ef       	ldi	r24, 0xFF	; 255
    3ab0:	9f e6       	ldi	r25, 0x6F	; 111
    }
    
    if (true == IEEE802_15_4_GET_ASSOCIATION_PERMITTED()) {
    3ab2:	20 91 23 11 	lds	r18, 0x1123
    3ab6:	21 11       	cpse	r18, r1
        superframe_spec |= (1U << 15);
    3ab8:	90 68       	ori	r25, 0x80	; 128
    }
    
    memcpy((void *)(&beacon[index]), (void *)(&superframe_spec), sizeof(uint16_t));
    3aba:	90 93 70 11 	sts	0x1170, r25
    3abe:	80 93 6f 11 	sts	0x116F, r24
    index += sizeof(uint16_t);
    
    /* 5. No GTS fields. */
    beacon[index++] = 0;
    3ac2:	10 92 71 11 	sts	0x1171, r1
    /* 6. No pending data or addresses. */
    beacon[index++] = 0;
    3ac6:	10 92 72 11 	sts	0x1172, r1
    
    index += CRC_SIZE;
    
    /* Send beacon. */
    if (true != ieee802_15_4_send(index, beacon)) {
    3aca:	8d e0       	ldi	r24, 0x0D	; 13
    3acc:	68 e6       	ldi	r22, 0x68	; 104
    3ace:	71 e1       	ldi	r23, 0x11	; 17
    3ad0:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <ieee802_15_4_send>
    3ad4:	88 23       	and	r24, r24
    3ad6:	41 f0       	breq	.+16     	; 0x3ae8 <ieee802_15_4_send_beacon+0x92>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_BEACON_ACK);
    3ad8:	8f b7       	in	r24, 0x3f	; 63
    3ada:	89 83       	std	Y+1, r24	; 0x01
    3adc:	f8 94       	cli
    3ade:	8f e0       	ldi	r24, 0x0F	; 15
    3ae0:	80 93 8d 01 	sts	0x018D, r24
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	8f bf       	out	0x3f, r24	; 63
    }
}
    3ae8:	0f 90       	pop	r0
    3aea:	cf 91       	pop	r28
    3aec:	df 91       	pop	r29
    3aee:	08 95       	ret

00003af0 <ieee802_15_4_process_beacon_ack>:


void ieee802_15_4_process_beacon_ack(void *tx_status) {
    3af0:	df 93       	push	r29
    3af2:	cf 93       	push	r28
    3af4:	0f 92       	push	r0
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    /* Do not care about the transmission status. Just take the radio transceiver 
     * back to RX_AACK_ON, set the callback handler and state back to started.
     */
    (bool)tat_set_state(RX_AACK_ON);
    3afa:	86 e1       	ldi	r24, 0x16	; 22
    3afc:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
    3b00:	8f b7       	in	r24, 0x3f	; 63
    3b02:	89 83       	std	Y+1, r24	; 0x01
    3b04:	f8 94       	cli
    3b06:	85 e0       	ldi	r24, 0x05	; 5
    3b08:	80 93 8d 01 	sts	0x018D, r24
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	8f bf       	out	0x3f, r24	; 63
}
    3b10:	0f 90       	pop	r0
    3b12:	cf 91       	pop	r28
    3b14:	df 91       	pop	r29
    3b16:	08 95       	ret

00003b18 <goto_rx_aack_on>:
    3b18:	85 e3       	ldi	r24, 0x35	; 53
    3b1a:	8a 95       	dec	r24
    3b1c:	f1 f7       	brne	.-4      	; 0x3b1a <goto_rx_aack_on+0x2>
    3b1e:	00 00       	nop

static void goto_rx_aack_on(void) {
    /* Wait until the PLL_ON state is entered. */
    do {
        delay_us(20);
    } while (CMD_PLL_ON != tat_get_state());
    3b20:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <tat_get_state>
    3b24:	89 30       	cpi	r24, 0x09	; 9
    3b26:	c1 f7       	brne	.-16     	; 0x3b18 <goto_rx_aack_on>
    
    /* Go to RX_AACK_ON. */
    (bool)tat_set_state(RX_AACK_ON);
    3b28:	86 e1       	ldi	r24, 0x16	; 22
    3b2a:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
}
    3b2e:	08 95       	ret

00003b30 <ieee802_15_4_mlme_cmd_indication>:
 *         received frame has been ACK'ed.
 */
static void goto_rx_aack_on(void);


void ieee802_15_4_mlme_cmd_indication(void *cmd_frame_info) {
    3b30:	df 92       	push	r13
    3b32:	ef 92       	push	r14
    3b34:	ff 92       	push	r15
    3b36:	0f 93       	push	r16
    3b38:	1f 93       	push	r17
    3b3a:	df 93       	push	r29
    3b3c:	cf 93       	push	r28
    3b3e:	0f 92       	push	r0
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    ieee802_15_4_meta_data_t *frame_info = (ieee802_15_4_meta_data_t *)cmd_frame_info;
    3b44:	8c 01       	movw	r16, r24
    
    /* Read the actual command. */
    uint8_t cmd_type = frame_info->cmd_type;
    3b46:	dc 01       	movw	r26, r24
    3b48:	58 96       	adiw	r26, 0x18	; 24
    3b4a:	8c 91       	ld	r24, X
    3b4c:	58 97       	sbiw	r26, 0x18	; 24
    /* Handle the different commands given the state the device is operating in. */
    if ((ASSOCIATIONREQUEST == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) {
    3b4e:	81 30       	cpi	r24, 0x01	; 1
    3b50:	31 f5       	brne	.+76     	; 0x3b9e <ieee802_15_4_mlme_cmd_indication+0x6e>
    3b52:	80 91 8d 01 	lds	r24, 0x018D
    3b56:	85 30       	cpi	r24, 0x05	; 5
    3b58:	09 f0       	breq	.+2      	; 0x3b5c <ieee802_15_4_mlme_cmd_indication+0x2c>
    3b5a:	23 c1       	rjmp	.+582    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
        
        /* 7.5.3.1: "If a coordinator with macAssociationPermit set to false 
         * receives an association request command from a device, the command 
         * shall be ignored."
         */
        if (true != IEEE802_15_4_GET_ASSOCIATION_PERMITTED()) {
    3b5c:	80 91 23 11 	lds	r24, 0x1123
    3b60:	88 23       	and	r24, r24
    3b62:	09 f4       	brne	.+2      	; 0x3b66 <ieee802_15_4_mlme_cmd_indication+0x36>
    3b64:	1e c1       	rjmp	.+572    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
            goto_rx_aack_on();
            return; 
        }
        
        /* Check if the MLME_ASSOCIATE.indication callback is enabled. */
        ieee802_15_4_associate_indication_t mai_callback = ieee802_15_4_get_mlme_associate_indication();
    3b66:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <ieee802_15_4_get_mlme_associate_indication>
    3b6a:	ac 01       	movw	r20, r24
        if (NULL == mai_callback) { 
    3b6c:	00 97       	sbiw	r24, 0x00	; 0
    3b6e:	09 f4       	brne	.+2      	; 0x3b72 <ieee802_15_4_mlme_cmd_indication+0x42>
    3b70:	18 c1       	rjmp	.+560    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
            goto_rx_aack_on();
            return;
        }
            
        /* Build indication message. */
        memcpy((void *)(&(mai->DeviceAddress)), (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
    3b72:	8a e4       	ldi	r24, 0x4A	; 74
    3b74:	91 e1       	ldi	r25, 0x11	; 17
    3b76:	d8 01       	movw	r26, r16
    3b78:	50 96       	adiw	r26, 0x10	; 16
    3b7a:	28 e0       	ldi	r18, 0x08	; 8
    3b7c:	0d 90       	ld	r0, X+
    3b7e:	fc 01       	movw	r30, r24
    3b80:	01 92       	st	Z+, r0
    3b82:	cf 01       	movw	r24, r30
    3b84:	21 50       	subi	r18, 0x01	; 1
    3b86:	d1 f7       	brne	.-12     	; 0x3b7c <ieee802_15_4_mlme_cmd_indication+0x4c>
        mai->CapabilityInformation = *(frame_info->msdu);
    3b88:	f8 01       	movw	r30, r16
    3b8a:	a1 8d       	ldd	r26, Z+25	; 0x19
    3b8c:	b2 8d       	ldd	r27, Z+26	; 0x1a
    3b8e:	8c 91       	ld	r24, X
    3b90:	80 93 52 11 	sts	0x1152, r24
                
        /* Execute the callback. */
        mai_callback(mai);
    3b94:	8a e4       	ldi	r24, 0x4A	; 74
    3b96:	91 e1       	ldi	r25, 0x11	; 17
    3b98:	fa 01       	movw	r30, r20
    3b9a:	09 95       	icall
    3b9c:	02 c1       	rjmp	.+516    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
        
        goto_rx_aack_on();
    } else if (((DISASSOCIATIONNOTIFICATION == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) ||
    3b9e:	83 30       	cpi	r24, 0x03	; 3
    3ba0:	09 f0       	breq	.+2      	; 0x3ba4 <ieee802_15_4_mlme_cmd_indication+0x74>
    3ba2:	46 c0       	rjmp	.+140    	; 0x3c30 <ieee802_15_4_mlme_cmd_indication+0x100>
    3ba4:	80 91 8d 01 	lds	r24, 0x018D
    3ba8:	84 50       	subi	r24, 0x04	; 4
    3baa:	82 30       	cpi	r24, 0x02	; 2
    3bac:	08 f0       	brcs	.+2      	; 0x3bb0 <ieee802_15_4_mlme_cmd_indication+0x80>
    3bae:	f9 c0       	rjmp	.+498    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
               ((DISASSOCIATIONNOTIFICATION == cmd_type) && (IEEE_MAC_ASSOCIATED == IEEE802_15_4_GET_STATE()))) {
        /* CMD: DISASSOCIATIONNOTIFICATION received. */
        
        /* Check if the MLME_ASSOCIATE.indication callback is enabled. */
        ieee802_15_4_disassociate_indication_t dai_callback = ieee802_15_4_get_mlme_disassociate_indication();
    3bb0:	0e 94 44 17 	call	0x2e88	; 0x2e88 <ieee802_15_4_get_mlme_disassociate_indication>
    3bb4:	ac 01       	movw	r20, r24
        if (NULL == dai_callback) {
    3bb6:	00 97       	sbiw	r24, 0x00	; 0
    3bb8:	09 f4       	brne	.+2      	; 0x3bbc <ieee802_15_4_mlme_cmd_indication+0x8c>
    3bba:	f3 c0       	rjmp	.+486    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
        mlme_disassociate_ind_t *mdi = (mlme_disassociate_ind_t *)IEEE802_15_4_GET_INDICATION_BUFFER();
        
        /* Set the DeviceAddress, aka. the address of the device requesting the disassociaton which 
         * is always contained in the source address. 
         */
        memcpy((void *)(&(mdi->DeviceAddress)), (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
    3bbc:	8a e4       	ldi	r24, 0x4A	; 74
    3bbe:	91 e1       	ldi	r25, 0x11	; 17
    3bc0:	d8 01       	movw	r26, r16
    3bc2:	50 96       	adiw	r26, 0x10	; 16
    3bc4:	28 e0       	ldi	r18, 0x08	; 8
    3bc6:	0d 90       	ld	r0, X+
    3bc8:	fc 01       	movw	r30, r24
    3bca:	01 92       	st	Z+, r0
    3bcc:	cf 01       	movw	r24, r30
    3bce:	21 50       	subi	r18, 0x01	; 1
    3bd0:	d1 f7       	brne	.-12     	; 0x3bc6 <ieee802_15_4_mlme_cmd_indication+0x96>
        
        /* Extract disassociate reason. */
        mdi->DisassociateReason = *(frame_info->msdu);
    3bd2:	f8 01       	movw	r30, r16
    3bd4:	a1 8d       	ldd	r26, Z+25	; 0x19
    3bd6:	b2 8d       	ldd	r27, Z+26	; 0x1a
    3bd8:	8c 91       	ld	r24, X
    3bda:	80 93 52 11 	sts	0x1152, r24
        
        /* Execute the associated callback. */
        dai_callback(mdi);
    3bde:	8a e4       	ldi	r24, 0x4A	; 74
    3be0:	91 e1       	ldi	r25, 0x11	; 17
    3be2:	fa 01       	movw	r30, r20
    3be4:	09 95       	icall
        
        if (IEEE_MAC_ASSOCIATED == IEEE802_15_4_GET_STATE()) {
    3be6:	80 91 8d 01 	lds	r24, 0x018D
    3bea:	84 30       	cpi	r24, 0x04	; 4
    3bec:	09 f0       	breq	.+2      	; 0x3bf0 <ieee802_15_4_mlme_cmd_indication+0xc0>
    3bee:	db c0       	rjmp	.+438    	; 0x3da6 <ieee802_15_4_mlme_cmd_indication+0x276>
            tat_go_to_sleep();
    3bf0:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
            
            /* Clear coordinator addres. */
            IEEE802_15_4_SET_COORD_EXTENDED_ADDRESS(0);
    3bf4:	10 92 36 11 	sts	0x1136, r1
    3bf8:	10 92 37 11 	sts	0x1137, r1
    3bfc:	10 92 38 11 	sts	0x1138, r1
    3c00:	10 92 39 11 	sts	0x1139, r1
    3c04:	10 92 3a 11 	sts	0x113A, r1
    3c08:	10 92 3b 11 	sts	0x113B, r1
    3c0c:	10 92 3c 11 	sts	0x113C, r1
    3c10:	10 92 3d 11 	sts	0x113D, r1
            IEEE802_15_4_SET_COORD_SHORT_ADDRESS(BROADCAST);
    3c14:	8f ef       	ldi	r24, 0xFF	; 255
    3c16:	9f ef       	ldi	r25, 0xFF	; 255
    3c18:	90 93 2b 11 	sts	0x112B, r25
    3c1c:	80 93 2a 11 	sts	0x112A, r24
            
            IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    3c20:	8f b7       	in	r24, 0x3f	; 63
    3c22:	89 83       	std	Y+1, r24	; 0x01
    3c24:	f8 94       	cli
    3c26:	10 92 8d 01 	sts	0x018D, r1
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	8f bf       	out	0x3f, r24	; 63
    3c2e:	bb c0       	rjmp	.+374    	; 0x3da6 <ieee802_15_4_mlme_cmd_indication+0x276>
        }
    } else if ((DATAREQUEST == cmd_type) && (IEEE_MAC_WAITING_FOR_DATA_REQUEST == IEEE802_15_4_GET_STATE())) {
    3c30:	84 30       	cpi	r24, 0x04	; 4
    3c32:	51 f4       	brne	.+20     	; 0x3c48 <ieee802_15_4_mlme_cmd_indication+0x118>
    3c34:	80 91 8d 01 	lds	r24, 0x018D
    3c38:	8c 30       	cpi	r24, 0x0C	; 12
    3c3a:	09 f0       	breq	.+2      	; 0x3c3e <ieee802_15_4_mlme_cmd_indication+0x10e>
    3c3c:	b2 c0       	rjmp	.+356    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
        /* CMD: DATAREQUEST received. */
        /* Send Association response frame. */
        vrt_timer_stop_high_pri_delay();
    3c3e:	0e 94 40 33 	call	0x6680	; 0x6680 <vrt_timer_stop_high_pri_delay>
        ieee802_15_4_send_association_response();
    3c42:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <ieee802_15_4_send_association_response>
    3c46:	af c0       	rjmp	.+350    	; 0x3da6 <ieee802_15_4_mlme_cmd_indication+0x276>
    } else if ((ORPHANNOTIFICATION == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) {
    3c48:	86 30       	cpi	r24, 0x06	; 6
    3c4a:	d9 f4       	brne	.+54     	; 0x3c82 <ieee802_15_4_mlme_cmd_indication+0x152>
    3c4c:	80 91 8d 01 	lds	r24, 0x018D
    3c50:	85 30       	cpi	r24, 0x05	; 5
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <ieee802_15_4_mlme_cmd_indication+0x126>
    3c54:	a6 c0       	rjmp	.+332    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
        /* CMD: ORPHANNOTIFICATION received. */
        /* Check if the MLME_ASSOCIATE.indication callback is enabled. */
        ieee802_15_4_orphan_indication_t oi_callback = ieee802_15_4_get_mlme_orphan_indication();
    3c56:	0e 94 6d 17 	call	0x2eda	; 0x2eda <ieee802_15_4_get_mlme_orphan_indication>
    3c5a:	ac 01       	movw	r20, r24
        if (NULL == oi_callback) {
    3c5c:	00 97       	sbiw	r24, 0x00	; 0
    3c5e:	09 f4       	brne	.+2      	; 0x3c62 <ieee802_15_4_mlme_cmd_indication+0x132>
    3c60:	a0 c0       	rjmp	.+320    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
        }
                   
        /* Get hold of some memory to build the Orphan indication. */
        mlme_orphan_ind_t *moi = (mlme_orphan_ind_t *)IEEE802_15_4_GET_INDICATION_BUFFER();
        
        memcpy((void *)(&moi->OrphanAddress), (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
    3c62:	8a e4       	ldi	r24, 0x4A	; 74
    3c64:	91 e1       	ldi	r25, 0x11	; 17
    3c66:	d8 01       	movw	r26, r16
    3c68:	50 96       	adiw	r26, 0x10	; 16
    3c6a:	28 e0       	ldi	r18, 0x08	; 8
    3c6c:	0d 90       	ld	r0, X+
    3c6e:	fc 01       	movw	r30, r24
    3c70:	01 92       	st	Z+, r0
    3c72:	cf 01       	movw	r24, r30
    3c74:	21 50       	subi	r18, 0x01	; 1
    3c76:	d1 f7       	brne	.-12     	; 0x3c6c <ieee802_15_4_mlme_cmd_indication+0x13c>
        
        /* Execute callback. */
        oi_callback(moi);
    3c78:	8a e4       	ldi	r24, 0x4A	; 74
    3c7a:	91 e1       	ldi	r25, 0x11	; 17
    3c7c:	fa 01       	movw	r30, r20
    3c7e:	09 95       	icall
    } else if ((DATAREQUEST == cmd_type) && (IEEE_MAC_WAITING_FOR_DATA_REQUEST == IEEE802_15_4_GET_STATE())) {
        /* CMD: DATAREQUEST received. */
        /* Send Association response frame. */
        vrt_timer_stop_high_pri_delay();
        ieee802_15_4_send_association_response();
    } else if ((ORPHANNOTIFICATION == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) {
    3c80:	92 c0       	rjmp	.+292    	; 0x3da6 <ieee802_15_4_mlme_cmd_indication+0x276>
        
        memcpy((void *)(&moi->OrphanAddress), (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
        
        /* Execute callback. */
        oi_callback(moi);
    } else if ((BEACONREQUEST == cmd_type) && (IEEE_MAC_STARTED == IEEE802_15_4_GET_STATE())) {
    3c82:	87 30       	cpi	r24, 0x07	; 7
    3c84:	41 f4       	brne	.+16     	; 0x3c96 <ieee802_15_4_mlme_cmd_indication+0x166>
    3c86:	80 91 8d 01 	lds	r24, 0x018D
    3c8a:	85 30       	cpi	r24, 0x05	; 5
    3c8c:	09 f0       	breq	.+2      	; 0x3c90 <ieee802_15_4_mlme_cmd_indication+0x160>
    3c8e:	89 c0       	rjmp	.+274    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
        /* CMD: BEACONREQUEST received. */
        ieee802_15_4_send_beacon();
    3c90:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <ieee802_15_4_send_beacon>
    3c94:	88 c0       	rjmp	.+272    	; 0x3da6 <ieee802_15_4_mlme_cmd_indication+0x276>
    } else if ((COORDINATORREALIGNMENT == cmd_type) && (IEEE_MAC_BUSY_SCANNING == IEEE802_15_4_GET_STATE())) {
    3c96:	88 30       	cpi	r24, 0x08	; 8
    3c98:	09 f0       	breq	.+2      	; 0x3c9c <ieee802_15_4_mlme_cmd_indication+0x16c>
    3c9a:	4e c0       	rjmp	.+156    	; 0x3d38 <ieee802_15_4_mlme_cmd_indication+0x208>
    3c9c:	80 91 8d 01 	lds	r24, 0x018D
    3ca0:	82 30       	cpi	r24, 0x02	; 2
    3ca2:	09 f0       	breq	.+2      	; 0x3ca6 <ieee802_15_4_mlme_cmd_indication+0x176>
    3ca4:	7e c0       	rjmp	.+252    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
        
        /* Stop timer, clear callback and force radio transceiver to the TRX_OFF 
         * state. The final transition to sleep will be done by the code that 
         * executes the confirm callback.
         */
        vrt_timer_stop_high_pri_delay();
    3ca6:	0e 94 40 33 	call	0x6680	; 0x6680 <vrt_timer_stop_high_pri_delay>
        rf230_subregister_write(SR_TRX_CMD, CMD_TRX_OFF);
    3caa:	82 e0       	ldi	r24, 0x02	; 2
    3cac:	6f e1       	ldi	r22, 0x1F	; 31
    3cae:	40 e0       	ldi	r20, 0x00	; 0
    3cb0:	28 e0       	ldi	r18, 0x08	; 8
    3cb2:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        
        uint8_t status = MAC_INVALID_PARAMETER;
        if (7 != (frame_info->msdu_length)) { 
    3cb6:	d8 01       	movw	r26, r16
    3cb8:	5b 96       	adiw	r26, 0x1b	; 27
    3cba:	8c 91       	ld	r24, X
    3cbc:	5b 97       	sbiw	r26, 0x1b	; 27
    3cbe:	87 30       	cpi	r24, 0x07	; 7
    3cc0:	19 f0       	breq	.+6      	; 0x3cc8 <ieee802_15_4_mlme_cmd_indication+0x198>
         * executes the confirm callback.
         */
        vrt_timer_stop_high_pri_delay();
        rf230_subregister_write(SR_TRX_CMD, CMD_TRX_OFF);
        
        uint8_t status = MAC_INVALID_PARAMETER;
    3cc2:	88 ee       	ldi	r24, 0xE8	; 232
    3cc4:	e8 2e       	mov	r14, r24
    3cc6:	01 c0       	rjmp	.+2      	; 0x3cca <ieee802_15_4_mlme_cmd_indication+0x19a>
        if (7 != (frame_info->msdu_length)) { 
        } else {
            status = MAC_SUCCESS;
    3cc8:	ee 24       	eor	r14, r14
        }
        
        uint8_t *cr = frame_info->msdu;
    3cca:	f8 01       	movw	r30, r16
    3ccc:	01 8d       	ldd	r16, Z+25	; 0x19
    3cce:	12 8d       	ldd	r17, Z+26	; 0x1a
        
        /* Extract PAN ID. */
        uint16_t conv = 0;
        conv = cr[1] << 8;
    3cd0:	d8 01       	movw	r26, r16
    3cd2:	11 96       	adiw	r26, 0x01	; 1
    3cd4:	3c 91       	ld	r19, X
    3cd6:	11 97       	sbiw	r26, 0x01	; 1
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
        conv |= cr[0];
    3cda:	8c 91       	ld	r24, X
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
        (uint8_t)ieee802_15_4_set_pan_id(conv);
    3cde:	82 2b       	or	r24, r18
    3ce0:	93 2b       	or	r25, r19
    3ce2:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ieee802_15_4_set_pan_id>
        
        /* Extract Coordinator short address. */
        conv = 0;
        conv = cr[3] << 8;
    3ce6:	f8 01       	movw	r30, r16
    3ce8:	33 81       	ldd	r19, Z+3	; 0x03
    3cea:	20 e0       	ldi	r18, 0x00	; 0
        conv |= cr[2];
    3cec:	82 81       	ldd	r24, Z+2	; 0x02
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	82 2b       	or	r24, r18
    3cf2:	93 2b       	or	r25, r19
        IEEE802_15_4_SET_COORD_SHORT_ADDRESS(conv);
    3cf4:	90 93 2b 11 	sts	0x112B, r25
    3cf8:	80 93 2a 11 	sts	0x112A, r24
        
        /* Extract Short address */
        conv = cr[6] << 8;
    3cfc:	36 81       	ldd	r19, Z+6	; 0x06
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
        conv |= cr[5];
    3d00:	85 81       	ldd	r24, Z+5	; 0x05
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	82 2b       	or	r24, r18
    3d06:	93 2b       	or	r25, r19
        if (BROADCAST != conv) { (uint8_t)ieee802_15_4_set_pan_id(conv); }
    3d08:	ff ef       	ldi	r31, 0xFF	; 255
    3d0a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d0c:	9f 07       	cpc	r25, r31
    3d0e:	11 f0       	breq	.+4      	; 0x3d14 <ieee802_15_4_mlme_cmd_indication+0x1e4>
    3d10:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ieee802_15_4_set_pan_id>
        
        /* Extract channel. */
        uint8_t channel = cr[4];
        (uint8_t)ieee802_15_4_set_channel(channel); // Set the appropriate PIB entries
    3d14:	d8 01       	movw	r26, r16
    3d16:	14 96       	adiw	r26, 0x04	; 4
    3d18:	8c 91       	ld	r24, X
    3d1a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <ieee802_15_4_set_channel>
        
        mlme_scan_conf_t *msc = (mlme_scan_conf_t *)mac_param.scan.msc;
    3d1e:	60 91 48 11 	lds	r22, 0x1148
    3d22:	70 91 49 11 	lds	r23, 0x1149
        msc->status = status;
    3d26:	fb 01       	movw	r30, r22
    3d28:	e0 82       	st	Z, r14
        
        if (true != vrt_post_event(ieee802_15_4_scan_do_confirm, (void *)msc)) {
    3d2a:	8b e2       	ldi	r24, 0x2B	; 43
    3d2c:	93 e2       	ldi	r25, 0x23	; 35
    3d2e:	0e 94 85 29 	call	0x530a	; 0x530a <vrt_post_event>
    3d32:	88 23       	and	r24, r24
    3d34:	c1 f5       	brne	.+112    	; 0x3da6 <ieee802_15_4_mlme_cmd_indication+0x276>
    3d36:	35 c0       	rjmp	.+106    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
            goto_rx_aack_on();
        }
    } else if ((ASSOCIATIONRESPONSE == cmd_type) && (IEEE_MAC_WAITING_ASSOCIATION_RESPONSE == IEEE802_15_4_GET_STATE())) {
    3d38:	82 30       	cpi	r24, 0x02	; 2
    3d3a:	99 f5       	brne	.+102    	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
    3d3c:	80 91 8d 01 	lds	r24, 0x018D
    3d40:	89 30       	cpi	r24, 0x09	; 9
    3d42:	79 f5       	brne	.+94     	; 0x3da2 <ieee802_15_4_mlme_cmd_indication+0x272>
        /* Stop symbol timer running. */
        vrt_timer_stop_high_pri_delay();
    3d44:	0e 94 40 33 	call	0x6680	; 0x6680 <vrt_timer_stop_high_pri_delay>
        
        /* Extract association status. Position xx.*/
        uint8_t *association_response = frame_info->msdu;
    3d48:	d8 01       	movw	r26, r16
    3d4a:	59 96       	adiw	r26, 0x19	; 25
    3d4c:	ed 91       	ld	r30, X+
    3d4e:	fc 91       	ld	r31, X
    3d50:	5a 97       	sbiw	r26, 0x1a	; 26
        
        /* Extract and set short address. Positions 22 and 23.*/
        uint16_t short_addr = association_response[1] << 8;
    3d52:	91 81       	ldd	r25, Z+1	; 0x01
    3d54:	80 e0       	ldi	r24, 0x00	; 0
        short_addr         |= association_response[0];
    3d56:	e0 80       	ld	r14, Z
    3d58:	ff 24       	eor	r15, r15
    3d5a:	e8 2a       	or	r14, r24
    3d5c:	f9 2a       	or	r15, r25
        
        /* Extract the association status. Positions 24.*/
        uint8_t status = association_response[2];
    3d5e:	d2 80       	ldd	r13, Z+2	; 0x02
        
        /* The return from the set function is not used, since it will only report
         * back false if the radio transceiver could not be taken out of sleep.
         * However the system is guaranteed not to sleep in this mode.
         */
        (uint8_t)ieee802_15_4_set_short_address(short_addr);
    3d60:	c7 01       	movw	r24, r14
    3d62:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ieee802_15_4_set_short_address>
    
        /* Set coordinator extended address. */
        memcpy((void *)(&IEEE802_15_4_GET_COORD_EXTENDED_ADDRESS()), \
    3d66:	f8 01       	movw	r30, r16
    3d68:	80 89       	ldd	r24, Z+16	; 0x10
    3d6a:	80 93 36 11 	sts	0x1136, r24
    3d6e:	81 89       	ldd	r24, Z+17	; 0x11
    3d70:	80 93 37 11 	sts	0x1137, r24
    3d74:	82 89       	ldd	r24, Z+18	; 0x12
    3d76:	80 93 38 11 	sts	0x1138, r24
    3d7a:	83 89       	ldd	r24, Z+19	; 0x13
    3d7c:	80 93 39 11 	sts	0x1139, r24
    3d80:	84 89       	ldd	r24, Z+20	; 0x14
    3d82:	80 93 3a 11 	sts	0x113A, r24
    3d86:	85 89       	ldd	r24, Z+21	; 0x15
    3d88:	80 93 3b 11 	sts	0x113B, r24
    3d8c:	86 89       	ldd	r24, Z+22	; 0x16
    3d8e:	80 93 3c 11 	sts	0x113C, r24
    3d92:	87 89       	ldd	r24, Z+23	; 0x17
    3d94:	80 93 3d 11 	sts	0x113D, r24
               (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
        
        /* Issue the confirm message back to the user. */
        issue_associate_confirm(status, short_addr);
    3d98:	8d 2d       	mov	r24, r13
    3d9a:	b7 01       	movw	r22, r14
    3d9c:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <issue_associate_confirm>
        msc->status = status;
        
        if (true != vrt_post_event(ieee802_15_4_scan_do_confirm, (void *)msc)) {
            goto_rx_aack_on();
        }
    } else if ((ASSOCIATIONRESPONSE == cmd_type) && (IEEE_MAC_WAITING_ASSOCIATION_RESPONSE == IEEE802_15_4_GET_STATE())) {
    3da0:	02 c0       	rjmp	.+4      	; 0x3da6 <ieee802_15_4_mlme_cmd_indication+0x276>
               (void *)(&(frame_info->src_addr)), sizeof(uint64_t));
        
        /* Issue the confirm message back to the user. */
        issue_associate_confirm(status, short_addr);
    } else {
        goto_rx_aack_on();
    3da2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <goto_rx_aack_on>
    }
}
    3da6:	0f 90       	pop	r0
    3da8:	cf 91       	pop	r28
    3daa:	df 91       	pop	r29
    3dac:	1f 91       	pop	r17
    3dae:	0f 91       	pop	r16
    3db0:	ff 90       	pop	r15
    3db2:	ef 90       	pop	r14
    3db4:	df 90       	pop	r13
    3db6:	08 95       	ret

00003db8 <ieee802_15_4_data_indication_do_callback>:
        (bool)tat_set_state(RX_AACK_ON);
    }
}


void ieee802_15_4_data_indication_do_callback(void *mdi) {
    3db8:	0f 93       	push	r16
    3dba:	1f 93       	push	r17
    3dbc:	cf 93       	push	r28
    3dbe:	df 93       	push	r29
    3dc0:	ec 01       	movw	r28, r24
    ieee802_15_4_data_indication_t mdi_callback = ieee802_15_4_get_mcps_data_indication();
    3dc2:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <ieee802_15_4_get_mcps_data_indication>
    3dc6:	8c 01       	movw	r16, r24
    3dc8:	85 e3       	ldi	r24, 0x35	; 53
    3dca:	8a 95       	dec	r24
    3dcc:	f1 f7       	brne	.-4      	; 0x3dca <ieee802_15_4_data_indication_do_callback+0x12>
    3dce:	00 00       	nop
    
    do {
        delay_us(20);
    } while (CMD_PLL_ON != tat_get_state());
    3dd0:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <tat_get_state>
    3dd4:	89 30       	cpi	r24, 0x09	; 9
    3dd6:	c1 f7       	brne	.-16     	; 0x3dc8 <ieee802_15_4_data_indication_do_callback+0x10>
    
    if (NULL == mdi_callback) {
    3dd8:	01 15       	cp	r16, r1
    3dda:	11 05       	cpc	r17, r1
    3ddc:	21 f4       	brne	.+8      	; 0x3de6 <ieee802_15_4_data_indication_do_callback+0x2e>
        (bool)tat_set_state(RX_AACK_ON);
    3dde:	86 e1       	ldi	r24, 0x16	; 22
    3de0:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
        
        return;
    3de4:	06 c0       	rjmp	.+12     	; 0x3df2 <ieee802_15_4_data_indication_do_callback+0x3a>
    }
    
    /* Execute the callback. */
    mdi_callback((mcps_data_ind_t *)mdi);
    3de6:	ce 01       	movw	r24, r28
    3de8:	f8 01       	movw	r30, r16
    3dea:	09 95       	icall
    MEM_FREE(mdi);
    3dec:	ce 01       	movw	r24, r28
    3dee:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
}
    3df2:	df 91       	pop	r29
    3df4:	cf 91       	pop	r28
    3df6:	1f 91       	pop	r17
    3df8:	0f 91       	pop	r16
    3dfa:	08 95       	ret

00003dfc <ieee802_15_4_data_request>:
static ieee802_15_4_state_t original_mac_state = IEEE_MAC_IDLE;
static mcps_data_conf_t *confirm_ptr;
static void (*mcps_data_confirm)(mcps_data_conf_t *mdc) = NULL;
/*================================= PROTOTYPES       =========================*/

bool ieee802_15_4_data_request(mcps_data_req_t *mdr) {
    3dfc:	ff 92       	push	r15
    3dfe:	0f 93       	push	r16
    3e00:	1f 93       	push	r17
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	0f 92       	push	r0
    3e08:	cd b7       	in	r28, 0x3d	; 61
    3e0a:	de b7       	in	r29, 0x3e	; 62
    3e0c:	8c 01       	movw	r16, r24
    /* Check first that the MAC is in a state where it is allowed to send
     * data. A coordinator must be started and a router or device must be associated.
     */
    if ((IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) && 
    3e0e:	e0 91 8d 01 	lds	r30, 0x018D
    3e12:	8e 2f       	mov	r24, r30
    3e14:	84 50       	subi	r24, 0x04	; 4
    3e16:	82 30       	cpi	r24, 0x02	; 2
    3e18:	08 f0       	brcs	.+2      	; 0x3e1c <ieee802_15_4_data_request+0x20>
    3e1a:	0f c1       	rjmp	.+542    	; 0x403a <ieee802_15_4_data_request+0x23e>
        (IEEE_MAC_ASSOCIATED != IEEE802_15_4_GET_STATE())) { return false; }
    
    /* Perform sanity check on function parameters. */
    if (NULL == mdr) { return false; }
    3e1c:	01 15       	cp	r16, r1
    3e1e:	11 05       	cpc	r17, r1
    3e20:	09 f4       	brne	.+2      	; 0x3e24 <ieee802_15_4_data_request+0x28>
    3e22:	0b c1       	rjmp	.+534    	; 0x403a <ieee802_15_4_data_request+0x23e>
    if (NULL == (mdr->data)) { return false; }
    3e24:	d8 01       	movw	r26, r16
    3e26:	56 96       	adiw	r26, 0x16	; 22
    3e28:	8d 91       	ld	r24, X+
    3e2a:	9c 91       	ld	r25, X
    3e2c:	57 97       	sbiw	r26, 0x17	; 23
    3e2e:	00 97       	sbiw	r24, 0x00	; 0
    3e30:	09 f4       	brne	.+2      	; 0x3e34 <ieee802_15_4_data_request+0x38>
    3e32:	03 c1       	rjmp	.+518    	; 0x403a <ieee802_15_4_data_request+0x23e>
    if (NULL == (mdr->mcps_data_confirm)) { return false; }
    3e34:	58 96       	adiw	r26, 0x18	; 24
    3e36:	8d 91       	ld	r24, X+
    3e38:	9c 91       	ld	r25, X
    3e3a:	59 97       	sbiw	r26, 0x19	; 25
    3e3c:	00 97       	sbiw	r24, 0x00	; 0
    3e3e:	09 f4       	brne	.+2      	; 0x3e42 <ieee802_15_4_data_request+0x46>
    3e40:	fc c0       	rjmp	.+504    	; 0x403a <ieee802_15_4_data_request+0x23e>
    
    // Check that the source address mode is a valid one.
    if ((mdr->SrcAddrMode != WPAN_ADDRMODE_NONE)  && 
    3e42:	7c 91       	ld	r23, X
    3e44:	77 23       	and	r23, r23
    3e46:	29 f0       	breq	.+10     	; 0x3e52 <ieee802_15_4_data_request+0x56>
    3e48:	72 30       	cpi	r23, 0x02	; 2
    3e4a:	19 f0       	breq	.+6      	; 0x3e52 <ieee802_15_4_data_request+0x56>
        (mdr->SrcAddrMode != WPAN_ADDRMODE_SHORT) &&
    3e4c:	73 30       	cpi	r23, 0x03	; 3
    3e4e:	09 f0       	breq	.+2      	; 0x3e52 <ieee802_15_4_data_request+0x56>
    3e50:	f4 c0       	rjmp	.+488    	; 0x403a <ieee802_15_4_data_request+0x23e>
        (mdr->SrcAddrMode != WPAN_ADDRMODE_LONG)) { return false; }
    
    // Check that the destination address mode is a valid one.
    if ((mdr->DstAddrMode != WPAN_ADDRMODE_NONE)  && 
    3e52:	d8 01       	movw	r26, r16
    3e54:	19 96       	adiw	r26, 0x09	; 9
    3e56:	6c 91       	ld	r22, X
    3e58:	19 97       	sbiw	r26, 0x09	; 9
    3e5a:	66 23       	and	r22, r22
    3e5c:	29 f0       	breq	.+10     	; 0x3e68 <ieee802_15_4_data_request+0x6c>
    3e5e:	62 30       	cpi	r22, 0x02	; 2
    3e60:	19 f0       	breq	.+6      	; 0x3e68 <ieee802_15_4_data_request+0x6c>
        (mdr->DstAddrMode != WPAN_ADDRMODE_SHORT) && 
    3e62:	63 30       	cpi	r22, 0x03	; 3
    3e64:	09 f0       	breq	.+2      	; 0x3e68 <ieee802_15_4_data_request+0x6c>
    3e66:	e9 c0       	rjmp	.+466    	; 0x403a <ieee802_15_4_data_request+0x23e>
        (mdr->DstAddrMode != WPAN_ADDRMODE_LONG)) { return false; }
    
    // At least one address must be available.
    if ((mdr->SrcAddrMode == WPAN_ADDRMODE_NONE) && 
    3e68:	77 23       	and	r23, r23
    3e6a:	19 f4       	brne	.+6      	; 0x3e72 <ieee802_15_4_data_request+0x76>
    3e6c:	66 23       	and	r22, r22
    3e6e:	09 f4       	brne	.+2      	; 0x3e72 <ieee802_15_4_data_request+0x76>
    3e70:	e4 c0       	rjmp	.+456    	; 0x403a <ieee802_15_4_data_request+0x23e>
        (mdr->DstAddrMode == WPAN_ADDRMODE_NONE)) { return false; }
    
    // Check whether somebody requests an ACK of broadcast frame. Not allowed.
    if (((mdr->TxOptions & ACK_TRANSMISSION) == ACK_TRANSMISSION) && 
    3e72:	d8 01       	movw	r26, r16
    3e74:	54 96       	adiw	r26, 0x14	; 20
    3e76:	2c 91       	ld	r18, X
    3e78:	54 97       	sbiw	r26, 0x14	; 20
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	a9 01       	movw	r20, r18
    3e7e:	41 70       	andi	r20, 0x01	; 1
    3e80:	50 70       	andi	r21, 0x00	; 0
    3e82:	20 ff       	sbrs	r18, 0
    3e84:	2b c0       	rjmp	.+86     	; 0x3edc <ieee802_15_4_data_request+0xe0>
    3e86:	62 30       	cpi	r22, 0x02	; 2
    3e88:	49 f5       	brne	.+82     	; 0x3edc <ieee802_15_4_data_request+0xe0>
        (mdr->DstAddrMode == FCF_SHORT_ADDR) && 
    3e8a:	1c 96       	adiw	r26, 0x0c	; 12
    3e8c:	2c 91       	ld	r18, X
    3e8e:	1c 97       	sbiw	r26, 0x0c	; 12
    3e90:	2f 3f       	cpi	r18, 0xFF	; 255
    3e92:	21 f5       	brne	.+72     	; 0x3edc <ieee802_15_4_data_request+0xe0>
    3e94:	1d 96       	adiw	r26, 0x0d	; 13
    3e96:	2c 91       	ld	r18, X
    3e98:	1d 97       	sbiw	r26, 0x0d	; 13
    3e9a:	2f 3f       	cpi	r18, 0xFF	; 255
    3e9c:	f9 f4       	brne	.+62     	; 0x3edc <ieee802_15_4_data_request+0xe0>
    3e9e:	1e 96       	adiw	r26, 0x0e	; 14
    3ea0:	2c 91       	ld	r18, X
    3ea2:	1e 97       	sbiw	r26, 0x0e	; 14
    3ea4:	22 23       	and	r18, r18
    3ea6:	d1 f4       	brne	.+52     	; 0x3edc <ieee802_15_4_data_request+0xe0>
    3ea8:	1f 96       	adiw	r26, 0x0f	; 15
    3eaa:	2c 91       	ld	r18, X
    3eac:	1f 97       	sbiw	r26, 0x0f	; 15
    3eae:	22 23       	and	r18, r18
    3eb0:	a9 f4       	brne	.+42     	; 0x3edc <ieee802_15_4_data_request+0xe0>
    3eb2:	50 96       	adiw	r26, 0x10	; 16
    3eb4:	2c 91       	ld	r18, X
    3eb6:	50 97       	sbiw	r26, 0x10	; 16
    3eb8:	22 23       	and	r18, r18
    3eba:	81 f4       	brne	.+32     	; 0x3edc <ieee802_15_4_data_request+0xe0>
    3ebc:	51 96       	adiw	r26, 0x11	; 17
    3ebe:	2c 91       	ld	r18, X
    3ec0:	51 97       	sbiw	r26, 0x11	; 17
    3ec2:	22 23       	and	r18, r18
    3ec4:	59 f4       	brne	.+22     	; 0x3edc <ieee802_15_4_data_request+0xe0>
    3ec6:	52 96       	adiw	r26, 0x12	; 18
    3ec8:	2c 91       	ld	r18, X
    3eca:	52 97       	sbiw	r26, 0x12	; 18
    3ecc:	22 23       	and	r18, r18
    3ece:	31 f4       	brne	.+12     	; 0x3edc <ieee802_15_4_data_request+0xe0>
    3ed0:	53 96       	adiw	r26, 0x13	; 19
    3ed2:	2c 91       	ld	r18, X
    3ed4:	53 97       	sbiw	r26, 0x13	; 19
    3ed6:	22 23       	and	r18, r18
    3ed8:	09 f4       	brne	.+2      	; 0x3edc <ieee802_15_4_data_request+0xe0>
    3eda:	af c0       	rjmp	.+350    	; 0x403a <ieee802_15_4_data_request+0x23e>
        (mdr->DstAddr == BROADCAST)) { return false; }
    
    // Check whether source or destination address is set to reserved values.
    if ((mdr->SrcAddrMode == FCF_RESERVED_ADDR) || 
    3edc:	71 30       	cpi	r23, 0x01	; 1
    3ede:	09 f4       	brne	.+2      	; 0x3ee2 <ieee802_15_4_data_request+0xe6>
    3ee0:	ac c0       	rjmp	.+344    	; 0x403a <ieee802_15_4_data_request+0x23e>
    3ee2:	61 30       	cpi	r22, 0x01	; 1
    3ee4:	09 f4       	brne	.+2      	; 0x3ee8 <ieee802_15_4_data_request+0xec>
    3ee6:	a9 c0       	rjmp	.+338    	; 0x403a <ieee802_15_4_data_request+0x23e>
        (mdr->DstAddrMode == FCF_RESERVED_ADDR)) { return false; }
    
    /* Set some internal variables that is important in the following execution. */
    mcps_data_confirm = mdr->mcps_data_confirm;
    3ee8:	90 93 41 0d 	sts	0x0D41, r25
    3eec:	80 93 40 0d 	sts	0x0D40, r24
    confirm_ptr = &(mdr->mdc);
    3ef0:	c8 01       	movw	r24, r16
    3ef2:	4a 96       	adiw	r24, 0x1a	; 26
    3ef4:	90 93 3f 0d 	sts	0x0D3F, r25
    3ef8:	80 93 3e 0d 	sts	0x0D3E, r24
    original_mac_state = IEEE802_15_4_GET_STATE();
    3efc:	e0 93 42 0d 	sts	0x0D42, r30
    
    /* Verify that the data length is valid. */
    if (0 == (mdr->msduLength)) { return false; }
    3f00:	f8 01       	movw	r30, r16
    3f02:	85 89       	ldd	r24, Z+21	; 0x15
    3f04:	88 23       	and	r24, r24
    3f06:	09 f4       	brne	.+2      	; 0x3f0a <ieee802_15_4_data_request+0x10e>
    3f08:	98 c0       	rjmp	.+304    	; 0x403a <ieee802_15_4_data_request+0x23e>
    if (aMaxMACFrameSize < (mdr->msduLength)) { return false; }
    3f0a:	87 36       	cpi	r24, 0x67	; 103
    3f0c:	08 f0       	brcs	.+2      	; 0x3f10 <ieee802_15_4_data_request+0x114>
    3f0e:	95 c0       	rjmp	.+298    	; 0x403a <ieee802_15_4_data_request+0x23e>
    
    /* 1. Build the FCF field and add to the buffer. */
    uint16_t fcf;
    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_DATA);

    if (mdr->TxOptions & ACK_TRANSMISSION) { fcf |= FCF_ACK_REQUEST; }
    3f10:	41 15       	cp	r20, r1
    3f12:	51 05       	cpc	r21, r1
    3f14:	19 f4       	brne	.+6      	; 0x3f1c <ieee802_15_4_data_request+0x120>
    /* Get internal TX buffer to build the frame in. */
    uint8_t *frame_buffer = IEEE802_15_4_GET_TX_BUFFER();
    
    /* 1. Build the FCF field and add to the buffer. */
    uint16_t fcf;
    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_DATA);
    3f16:	41 e0       	ldi	r20, 0x01	; 1
    3f18:	50 e0       	ldi	r21, 0x00	; 0
    3f1a:	02 c0       	rjmp	.+4      	; 0x3f20 <ieee802_15_4_data_request+0x124>

    if (mdr->TxOptions & ACK_TRANSMISSION) { fcf |= FCF_ACK_REQUEST; }
    3f1c:	41 e2       	ldi	r20, 0x21	; 33
    3f1e:	50 e0       	ldi	r21, 0x00	; 0
    
    fcf |= FCF_INTRA_PAN;
    
    fcf |= FCF_SET_SOURCE_ADDR_MODE(mdr->SrcAddrMode);
    3f20:	37 2f       	mov	r19, r23
    3f22:	32 95       	swap	r19
    3f24:	33 0f       	add	r19, r19
    3f26:	33 0f       	add	r19, r19
    3f28:	30 7c       	andi	r19, 0xC0	; 192
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    fcf |= (FCF_SET_DEST_ADDR_MODE(mdr->DstAddrMode));
    3f2c:	96 2f       	mov	r25, r22
    3f2e:	99 0f       	add	r25, r25
    3f30:	99 0f       	add	r25, r25
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    uint16_t fcf;
    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_DATA);

    if (mdr->TxOptions & ACK_TRANSMISSION) { fcf |= FCF_ACK_REQUEST; }
    
    fcf |= FCF_INTRA_PAN;
    3f34:	82 2b       	or	r24, r18
    3f36:	93 2b       	or	r25, r19
    
    fcf |= FCF_SET_SOURCE_ADDR_MODE(mdr->SrcAddrMode);
    3f38:	80 64       	ori	r24, 0x40	; 64
    fcf |= (FCF_SET_DEST_ADDR_MODE(mdr->DstAddrMode));
    3f3a:	84 2b       	or	r24, r20
    3f3c:	95 2b       	or	r25, r21
    
    uint8_t index = 0;
    
    frame_buffer[index++] = ((fcf >> 8*0) & 0xFF);
    3f3e:	80 93 68 11 	sts	0x1168, r24
    frame_buffer[index++] = ((fcf >> 8*1) & 0xFF);
    3f42:	90 93 69 11 	sts	0x1169, r25
    
    /* 2. Add DSN field. */
    frame_buffer[index++] = IEEE802_15_4_GET_DSN();
    3f46:	80 91 26 11 	lds	r24, 0x1126
    3f4a:	80 93 6a 11 	sts	0x116A, r24
    3f4e:	8f 5f       	subi	r24, 0xFF	; 255
    3f50:	80 93 26 11 	sts	0x1126, r24
    
    /* 3. Add destination address. */
    if (FCF_NO_ADDR != (mdr->DstAddrMode)) {
    3f54:	66 23       	and	r22, r22
    3f56:	19 f1       	breq	.+70     	; 0x3f9e <ieee802_15_4_data_request+0x1a2>
        frame_buffer[index++] = (((mdr->DstPANId) >> 8*0) & 0xFF);
    3f58:	d8 01       	movw	r26, r16
    3f5a:	1a 96       	adiw	r26, 0x0a	; 10
    3f5c:	9c 91       	ld	r25, X
    3f5e:	1a 97       	sbiw	r26, 0x0a	; 10
    3f60:	1b 96       	adiw	r26, 0x0b	; 11
    3f62:	8c 91       	ld	r24, X
    3f64:	1b 97       	sbiw	r26, 0x0b	; 11
    3f66:	90 93 6b 11 	sts	0x116B, r25
        frame_buffer[index++] = (((mdr->DstPANId) >> 8*1) & 0xFF);
    3f6a:	80 93 6c 11 	sts	0x116C, r24
        
        if(FCF_LONG_ADDR == (mdr->DstAddrMode)) {
    3f6e:	63 30       	cpi	r22, 0x03	; 3
    3f70:	61 f4       	brne	.+24     	; 0x3f8a <ieee802_15_4_data_request+0x18e>
            memcpy((void *)(&frame_buffer[index]), (void *)(&(mdr->DstAddr)), sizeof(uint64_t));
    3f72:	ad e6       	ldi	r26, 0x6D	; 109
    3f74:	b1 e1       	ldi	r27, 0x11	; 17
    3f76:	f8 01       	movw	r30, r16
    3f78:	3c 96       	adiw	r30, 0x0c	; 12
    3f7a:	88 e0       	ldi	r24, 0x08	; 8
    3f7c:	01 90       	ld	r0, Z+
    3f7e:	0d 92       	st	X+, r0
    3f80:	81 50       	subi	r24, 0x01	; 1
    3f82:	e1 f7       	brne	.-8      	; 0x3f7c <ieee802_15_4_data_request+0x180>
            index += sizeof(uint64_t);
    3f84:	2d e0       	ldi	r18, 0x0D	; 13
    3f86:	f2 2e       	mov	r15, r18
    3f88:	0c c0       	rjmp	.+24     	; 0x3fa2 <ieee802_15_4_data_request+0x1a6>
        } else {
            memcpy((void *)(&frame_buffer[index]), (void *)(&(mdr->DstAddr)), sizeof(uint16_t));
    3f8a:	f8 01       	movw	r30, r16
    3f8c:	84 85       	ldd	r24, Z+12	; 0x0c
    3f8e:	95 85       	ldd	r25, Z+13	; 0x0d
    3f90:	90 93 6e 11 	sts	0x116E, r25
    3f94:	80 93 6d 11 	sts	0x116D, r24
            index += sizeof(uint16_t);
    3f98:	97 e0       	ldi	r25, 0x07	; 7
    3f9a:	f9 2e       	mov	r15, r25
    3f9c:	02 c0       	rjmp	.+4      	; 0x3fa2 <ieee802_15_4_data_request+0x1a6>
    
    frame_buffer[index++] = ((fcf >> 8*0) & 0xFF);
    frame_buffer[index++] = ((fcf >> 8*1) & 0xFF);
    
    /* 2. Add DSN field. */
    frame_buffer[index++] = IEEE802_15_4_GET_DSN();
    3f9e:	83 e0       	ldi	r24, 0x03	; 3
    3fa0:	f8 2e       	mov	r15, r24
            index += sizeof(uint16_t);
        }
    }
    
    /* 4. Add source address. */
    if (FCF_NO_ADDR  != (mdr->SrcAddrMode)) {
    3fa2:	d8 01       	movw	r26, r16
    3fa4:	8c 91       	ld	r24, X
    3fa6:	88 23       	and	r24, r24
    3fa8:	d1 f0       	breq	.+52     	; 0x3fde <ieee802_15_4_data_request+0x1e2>
    3faa:	2f 2d       	mov	r18, r15
    3fac:	30 e0       	ldi	r19, 0x00	; 0
        if(FCF_LONG_ADDR == (mdr->SrcAddrMode)) {
    3fae:	83 30       	cpi	r24, 0x03	; 3
    3fb0:	61 f4       	brne	.+24     	; 0x3fca <ieee802_15_4_data_request+0x1ce>
            memcpy((void *)(&frame_buffer[index]), (void *)(&(mdr->SrcAddr)), sizeof(uint64_t));
    3fb2:	d9 01       	movw	r26, r18
    3fb4:	a8 59       	subi	r26, 0x98	; 152
    3fb6:	be 4e       	sbci	r27, 0xEE	; 238
    3fb8:	f8 01       	movw	r30, r16
    3fba:	31 96       	adiw	r30, 0x01	; 1
    3fbc:	88 e0       	ldi	r24, 0x08	; 8
    3fbe:	01 90       	ld	r0, Z+
    3fc0:	0d 92       	st	X+, r0
    3fc2:	81 50       	subi	r24, 0x01	; 1
    3fc4:	e1 f7       	brne	.-8      	; 0x3fbe <ieee802_15_4_data_request+0x1c2>
            index += sizeof(uint64_t);
    3fc6:	b8 e0       	ldi	r27, 0x08	; 8
    3fc8:	09 c0       	rjmp	.+18     	; 0x3fdc <ieee802_15_4_data_request+0x1e0>
        } else {
            memcpy((void *)(&frame_buffer[index]), (void *)(&(mdr->SrcAddr)), sizeof(uint16_t));
    3fca:	28 59       	subi	r18, 0x98	; 152
    3fcc:	3e 4e       	sbci	r19, 0xEE	; 238
    3fce:	f8 01       	movw	r30, r16
    3fd0:	81 81       	ldd	r24, Z+1	; 0x01
    3fd2:	92 81       	ldd	r25, Z+2	; 0x02
    3fd4:	d9 01       	movw	r26, r18
    3fd6:	8d 93       	st	X+, r24
    3fd8:	9c 93       	st	X, r25
            index += sizeof(uint16_t);
    3fda:	b2 e0       	ldi	r27, 0x02	; 2
    3fdc:	fb 0e       	add	r15, r27
        }
    }
    
    /* 5. Copy user data into frame buffer. */
    memcpy((void *)(&frame_buffer[index]), (void *)(mdr->data), mdr->msduLength);
    3fde:	2f 2d       	mov	r18, r15
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	28 59       	subi	r18, 0x98	; 152
    3fe4:	3e 4e       	sbci	r19, 0xEE	; 238
    3fe6:	f8 01       	movw	r30, r16
    3fe8:	45 89       	ldd	r20, Z+21	; 0x15
    3fea:	66 89       	ldd	r22, Z+22	; 0x16
    3fec:	77 89       	ldd	r23, Z+23	; 0x17
    3fee:	c9 01       	movw	r24, r18
    3ff0:	50 e0       	ldi	r21, 0x00	; 0
    3ff2:	0e 94 c2 33 	call	0x6784	; 0x6784 <memcpy>
    index += mdr->msduLength;
    3ff6:	d8 01       	movw	r26, r16
    3ff8:	55 96       	adiw	r26, 0x15	; 21
    3ffa:	8c 91       	ld	r24, X
    3ffc:	8e 5f       	subi	r24, 0xFE	; 254
     */
    index += CRC_SIZE;
    
    /* 7. Send data. */
    bool mcdr_status = false;
    if (true != ieee802_15_4_send(index, frame_buffer)) {
    3ffe:	8f 0d       	add	r24, r15
    4000:	68 e6       	ldi	r22, 0x68	; 104
    4002:	71 e1       	ldi	r23, 0x11	; 17
    4004:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <ieee802_15_4_send>
    4008:	88 23       	and	r24, r24
    400a:	69 f4       	brne	.+26     	; 0x4026 <ieee802_15_4_data_request+0x22a>
        /* Frame could not be sent. Go back to RX_AACK_ON or to SLEEP. */
        tat_reset();
    400c:	0e 94 76 26 	call	0x4cec	; 0x4cec <tat_reset>
        if (true != IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    4010:	80 91 24 11 	lds	r24, 0x1124
    4014:	88 23       	and	r24, r24
    4016:	19 f4       	brne	.+6      	; 0x401e <ieee802_15_4_data_request+0x222>
            tat_go_to_sleep();
    4018:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    401c:	0e c0       	rjmp	.+28     	; 0x403a <ieee802_15_4_data_request+0x23e>
        } else {
            (bool)tat_set_state(RX_AACK_ON);
    401e:	86 e1       	ldi	r24, 0x16	; 22
    4020:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    4024:	0a c0       	rjmp	.+20     	; 0x403a <ieee802_15_4_data_request+0x23e>
        }
    } else {
        /* Change internal state to busy transmitting. */
        IEEE802_15_4_SET_STATE(IEEE_MAC_TX_WAITING_ACK);
    4026:	8f b7       	in	r24, 0x3f	; 63
    4028:	89 83       	std	Y+1, r24	; 0x01
    402a:	f8 94       	cli
    402c:	83 e0       	ldi	r24, 0x03	; 3
    402e:	80 93 8d 01 	sts	0x018D, r24
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	8f bf       	out	0x3f, r24	; 63
        mcdr_status = true;
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	01 c0       	rjmp	.+2      	; 0x403c <ieee802_15_4_data_request+0x240>
    confirm_ptr = &(mdr->mdc);
    original_mac_state = IEEE802_15_4_GET_STATE();
    
    /* Verify that the data length is valid. */
    if (0 == (mdr->msduLength)) { return false; }
    if (aMaxMACFrameSize < (mdr->msduLength)) { return false; }
    403a:	80 e0       	ldi	r24, 0x00	; 0
        IEEE802_15_4_SET_STATE(IEEE_MAC_TX_WAITING_ACK);
        mcdr_status = true;
    }
    
    return mcdr_status;
}
    403c:	0f 90       	pop	r0
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	1f 91       	pop	r17
    4044:	0f 91       	pop	r16
    4046:	ff 90       	pop	r15
    4048:	08 95       	ret

0000404a <ieee802_15_4_data_process_ack>:


void ieee802_15_4_data_process_ack(void *tx_status) {
    404a:	df 93       	push	r29
    404c:	cf 93       	push	r28
    404e:	0f 92       	push	r0
    4050:	cd b7       	in	r28, 0x3d	; 61
    4052:	de b7       	in	r29, 0x3e	; 62
    /* Set the correct confirm status. */
    uint8_t status = *((uint8_t *)tx_status);
    4054:	fc 01       	movw	r30, r24
    4056:	80 81       	ld	r24, Z
    if ((TRAC_SUCCESS == status) || (TRAC_SUCCESS_DATA_PENDING == status)) {
    4058:	82 30       	cpi	r24, 0x02	; 2
    405a:	20 f0       	brcs	.+8      	; 0x4064 <ieee802_15_4_data_process_ack+0x1a>
        status = MAC_SUCCESS;
    } else if (TRAC_NO_ACK == status) {
    405c:	85 30       	cpi	r24, 0x05	; 5
    405e:	21 f4       	brne	.+8      	; 0x4068 <ieee802_15_4_data_process_ack+0x1e>
        status = MAC_NO_ACK;
    4060:	29 ee       	ldi	r18, 0xE9	; 233
    4062:	03 c0       	rjmp	.+6      	; 0x406a <ieee802_15_4_data_process_ack+0x20>

void ieee802_15_4_data_process_ack(void *tx_status) {
    /* Set the correct confirm status. */
    uint8_t status = *((uint8_t *)tx_status);
    if ((TRAC_SUCCESS == status) || (TRAC_SUCCESS_DATA_PENDING == status)) {
        status = MAC_SUCCESS;
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	01 c0       	rjmp	.+2      	; 0x406a <ieee802_15_4_data_process_ack+0x20>
    } else if (TRAC_NO_ACK == status) {
        status = MAC_NO_ACK;
    } else {
        status = MAC_CHANNEL_ACCESS_FAILURE;
    4068:	21 ee       	ldi	r18, 0xE1	; 225
    }
    
    /* Set the status variable that will be used in the callback. */
    confirm_ptr->status = status;
    406a:	80 91 3e 0d 	lds	r24, 0x0D3E
    406e:	90 91 3f 0d 	lds	r25, 0x0D3F
    4072:	fc 01       	movw	r30, r24
    4074:	20 83       	st	Z, r18
        
    /* The last transitted frame has been acknowledged. The user is notified 
     * through the ieee802_15_4_data_confirm callback. 
     */
    mcps_data_confirm(confirm_ptr);
    4076:	e0 91 40 0d 	lds	r30, 0x0D40
    407a:	f0 91 41 0d 	lds	r31, 0x0D41
    407e:	09 95       	icall
    
    /* Take the radio transceiver to sleep or RX_AACK_ON depending on the 
     * RX_ON_WHEN_IDLE flag. The device will be in TRX_OFF when coming here.
     */
    if (true != IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    4080:	80 91 24 11 	lds	r24, 0x1124
    4084:	88 23       	and	r24, r24
    4086:	19 f4       	brne	.+6      	; 0x408e <ieee802_15_4_data_process_ack+0x44>
        tat_go_to_sleep();
    4088:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    408c:	05 c0       	rjmp	.+10     	; 0x4098 <ieee802_15_4_data_process_ack+0x4e>
    } else {
        tat_reset();
    408e:	0e 94 76 26 	call	0x4cec	; 0x4cec <tat_reset>
        (bool)tat_set_state(RX_AACK_ON);
    4092:	86 e1       	ldi	r24, 0x16	; 22
    4094:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    }
    
    /* Set back the state to either MAC_ASSOCIATED or MAC_STATRTED. */
    IEEE802_15_4_SET_STATE(original_mac_state);
    4098:	8f b7       	in	r24, 0x3f	; 63
    409a:	89 83       	std	Y+1, r24	; 0x01
    409c:	f8 94       	cli
    409e:	80 91 42 0d 	lds	r24, 0x0D42
    40a2:	80 93 8d 01 	sts	0x018D, r24
    40a6:	89 81       	ldd	r24, Y+1	; 0x01
    40a8:	8f bf       	out	0x3f, r24	; 63
}
    40aa:	0f 90       	pop	r0
    40ac:	cf 91       	pop	r28
    40ae:	df 91       	pop	r29
    40b0:	08 95       	ret

000040b2 <ieee802_15_4_process_data_indication>:


void ieee802_15_4_process_data_indication(void *mdi_frame_info) {
    40b2:	ef 92       	push	r14
    40b4:	ff 92       	push	r15
    40b6:	0f 93       	push	r16
    40b8:	1f 93       	push	r17
    40ba:	cf 93       	push	r28
    40bc:	df 93       	push	r29
    /* Cast the received pointer back to a vrt_packet. */
    ieee802_15_4_meta_data_t *ind_information = (ieee802_15_4_meta_data_t *)mdi_frame_info;
    40be:	8c 01       	movw	r16, r24
    
    /* Build MCPS_DATA.indication: Allocate memory to build on. */
    mcps_data_ind_t *indication = (mcps_data_ind_t *)MEM_ALLOC_ARRAY(uint8_t, sizeof (mcps_data_ind_t) + (ind_information->msdu_length));
    40c0:	fc 01       	movw	r30, r24
    40c2:	83 8d       	ldd	r24, Z+27	; 0x1b
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	46 96       	adiw	r24, 0x16	; 22
    40c8:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    40cc:	e8 2e       	mov	r14, r24
    40ce:	e7 01       	movw	r28, r14
    40d0:	7e 01       	movw	r14, r28
    40d2:	f9 2e       	mov	r15, r25
    40d4:	e7 01       	movw	r28, r14
    
    if (NULL == indication) {
    40d6:	20 97       	sbiw	r28, 0x00	; 0
    40d8:	49 f4       	brne	.+18     	; 0x40ec <ieee802_15_4_process_data_indication+0x3a>
    40da:	35 e3       	ldi	r19, 0x35	; 53
    40dc:	3a 95       	dec	r19
    40de:	f1 f7       	brne	.-4      	; 0x40dc <ieee802_15_4_process_data_indication+0x2a>
    40e0:	00 00       	nop
        /* Go back to RX_AACK_ON if it was not possible to allocate memory, but first
         * wait for the PLL_ON state to be entered.
         */
        do {
            delay_us(20);
        } while (CMD_PLL_ON != tat_get_state());
    40e2:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <tat_get_state>
    40e6:	89 30       	cpi	r24, 0x09	; 9
    40e8:	c1 f7       	brne	.-16     	; 0x40da <ieee802_15_4_process_data_indication+0x28>
    40ea:	5b c0       	rjmp	.+182    	; 0x41a2 <ieee802_15_4_process_data_indication+0xf0>
        
        return;
    }
    
    /* Set source addressing items. */
    indication->SrcAddrMode = ind_information->src_addr_mode;
    40ec:	f8 01       	movw	r30, r16
    40ee:	85 85       	ldd	r24, Z+13	; 0x0d
    40f0:	88 83       	st	Y, r24
    indication->SrcAddr = 0;
    40f2:	19 82       	std	Y+1, r1	; 0x01
    40f4:	1a 82       	std	Y+2, r1	; 0x02
    40f6:	1b 82       	std	Y+3, r1	; 0x03
    40f8:	1c 82       	std	Y+4, r1	; 0x04
    40fa:	1d 82       	std	Y+5, r1	; 0x05
    40fc:	1e 82       	std	Y+6, r1	; 0x06
    40fe:	1f 82       	std	Y+7, r1	; 0x07
    4100:	18 86       	std	Y+8, r1	; 0x08
    if (FCF_LONG_ADDR== (indication->SrcAddrMode)) {
    4102:	83 30       	cpi	r24, 0x03	; 3
    4104:	49 f4       	brne	.+18     	; 0x4118 <ieee802_15_4_process_data_indication+0x66>
        memcpy((void *)(&(indication->SrcAddr)), (void *)(&(ind_information->src_addr)), sizeof(uint64_t));
    4106:	d7 01       	movw	r26, r14
    4108:	11 96       	adiw	r26, 0x01	; 1
    410a:	70 96       	adiw	r30, 0x10	; 16
    410c:	88 e0       	ldi	r24, 0x08	; 8
    410e:	01 90       	ld	r0, Z+
    4110:	0d 92       	st	X+, r0
    4112:	81 50       	subi	r24, 0x01	; 1
    4114:	e1 f7       	brne	.-8      	; 0x410e <ieee802_15_4_process_data_indication+0x5c>
    4116:	05 c0       	rjmp	.+10     	; 0x4122 <ieee802_15_4_process_data_indication+0x70>
    } else {
        memcpy((void *)(&(indication->SrcAddr)), (void *)(&(ind_information->src_addr)), sizeof(uint16_t));
    4118:	f8 01       	movw	r30, r16
    411a:	80 89       	ldd	r24, Z+16	; 0x10
    411c:	91 89       	ldd	r25, Z+17	; 0x11
    411e:	9a 83       	std	Y+2, r25	; 0x02
    4120:	89 83       	std	Y+1, r24	; 0x01
    }
    
    /* Set PAN ID. */
    memcpy((void *)(&(ind_information->dst_pan_id)), (void *)(&(indication->DstPANId)), sizeof(uint16_t));
    4122:	8a 85       	ldd	r24, Y+10	; 0x0a
    4124:	9b 85       	ldd	r25, Y+11	; 0x0b
    4126:	f8 01       	movw	r30, r16
    4128:	94 83       	std	Z+4, r25	; 0x04
    412a:	83 83       	std	Z+3, r24	; 0x03
    
    /* Set destination addressing items. */
    indication->DstAddrMode = ind_information->dst_addr_mode;
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	89 87       	std	Y+9, r24	; 0x09
    indication->DstAddr = 0;
    4130:	1c 86       	std	Y+12, r1	; 0x0c
    4132:	1d 86       	std	Y+13, r1	; 0x0d
    4134:	1e 86       	std	Y+14, r1	; 0x0e
    4136:	1f 86       	std	Y+15, r1	; 0x0f
    4138:	18 8a       	std	Y+16, r1	; 0x10
    413a:	19 8a       	std	Y+17, r1	; 0x11
    413c:	1a 8a       	std	Y+18, r1	; 0x12
    413e:	1b 8a       	std	Y+19, r1	; 0x13
    if (FCF_LONG_ADDR== (indication->DstAddrMode)) {
    4140:	83 30       	cpi	r24, 0x03	; 3
    4142:	49 f4       	brne	.+18     	; 0x4156 <ieee802_15_4_process_data_indication+0xa4>
        memcpy((void *)(&(indication->DstAddr)), (void *)(&(ind_information->dst_addr)), sizeof(uint64_t));
    4144:	de 01       	movw	r26, r28
    4146:	1c 96       	adiw	r26, 0x0c	; 12
    4148:	35 96       	adiw	r30, 0x05	; 5
    414a:	88 e0       	ldi	r24, 0x08	; 8
    414c:	01 90       	ld	r0, Z+
    414e:	0d 92       	st	X+, r0
    4150:	81 50       	subi	r24, 0x01	; 1
    4152:	e1 f7       	brne	.-8      	; 0x414c <ieee802_15_4_process_data_indication+0x9a>
    4154:	05 c0       	rjmp	.+10     	; 0x4160 <ieee802_15_4_process_data_indication+0xae>
    } else {
        memcpy((void *)(&(indication->DstAddr)), (void *)(&(ind_information->dst_addr)), sizeof(uint16_t));
    4156:	f8 01       	movw	r30, r16
    4158:	85 81       	ldd	r24, Z+5	; 0x05
    415a:	96 81       	ldd	r25, Z+6	; 0x06
    415c:	9d 87       	std	Y+13, r25	; 0x0d
    415e:	8c 87       	std	Y+12, r24	; 0x0c
    }
    
    /* Set the msdu fields. */
    indication->mpduLinkQuality = ind_information->lqi;
    4160:	f8 01       	movw	r30, r16
    4162:	84 8d       	ldd	r24, Z+28	; 0x1c
    4164:	8c 8b       	std	Y+20, r24	; 0x14
    indication->msduLength      = ind_information->msdu_length;
    4166:	83 8d       	ldd	r24, Z+27	; 0x1b
    4168:	8d 8b       	std	Y+21, r24	; 0x15
    memcpy((void *)(indication->msdu), (void *)(ind_information->msdu), ind_information->msdu_length);
    416a:	9e 01       	movw	r18, r28
    416c:	2a 5e       	subi	r18, 0xEA	; 234
    416e:	3f 4f       	sbci	r19, 0xFF	; 255
    4170:	43 8d       	ldd	r20, Z+27	; 0x1b
    4172:	61 8d       	ldd	r22, Z+25	; 0x19
    4174:	72 8d       	ldd	r23, Z+26	; 0x1a
    4176:	c9 01       	movw	r24, r18
    4178:	50 e0       	ldi	r21, 0x00	; 0
    417a:	0e 94 c2 33 	call	0x6784	; 0x6784 <memcpy>
    
    /* Post indication event. */
    if (true != vrt_post_event(ieee802_15_4_data_indication_do_callback, (void *)indication)) {
    417e:	8c ed       	ldi	r24, 0xDC	; 220
    4180:	9e e1       	ldi	r25, 0x1E	; 30
    4182:	be 01       	movw	r22, r28
    4184:	0e 94 85 29 	call	0x530a	; 0x530a <vrt_post_event>
    4188:	88 23       	and	r24, r24
    418a:	71 f4       	brne	.+28     	; 0x41a8 <ieee802_15_4_process_data_indication+0xf6>
        /* Free up allocated memory. */
        MEM_FREE(indication);
    418c:	ce 01       	movw	r24, r28
    418e:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
    4192:	f5 e3       	ldi	r31, 0x35	; 53
    4194:	fa 95       	dec	r31
    4196:	f1 f7       	brne	.-4      	; 0x4194 <ieee802_15_4_process_data_indication+0xe2>
    4198:	00 00       	nop
        /* Go back to RX_AACK_ON if it was not possible to post the event handler, but first
         * wait for the PLL_ON state to be entered.
         */
        do {
            delay_us(20);
        } while (CMD_PLL_ON != tat_get_state());
    419a:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <tat_get_state>
    419e:	89 30       	cpi	r24, 0x09	; 9
    41a0:	c1 f7       	brne	.-16     	; 0x4192 <ieee802_15_4_process_data_indication+0xe0>
        
        (bool)tat_set_state(RX_AACK_ON);
    41a2:	86 e1       	ldi	r24, 0x16	; 22
    41a4:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    }
}
    41a8:	df 91       	pop	r29
    41aa:	cf 91       	pop	r28
    41ac:	1f 91       	pop	r17
    41ae:	0f 91       	pop	r16
    41b0:	ff 90       	pop	r15
    41b2:	ef 90       	pop	r14
    41b4:	08 95       	ret

000041b6 <ieee802_15_4_disassociate_request>:
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

bool ieee802_15_4_disassociate_request(mlme_disassociate_req_t* mdr) {
    41b6:	0f 93       	push	r16
    41b8:	1f 93       	push	r17
    41ba:	df 93       	push	r29
    41bc:	cf 93       	push	r28
    41be:	0f 92       	push	r0
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
    41c4:	8c 01       	movw	r16, r24
    /* Check if it is possible to execute this primitive from the given internal 
     * state. A device must be associated before it can disassociate itself, and 
     * a  PAN coordinator must be started before it can force one of its children
     * to disassociate.
     */
    if ((IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) && 
    41c6:	80 91 8d 01 	lds	r24, 0x018D
    41ca:	84 50       	subi	r24, 0x04	; 4
    41cc:	82 30       	cpi	r24, 0x02	; 2
    41ce:	08 f0       	brcs	.+2      	; 0x41d2 <ieee802_15_4_disassociate_request+0x1c>
    41d0:	d2 c0       	rjmp	.+420    	; 0x4376 <ieee802_15_4_disassociate_request+0x1c0>
        
        return false;
    }
    
    /* Perform sanity check on function parameters. */
    if (NULL == (mdr->mlme_disassociate_confirm)) {
    41d2:	d8 01       	movw	r26, r16
    41d4:	19 96       	adiw	r26, 0x09	; 9
    41d6:	8d 91       	ld	r24, X+
    41d8:	9c 91       	ld	r25, X
    41da:	1a 97       	sbiw	r26, 0x0a	; 10
    41dc:	00 97       	sbiw	r24, 0x00	; 0
    41de:	09 f4       	brne	.+2      	; 0x41e2 <ieee802_15_4_disassociate_request+0x2c>
    41e0:	ca c0       	rjmp	.+404    	; 0x4376 <ieee802_15_4_disassociate_request+0x1c0>
    
    // 1. Request some memory to build the disassociation request frame.
    uint8_t* disassociation_request  = IEEE802_15_4_GET_TX_BUFFER();
    
    /* Store some internal variables. */
    mac_param.disassociate.mlme_disassociate_confirm = mdr->mlme_disassociate_confirm;
    41e2:	90 93 41 11 	sts	0x1141, r25
    41e6:	80 93 40 11 	sts	0x1140, r24
    mac_param.disassociate.mdc = &(mdr->mdc);
    41ea:	c8 01       	movw	r24, r16
    41ec:	0b 96       	adiw	r24, 0x0b	; 11
    41ee:	90 93 43 11 	sts	0x1143, r25
    41f2:	80 93 42 11 	sts	0x1142, r24

    fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) | FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR) |
          FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR) | FCF_ACK_REQUEST;

    // Add the Frame Control Field
    disassociation_request[index++] = ((fcf >> 8*0) & 0xFF);
    41f6:	83 e2       	ldi	r24, 0x23	; 35
    41f8:	80 93 68 11 	sts	0x1168, r24
    disassociation_request[index++] = ((fcf >> 8*1) & 0xFF);
    41fc:	8c ec       	ldi	r24, 0xCC	; 204
    41fe:	80 93 69 11 	sts	0x1169, r24

    // 3. Add the DSN.
    disassociation_request[index++] = IEEE802_15_4_GET_DSN();
    4202:	80 91 26 11 	lds	r24, 0x1126
    4206:	80 93 6a 11 	sts	0x116A, r24
    420a:	8f 5f       	subi	r24, 0xFF	; 255
    420c:	80 93 26 11 	sts	0x1126, r24

    // 4. Add destination PAN ID.
    disassociation_request[index++] = ((IEEE802_15_4_GET_PAN_ID()) >> 8*0) & 0xFF;
    4210:	90 91 2c 11 	lds	r25, 0x112C
    4214:	80 91 2d 11 	lds	r24, 0x112D
    4218:	90 93 6b 11 	sts	0x116B, r25
    disassociation_request[index++] = ((IEEE802_15_4_GET_PAN_ID()) >> 8*1) & 0xFF;
    421c:	80 93 6c 11 	sts	0x116C, r24

    // 5. If a coordinator, then destination address is the 64 bit address of 
    //    the device. If a device, then the destination address is 
    //     "macCoordExtendedAddress".
    if ((mdr->DeviceAddress) != IEEE802_15_4_GET_COORD_EXTENDED_ADDRESS()) {
    4220:	7c 91       	ld	r23, X
    4222:	11 96       	adiw	r26, 0x01	; 1
    4224:	6c 91       	ld	r22, X
    4226:	11 97       	sbiw	r26, 0x01	; 1
    4228:	12 96       	adiw	r26, 0x02	; 2
    422a:	5c 91       	ld	r21, X
    422c:	12 97       	sbiw	r26, 0x02	; 2
    422e:	13 96       	adiw	r26, 0x03	; 3
    4230:	4c 91       	ld	r20, X
    4232:	13 97       	sbiw	r26, 0x03	; 3
    4234:	14 96       	adiw	r26, 0x04	; 4
    4236:	3c 91       	ld	r19, X
    4238:	14 97       	sbiw	r26, 0x04	; 4
    423a:	15 96       	adiw	r26, 0x05	; 5
    423c:	2c 91       	ld	r18, X
    423e:	15 97       	sbiw	r26, 0x05	; 5
    4240:	16 96       	adiw	r26, 0x06	; 6
    4242:	9c 91       	ld	r25, X
    4244:	16 97       	sbiw	r26, 0x06	; 6
    4246:	17 96       	adiw	r26, 0x07	; 7
    4248:	8c 91       	ld	r24, X
    424a:	17 97       	sbiw	r26, 0x07	; 7
    424c:	e0 91 36 11 	lds	r30, 0x1136
    4250:	e7 17       	cp	r30, r23
    4252:	e1 f4       	brne	.+56     	; 0x428c <ieee802_15_4_disassociate_request+0xd6>
    4254:	e0 91 37 11 	lds	r30, 0x1137
    4258:	e6 17       	cp	r30, r22
    425a:	c1 f4       	brne	.+48     	; 0x428c <ieee802_15_4_disassociate_request+0xd6>
    425c:	e0 91 38 11 	lds	r30, 0x1138
    4260:	e5 17       	cp	r30, r21
    4262:	a1 f4       	brne	.+40     	; 0x428c <ieee802_15_4_disassociate_request+0xd6>
    4264:	e0 91 39 11 	lds	r30, 0x1139
    4268:	e4 17       	cp	r30, r20
    426a:	81 f4       	brne	.+32     	; 0x428c <ieee802_15_4_disassociate_request+0xd6>
    426c:	e0 91 3a 11 	lds	r30, 0x113A
    4270:	e3 17       	cp	r30, r19
    4272:	61 f4       	brne	.+24     	; 0x428c <ieee802_15_4_disassociate_request+0xd6>
    4274:	e0 91 3b 11 	lds	r30, 0x113B
    4278:	e2 17       	cp	r30, r18
    427a:	41 f4       	brne	.+16     	; 0x428c <ieee802_15_4_disassociate_request+0xd6>
    427c:	e0 91 3c 11 	lds	r30, 0x113C
    4280:	e9 17       	cp	r30, r25
    4282:	21 f4       	brne	.+8      	; 0x428c <ieee802_15_4_disassociate_request+0xd6>
    4284:	e0 91 3d 11 	lds	r30, 0x113D
    4288:	e8 17       	cp	r30, r24
    428a:	49 f0       	breq	.+18     	; 0x429e <ieee802_15_4_disassociate_request+0xe8>
        memcpy((void *)(&disassociation_request[index]), (void *)(&(mdr->DeviceAddress)), sizeof(uint64_t));
    428c:	ad e6       	ldi	r26, 0x6D	; 109
    428e:	b1 e1       	ldi	r27, 0x11	; 17
    4290:	f8 01       	movw	r30, r16
    4292:	88 e0       	ldi	r24, 0x08	; 8
    4294:	01 90       	ld	r0, Z+
    4296:	0d 92       	st	X+, r0
    4298:	81 50       	subi	r24, 0x01	; 1
    429a:	e1 f7       	brne	.-8      	; 0x4294 <ieee802_15_4_disassociate_request+0xde>
    429c:	24 c0       	rjmp	.+72     	; 0x42e6 <ieee802_15_4_disassociate_request+0x130>
        index += sizeof(uint64_t);
    } else {
        memcpy((void *)(&disassociation_request[index]), (void *)(&(IEEE802_15_4_GET_COORD_EXTENDED_ADDRESS())), sizeof(uint64_t));
    429e:	70 93 6d 11 	sts	0x116D, r23
    42a2:	60 93 6e 11 	sts	0x116E, r22
    42a6:	50 93 6f 11 	sts	0x116F, r21
    42aa:	40 93 70 11 	sts	0x1170, r20
    42ae:	30 93 71 11 	sts	0x1171, r19
    42b2:	20 93 72 11 	sts	0x1172, r18
    42b6:	90 93 73 11 	sts	0x1173, r25
    42ba:	80 93 74 11 	sts	0x1174, r24
        index += sizeof(uint64_t);
        IEEE802_15_4_SET_COORD_EXTENDED_ADDRESS(0);
    42be:	10 92 36 11 	sts	0x1136, r1
    42c2:	10 92 37 11 	sts	0x1137, r1
    42c6:	10 92 38 11 	sts	0x1138, r1
    42ca:	10 92 39 11 	sts	0x1139, r1
    42ce:	10 92 3a 11 	sts	0x113A, r1
    42d2:	10 92 3b 11 	sts	0x113B, r1
    42d6:	10 92 3c 11 	sts	0x113C, r1
    42da:	10 92 3d 11 	sts	0x113D, r1
        (uint8_t)ieee802_15_4_set_short_address(BROADCAST);
    42de:	8f ef       	ldi	r24, 0xFF	; 255
    42e0:	9f ef       	ldi	r25, 0xFF	; 255
    42e2:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ieee802_15_4_set_short_address>
    }

    // 6. Add the source pan id.
    disassociation_request[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*0) & 0xFF);
    42e6:	90 91 2c 11 	lds	r25, 0x112C
    42ea:	80 91 2d 11 	lds	r24, 0x112D
    42ee:	90 93 75 11 	sts	0x1175, r25
    disassociation_request[index++] = ((IEEE802_15_4_GET_PAN_ID() >> 8*1) & 0xFF);
    42f2:	80 93 76 11 	sts	0x1176, r24

    // 7. Add the source address, the source address of the device sending the command.
    memcpy((void *)(&disassociation_request[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    42f6:	e7 e7       	ldi	r30, 0x77	; 119
    42f8:	f1 e1       	ldi	r31, 0x11	; 17
    42fa:	80 91 2e 11 	lds	r24, 0x112E
    42fe:	80 93 77 11 	sts	0x1177, r24
    4302:	80 91 2f 11 	lds	r24, 0x112F
    4306:	81 83       	std	Z+1, r24	; 0x01
    4308:	80 91 30 11 	lds	r24, 0x1130
    430c:	82 83       	std	Z+2, r24	; 0x02
    430e:	80 91 31 11 	lds	r24, 0x1131
    4312:	83 83       	std	Z+3, r24	; 0x03
    4314:	80 91 32 11 	lds	r24, 0x1132
    4318:	84 83       	std	Z+4, r24	; 0x04
    431a:	80 91 33 11 	lds	r24, 0x1133
    431e:	85 83       	std	Z+5, r24	; 0x05
    4320:	80 91 34 11 	lds	r24, 0x1134
    4324:	86 83       	std	Z+6, r24	; 0x06
    4326:	80 91 35 11 	lds	r24, 0x1135
    432a:	87 83       	std	Z+7, r24	; 0x07
    index += sizeof(uint64_t);
    
    // 8. Add the command frame identifier.
    disassociation_request[index++] = DISASSOCIATIONNOTIFICATION;
    432c:	83 e0       	ldi	r24, 0x03	; 3
    432e:	80 93 7f 11 	sts	0x117F, r24

    // 9. Add the disassociation reason code.
    disassociation_request[index++] = mdr->DisassociateReason;
    4332:	d8 01       	movw	r26, r16
    4334:	18 96       	adiw	r26, 0x08	; 8
    4336:	8c 91       	ld	r24, X
    4338:	80 93 80 11 	sts	0x1180, r24
    
    // 10. Add two dummy bytes as CRC.
    index += CRC_SIZE;
    
    bool mdr_status = false;
    if (true != ieee802_15_4_send(index, disassociation_request)) {
    433c:	8b e1       	ldi	r24, 0x1B	; 27
    433e:	bf 01       	movw	r22, r30
    4340:	6f 50       	subi	r22, 0x0F	; 15
    4342:	70 40       	sbci	r23, 0x00	; 0
    4344:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <ieee802_15_4_send>
    4348:	88 23       	and	r24, r24
    434a:	59 f4       	brne	.+22     	; 0x4362 <ieee802_15_4_disassociate_request+0x1ac>
        if (true != IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    434c:	80 91 24 11 	lds	r24, 0x1124
    4350:	88 23       	and	r24, r24
    4352:	19 f4       	brne	.+6      	; 0x435a <ieee802_15_4_disassociate_request+0x1a4>
            tat_go_to_sleep();
    4354:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    4358:	0e c0       	rjmp	.+28     	; 0x4376 <ieee802_15_4_disassociate_request+0x1c0>
        } else {
            (bool)tat_set_state(RX_AACK_ON);
    435a:	86 e1       	ldi	r24, 0x16	; 22
    435c:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    4360:	0a c0       	rjmp	.+20     	; 0x4376 <ieee802_15_4_disassociate_request+0x1c0>
        }
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_DISASSOCIATE_WAITING_ACK);
    4362:	8f b7       	in	r24, 0x3f	; 63
    4364:	89 83       	std	Y+1, r24	; 0x01
    4366:	f8 94       	cli
    4368:	8d e0       	ldi	r24, 0x0D	; 13
    436a:	80 93 8d 01 	sts	0x018D, r24
    436e:	89 81       	ldd	r24, Y+1	; 0x01
    4370:	8f bf       	out	0x3f, r24	; 63
        mdr_status = true;
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	01 c0       	rjmp	.+2      	; 0x4378 <ieee802_15_4_disassociate_request+0x1c2>
        return false;
    }
    
    /* Perform sanity check on function parameters. */
    if (NULL == (mdr->mlme_disassociate_confirm)) {
        return false;
    4376:	80 e0       	ldi	r24, 0x00	; 0
        IEEE802_15_4_SET_STATE(IEEE_MAC_DISASSOCIATE_WAITING_ACK);
        mdr_status = true;
    } 
    
    return mdr_status;
}
    4378:	0f 90       	pop	r0
    437a:	cf 91       	pop	r28
    437c:	df 91       	pop	r29
    437e:	1f 91       	pop	r17
    4380:	0f 91       	pop	r16
    4382:	08 95       	ret

00004384 <ieee802_15_4_disassociate_process_ack>:


void ieee802_15_4_disassociate_process_ack(void *tx_status) {
    4384:	df 93       	push	r29
    4386:	cf 93       	push	r28
    4388:	0f 92       	push	r0
    438a:	cd b7       	in	r28, 0x3d	; 61
    438c:	de b7       	in	r29, 0x3e	; 62
    /* Extract status of transmission, for then to set the correct confirm status. */
    uint8_t status = *((uint8_t*)tx_status);
    438e:	fc 01       	movw	r30, r24
    4390:	80 81       	ld	r24, Z
    
    if ((TRAC_SUCCESS == status) || (TRAC_SUCCESS_DATA_PENDING == status)) {
    4392:	82 30       	cpi	r24, 0x02	; 2
    4394:	30 f4       	brcc	.+12     	; 0x43a2 <ieee802_15_4_disassociate_process_ack+0x1e>
        mac_param.disassociate.mdc->status = MAC_SUCCESS;
    4396:	e0 91 42 11 	lds	r30, 0x1142
    439a:	f0 91 43 11 	lds	r31, 0x1143
    439e:	10 82       	st	Z, r1
    43a0:	0a c0       	rjmp	.+20     	; 0x43b6 <ieee802_15_4_disassociate_process_ack+0x32>
    43a2:	e0 91 42 11 	lds	r30, 0x1142
    43a6:	f0 91 43 11 	lds	r31, 0x1143
    } else if (TRAC_NO_ACK == status) {
    43aa:	85 30       	cpi	r24, 0x05	; 5
    43ac:	11 f4       	brne	.+4      	; 0x43b2 <ieee802_15_4_disassociate_process_ack+0x2e>
        mac_param.disassociate.mdc->status = MAC_NO_ACK;
    43ae:	89 ee       	ldi	r24, 0xE9	; 233
    43b0:	01 c0       	rjmp	.+2      	; 0x43b4 <ieee802_15_4_disassociate_process_ack+0x30>
    } else {
        mac_param.disassociate.mdc->status = MAC_CHANNEL_ACCESS_FAILURE;
    43b2:	81 ee       	ldi	r24, 0xE1	; 225
    43b4:	80 83       	st	Z, r24
    }
        
    /* The last transitted frame has been acknowledged. The user is notified 
     * through the callback. 
     */
    mac_param.disassociate.mlme_disassociate_confirm(mac_param.disassociate.mdc);
    43b6:	e0 91 40 11 	lds	r30, 0x1140
    43ba:	f0 91 41 11 	lds	r31, 0x1141
    43be:	80 91 42 11 	lds	r24, 0x1142
    43c2:	90 91 43 11 	lds	r25, 0x1143
    43c6:	09 95       	icall
    
    if (true != IEEE802_15_4_GET_I_AM_COORDINATOR()) {
    43c8:	80 91 25 11 	lds	r24, 0x1125
    43cc:	88 23       	and	r24, r24
    43ce:	51 f4       	brne	.+20     	; 0x43e4 <ieee802_15_4_disassociate_process_ack+0x60>
        tat_go_to_sleep();
    43d0:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
        IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    43d4:	8f b7       	in	r24, 0x3f	; 63
    43d6:	89 83       	std	Y+1, r24	; 0x01
    43d8:	f8 94       	cli
    43da:	10 92 8d 01 	sts	0x018D, r1
    43de:	89 81       	ldd	r24, Y+1	; 0x01
    43e0:	8f bf       	out	0x3f, r24	; 63
    43e2:	0b c0       	rjmp	.+22     	; 0x43fa <ieee802_15_4_disassociate_process_ack+0x76>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
    43e4:	8f b7       	in	r24, 0x3f	; 63
    43e6:	89 83       	std	Y+1, r24	; 0x01
    43e8:	f8 94       	cli
    43ea:	85 e0       	ldi	r24, 0x05	; 5
    43ec:	80 93 8d 01 	sts	0x018D, r24
    43f0:	89 81       	ldd	r24, Y+1	; 0x01
    43f2:	8f bf       	out	0x3f, r24	; 63
        (bool)tat_set_state(RX_AACK_ON);
    43f4:	86 e1       	ldi	r24, 0x16	; 22
    43f6:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    }
}
    43fa:	0f 90       	pop	r0
    43fc:	cf 91       	pop	r28
    43fe:	df 91       	pop	r29
    4400:	08 95       	ret

00004402 <ieee802_15_4_orphan_response>:
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
static mlme_comm_status_ind_t mcsi;
/*================================= PROTOTYPES       =========================*/

bool ieee802_15_4_orphan_response(mlme_orphan_resp_t *mor) {
    4402:	df 93       	push	r29
    4404:	cf 93       	push	r28
    4406:	0f 92       	push	r0
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
    440c:	dc 01       	movw	r26, r24
    
    /* Start by verifying the internal state of the IEEE 802.15.4 MAC. */
    if (IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) {
    440e:	80 91 8d 01 	lds	r24, 0x018D
    4412:	85 30       	cpi	r24, 0x05	; 5
    4414:	09 f0       	breq	.+2      	; 0x4418 <ieee802_15_4_orphan_response+0x16>
    4416:	75 c0       	rjmp	.+234    	; 0x4502 <ieee802_15_4_orphan_response+0x100>
                   FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR)    |
                   FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) |
                   FCF_ACK_REQUEST;
        
    uint8_t index = 0;
    coord_realign[index++] = ((fcf >> 8*0) & 0xFF);
    4418:	83 e2       	ldi	r24, 0x23	; 35
    441a:	80 93 68 11 	sts	0x1168, r24
    coord_realign[index++] = ((fcf >> 8*1) & 0xFF);
    441e:	8c ec       	ldi	r24, 0xCC	; 204
    4420:	80 93 69 11 	sts	0x1169, r24

    /* 3. Add DSN */
    coord_realign[index++] = IEEE802_15_4_GET_DSN();
    4424:	80 91 26 11 	lds	r24, 0x1126
    4428:	80 93 6a 11 	sts	0x116A, r24
    442c:	8f 5f       	subi	r24, 0xFF	; 255
    442e:	80 93 26 11 	sts	0x1126, r24

    /* 4. Broadcast PAN identifier is used (0xFFFF) as destination PAN ID. */
    coord_realign[index++] = 0xFF;
    4432:	8f ef       	ldi	r24, 0xFF	; 255
    4434:	80 93 6b 11 	sts	0x116B, r24
    coord_realign[index++] = 0xFF;
    4438:	80 93 6c 11 	sts	0x116C, r24
    
    /* 5. Add destination address. */
    memcpy((void *)(&coord_realign[index]), (void *)(&(mor->OrphanAddress)), sizeof(uint64_t));
    443c:	8d e6       	ldi	r24, 0x6D	; 109
    443e:	91 e1       	ldi	r25, 0x11	; 17
    4440:	ad 01       	movw	r20, r26
    4442:	28 e0       	ldi	r18, 0x08	; 8
    4444:	fa 01       	movw	r30, r20
    4446:	01 90       	ld	r0, Z+
    4448:	af 01       	movw	r20, r30
    444a:	fc 01       	movw	r30, r24
    444c:	01 92       	st	Z+, r0
    444e:	cf 01       	movw	r24, r30
    4450:	21 50       	subi	r18, 0x01	; 1
    4452:	c1 f7       	brne	.-16     	; 0x4444 <ieee802_15_4_orphan_response+0x42>
    index += sizeof(uint64_t);
        
    /* 6. Insert Source PAN ID. */
    coord_realign[index++] = mac_pib_macPANId;
    4454:	90 91 2c 11 	lds	r25, 0x112C
    4458:	80 91 2d 11 	lds	r24, 0x112D
    445c:	90 93 75 11 	sts	0x1175, r25
    coord_realign[index++] = (mac_pib_macPANId >> 8);
    4460:	80 93 76 11 	sts	0x1176, r24

    /* 7. Add this device's IEEE address as source address. */
    memcpy((void *)(&coord_realign[index]), (void *)(&IEEE802_15_4_GET_EXTENDED_ADDRESS()), sizeof(uint64_t));
    4464:	e7 e7       	ldi	r30, 0x77	; 119
    4466:	f1 e1       	ldi	r31, 0x11	; 17
    4468:	20 91 2e 11 	lds	r18, 0x112E
    446c:	20 93 77 11 	sts	0x1177, r18
    4470:	20 91 2f 11 	lds	r18, 0x112F
    4474:	21 83       	std	Z+1, r18	; 0x01
    4476:	20 91 30 11 	lds	r18, 0x1130
    447a:	22 83       	std	Z+2, r18	; 0x02
    447c:	20 91 31 11 	lds	r18, 0x1131
    4480:	23 83       	std	Z+3, r18	; 0x03
    4482:	20 91 32 11 	lds	r18, 0x1132
    4486:	24 83       	std	Z+4, r18	; 0x04
    4488:	20 91 33 11 	lds	r18, 0x1133
    448c:	25 83       	std	Z+5, r18	; 0x05
    448e:	20 91 34 11 	lds	r18, 0x1134
    4492:	26 83       	std	Z+6, r18	; 0x06
    4494:	20 91 35 11 	lds	r18, 0x1135
    4498:	27 83       	std	Z+7, r18	; 0x07
    index += sizeof(uint64_t);

    /* 8. Set the command type. */
    coord_realign[index++] = COORDINATORREALIGNMENT;
    449a:	28 e0       	ldi	r18, 0x08	; 8
    449c:	20 93 7f 11 	sts	0x117F, r18

    /* 9. Set the Coordinator Realignment commands payload fields. */
    coord_realign[index++] = (IEEE802_15_4_GET_PAN_ID() >> 8*0);
    44a0:	90 93 80 11 	sts	0x1180, r25
    coord_realign[index++] = (IEEE802_15_4_GET_PAN_ID() >> 8*1);
    44a4:	80 93 81 11 	sts	0x1181, r24

    coord_realign[index++] = (IEEE802_15_4_GET_SHORT_ADDRESS() >> 8*0);
    44a8:	90 91 3e 11 	lds	r25, 0x113E
    44ac:	80 91 3f 11 	lds	r24, 0x113F
    44b0:	90 93 82 11 	sts	0x1182, r25
    coord_realign[index++] = (IEEE802_15_4_GET_SHORT_ADDRESS() >> 8*1);
    44b4:	80 93 83 11 	sts	0x1183, r24

    coord_realign[index++] = IEEE802_15_4_GET_CHANNEL();
    44b8:	80 91 29 11 	lds	r24, 0x1129
    44bc:	80 93 84 11 	sts	0x1184, r24

    coord_realign[index++] = ((mor->ShortAddress) >> 8*0);
    44c0:	18 96       	adiw	r26, 0x08	; 8
    44c2:	8c 91       	ld	r24, X
    44c4:	18 97       	sbiw	r26, 0x08	; 8
    44c6:	80 93 85 11 	sts	0x1185, r24
    coord_realign[index++] = ((mor->ShortAddress) >> 8*1);
    44ca:	19 96       	adiw	r26, 0x09	; 9
    44cc:	8c 91       	ld	r24, X
    44ce:	80 93 86 11 	sts	0x1186, r24
     * transceiver.
     */
    index += CRC_SIZE;
    
    bool mor_status = false;
    if (true != ieee802_15_4_send(index, coord_realign)) {
    44d2:	81 e2       	ldi	r24, 0x21	; 33
    44d4:	bf 01       	movw	r22, r30
    44d6:	6f 50       	subi	r22, 0x0F	; 15
    44d8:	70 40       	sbci	r23, 0x00	; 0
    44da:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <ieee802_15_4_send>
    44de:	88 23       	and	r24, r24
    44e0:	31 f4       	brne	.+12     	; 0x44ee <ieee802_15_4_orphan_response+0xec>
        /* Frame could not be sent. Go back to RX_AACK_ON. */
        tat_reset();
    44e2:	0e 94 76 26 	call	0x4cec	; 0x4cec <tat_reset>
        (bool)tat_set_state(RX_AACK_ON);
    44e6:	86 e1       	ldi	r24, 0x16	; 22
    44e8:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    44ec:	0a c0       	rjmp	.+20     	; 0x4502 <ieee802_15_4_orphan_response+0x100>
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_FOR_COORD_REALIGN_ACK);
    44ee:	8f b7       	in	r24, 0x3f	; 63
    44f0:	89 83       	std	Y+1, r24	; 0x01
    44f2:	f8 94       	cli
    44f4:	8e e0       	ldi	r24, 0x0E	; 14
    44f6:	80 93 8d 01 	sts	0x018D, r24
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	8f bf       	out	0x3f, r24	; 63
        mor_status = true;
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	01 c0       	rjmp	.+2      	; 0x4504 <ieee802_15_4_orphan_response+0x102>

bool ieee802_15_4_orphan_response(mlme_orphan_resp_t *mor) {
    
    /* Start by verifying the internal state of the IEEE 802.15.4 MAC. */
    if (IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) {
        return false;
    4502:	80 e0       	ldi	r24, 0x00	; 0
        IEEE802_15_4_SET_STATE(IEEE_MAC_WAITING_FOR_COORD_REALIGN_ACK);
        mor_status = true;
    }
    
    return mor_status;
}
    4504:	0f 90       	pop	r0
    4506:	cf 91       	pop	r28
    4508:	df 91       	pop	r29
    450a:	08 95       	ret

0000450c <ieee802_15_4_coord_realign_process_ack>:


void ieee802_15_4_coord_realign_process_ack(void *tx_status) {
    450c:	0f 93       	push	r16
    450e:	1f 93       	push	r17
    4510:	df 93       	push	r29
    4512:	cf 93       	push	r28
    4514:	0f 92       	push	r0
    4516:	cd b7       	in	r28, 0x3d	; 61
    4518:	de b7       	in	r29, 0x3e	; 62
    451a:	8c 01       	movw	r16, r24
    /* Issue MLME_COMM_STATUS.indication. */
    ieee802_15_4_comm_status_indication_t msci_callback = ieee802_15_4_get_mlme_comm_status_indication();
    451c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <ieee802_15_4_get_mlme_comm_status_indication>
    4520:	fc 01       	movw	r30, r24
    
    if (NULL == msci_callback) { return; }
    4522:	00 97       	sbiw	r24, 0x00	; 0
    4524:	e9 f0       	breq	.+58     	; 0x4560 <ieee802_15_4_coord_realign_process_ack+0x54>
    
    uint8_t mcsi_status = *((uint8_t*)tx_status);
    4526:	d8 01       	movw	r26, r16
    4528:	8c 91       	ld	r24, X
    
    if (TRAC_SUCCESS == mcsi_status) {
    452a:	88 23       	and	r24, r24
    452c:	49 f0       	breq	.+18     	; 0x4540 <ieee802_15_4_coord_realign_process_ack+0x34>
        mcsi_status = MAC_SUCCESS;
    } else if (TRAC_NO_ACK == mcsi_status) {
    452e:	85 30       	cpi	r24, 0x05	; 5
    4530:	21 f0       	breq	.+8      	; 0x453a <ieee802_15_4_coord_realign_process_ack+0x2e>
        mcsi_status = MAC_NO_ACK;
    } else if (TRAC_CHANNEL_ACCESS_FAILURE == mcsi_status) {
    4532:	83 30       	cpi	r24, 0x03	; 3
    4534:	21 f4       	brne	.+8      	; 0x453e <ieee802_15_4_coord_realign_process_ack+0x32>
        mcsi_status = MAC_CHANNEL_ACCESS_FAILURE;
    4536:	81 ee       	ldi	r24, 0xE1	; 225
    4538:	03 c0       	rjmp	.+6      	; 0x4540 <ieee802_15_4_coord_realign_process_ack+0x34>
    uint8_t mcsi_status = *((uint8_t*)tx_status);
    
    if (TRAC_SUCCESS == mcsi_status) {
        mcsi_status = MAC_SUCCESS;
    } else if (TRAC_NO_ACK == mcsi_status) {
        mcsi_status = MAC_NO_ACK;
    453a:	89 ee       	ldi	r24, 0xE9	; 233
    453c:	01 c0       	rjmp	.+2      	; 0x4540 <ieee802_15_4_coord_realign_process_ack+0x34>
    } else if (TRAC_CHANNEL_ACCESS_FAILURE == mcsi_status) {
        mcsi_status = MAC_CHANNEL_ACCESS_FAILURE;
    } else {
        mcsi_status = MAC_NO_DATA;
    453e:	8b ee       	ldi	r24, 0xEB	; 235
    }
    
    mcsi.status = mcsi_status;
    4540:	80 93 57 0d 	sts	0x0D57, r24
    
    /* Execute callback. */
    msci_callback(&mcsi);
    4544:	83 e4       	ldi	r24, 0x43	; 67
    4546:	9d e0       	ldi	r25, 0x0D	; 13
    4548:	09 95       	icall
    
    /* Set state from TRX_OFF to RX_AACK_ON. */
    IEEE802_15_4_SET_STATE(IEEE_MAC_STARTED);
    454a:	8f b7       	in	r24, 0x3f	; 63
    454c:	89 83       	std	Y+1, r24	; 0x01
    454e:	f8 94       	cli
    4550:	85 e0       	ldi	r24, 0x05	; 5
    4552:	80 93 8d 01 	sts	0x018D, r24
    4556:	89 81       	ldd	r24, Y+1	; 0x01
    4558:	8f bf       	out	0x3f, r24	; 63
    (bool)tat_set_state(RX_AACK_ON);
    455a:	86 e1       	ldi	r24, 0x16	; 22
    455c:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
}
    4560:	0f 90       	pop	r0
    4562:	cf 91       	pop	r28
    4564:	df 91       	pop	r29
    4566:	1f 91       	pop	r17
    4568:	0f 91       	pop	r16
    456a:	08 95       	ret

0000456c <ieee802_15_4_reset>:
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

bool ieee802_15_4_reset(bool set_default_pib) {
    456c:	1f 93       	push	r17
    456e:	df 93       	push	r29
    4570:	cf 93       	push	r28
    4572:	0f 92       	push	r0
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
    4578:	18 2f       	mov	r17, r24
    
    /* Reset the MAC's internal state. */
    IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    457a:	8f b7       	in	r24, 0x3f	; 63
    457c:	89 83       	std	Y+1, r24	; 0x01
    457e:	f8 94       	cli
    4580:	10 92 8d 01 	sts	0x018D, r1
    4584:	89 81       	ldd	r24, Y+1	; 0x01
    4586:	8f bf       	out	0x3f, r24	; 63
    
    uint8_t reset_status = false;
    if (true != tat_init()) {
    4588:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <tat_init>
    458c:	88 23       	and	r24, r24
    458e:	21 f4       	brne	.+8      	; 0x4598 <ieee802_15_4_reset+0x2c>
        tat_deinit();
    4590:	0e 94 57 26 	call	0x4cae	; 0x4cae <tat_deinit>
bool ieee802_15_4_reset(bool set_default_pib) {
    
    /* Reset the MAC's internal state. */
    IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    
    uint8_t reset_status = false;
    4594:	80 e0       	ldi	r24, 0x00	; 0
    4596:	35 c0       	rjmp	.+106    	; 0x4602 <ieee802_15_4_reset+0x96>
    if (true != tat_init()) {
        tat_deinit();
    } else{
        
        /* Reset the PIBs if requested. */
        if (true == set_default_pib) {
    4598:	11 23       	and	r17, r17
    459a:	11 f0       	breq	.+4      	; 0x45a0 <ieee802_15_4_reset+0x34>
            ieee802_15_4_pib_init();
    459c:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <ieee802_15_4_pib_init>
        }
        
        /* Reset callback TAT callback handlers. */
        tat_set_tx_callback_handler(ieee802_15_4_send_ack_event_handler);
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	99 e1       	ldi	r25, 0x19	; 25
    45a4:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <tat_set_tx_callback_handler>
        tat_set_rx_callback_handler(ieee802_15_4_pd_data_indication);
    45a8:	88 ee       	ldi	r24, 0xE8	; 232
    45aa:	97 e1       	ldi	r25, 0x17	; 23
    45ac:	0e 94 09 28 	call	0x5012	; 0x5012 <tat_set_rx_callback_handler>
        
        /* Configure the radio transceiver; CMSA and frame filer. */
        rf230_subregister_write(SR_MIN_BE, macMinBE_def);
    45b0:	8e e2       	ldi	r24, 0x2E	; 46
    45b2:	60 ec       	ldi	r22, 0xC0	; 192
    45b4:	46 e0       	ldi	r20, 0x06	; 6
    45b6:	23 e0       	ldi	r18, 0x03	; 3
    45b8:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        rf230_subregister_write(SR_MAX_CSMA_RETRIES, macMaxCSMABackoffs_def);
    45bc:	8c e2       	ldi	r24, 0x2C	; 44
    45be:	6e e0       	ldi	r22, 0x0E	; 14
    45c0:	41 e0       	ldi	r20, 0x01	; 1
    45c2:	24 e0       	ldi	r18, 0x04	; 4
    45c4:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        rf230_subregister_write(SR_MAX_FRAME_RETRIES, aMaxFrameRetries);
    45c8:	8c e2       	ldi	r24, 0x2C	; 44
    45ca:	60 ef       	ldi	r22, 0xF0	; 240
    45cc:	44 e0       	ldi	r20, 0x04	; 4
    45ce:	23 e0       	ldi	r18, 0x03	; 3
    45d0:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        
        tat_set_ieee_address((uint8_t *)(&IEEE802_15_4_GET_EXTENDED_ADDRESS()));
    45d4:	8e e2       	ldi	r24, 0x2E	; 46
    45d6:	91 e1       	ldi	r25, 0x11	; 17
    45d8:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <tat_set_ieee_address>
        tat_set_short_address(IEEE802_15_4_GET_SHORT_ADDRESS());
    45dc:	80 91 3e 11 	lds	r24, 0x113E
    45e0:	90 91 3f 11 	lds	r25, 0x113F
    45e4:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <tat_set_short_address>
        tat_set_pan_id(IEEE802_15_4_GET_PAN_ID());
    45e8:	80 91 2c 11 	lds	r24, 0x112C
    45ec:	90 91 2d 11 	lds	r25, 0x112D
    45f0:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <tat_set_pan_id>
        
        /* Go to sleep if configured to do so. Otherwise the radio transceiver will
         * stay in TRX_OFF state.
         */
        if (false == IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    45f4:	80 91 24 11 	lds	r24, 0x1124
    45f8:	88 23       	and	r24, r24
    45fa:	11 f4       	brne	.+4      	; 0x4600 <ieee802_15_4_reset+0x94>
            tat_go_to_sleep();
    45fc:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
        }
        
        reset_status = true;
    4600:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    return reset_status;
}
    4602:	0f 90       	pop	r0
    4604:	cf 91       	pop	r28
    4606:	df 91       	pop	r29
    4608:	1f 91       	pop	r17
    460a:	08 95       	ret

0000460c <ieee802_15_4_rx_enable>:

uint8_t ieee802_15_4_rx_enable(void) {
    /* Check first that the MAC is in a state where it is possible to send
     * data. A coordinator must be started and a router or device must be associated.
     */
    if ((IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) && 
    460c:	80 91 8d 01 	lds	r24, 0x018D
    4610:	84 50       	subi	r24, 0x04	; 4
    4612:	82 30       	cpi	r24, 0x02	; 2
    4614:	78 f4       	brcc	.+30     	; 0x4634 <ieee802_15_4_rx_enable+0x28>
        return MAC_INVALID_PARAMETER;
    }
    
    uint8_t rx_enable_status = MAC_INVALID_PARAMETER;
    
    if (true != tat_wake_up()) {
    4616:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <tat_wake_up>
    461a:	88 23       	and	r24, r24
    461c:	59 f0       	breq	.+22     	; 0x4634 <ieee802_15_4_rx_enable+0x28>
    } else if (true != tat_set_state(RX_AACK_ON)) {
    461e:	86 e1       	ldi	r24, 0x16	; 22
    4620:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    4624:	88 23       	and	r24, r24
    4626:	41 f4       	brne	.+16     	; 0x4638 <ieee802_15_4_rx_enable+0x2c>
        if (false == IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    4628:	80 91 24 11 	lds	r24, 0x1124
    462c:	88 23       	and	r24, r24
    462e:	31 f4       	brne	.+12     	; 0x463c <ieee802_15_4_rx_enable+0x30>
            tat_go_to_sleep();
    4630:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    if ((IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) && 
        (IEEE_MAC_ASSOCIATED != IEEE802_15_4_GET_STATE())) {
        return MAC_INVALID_PARAMETER;
    }
    
    uint8_t rx_enable_status = MAC_INVALID_PARAMETER;
    4634:	88 ee       	ldi	r24, 0xE8	; 232
    4636:	08 95       	ret
    } else if (true != tat_set_state(RX_AACK_ON)) {
        if (false == IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
            tat_go_to_sleep();
        }
    } else {
        rx_enable_status = MAC_SUCCESS;
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	08 95       	ret
    if ((IEEE_MAC_STARTED != IEEE802_15_4_GET_STATE()) && 
        (IEEE_MAC_ASSOCIATED != IEEE802_15_4_GET_STATE())) {
        return MAC_INVALID_PARAMETER;
    }
    
    uint8_t rx_enable_status = MAC_INVALID_PARAMETER;
    463c:	88 ee       	ldi	r24, 0xE8	; 232
    } else {
        rx_enable_status = MAC_SUCCESS;
    }
    
    return rx_enable_status;
}
    463e:	08 95       	ret

00004640 <ieee802_15_4_rx_disable>:

uint8_t ieee802_15_4_rx_disable(void) {
    /* Disable the receiver. The new state of the radio transceiver will be
     * TRX_OFF or SLEEP depending on the RX_ON_WHEN_IDLE flag.
     */
    if (false == IEEE802_15_4_GET_RX_ON_WHEN_IDLE()) {
    4640:	80 91 24 11 	lds	r24, 0x1124
    4644:	88 23       	and	r24, r24
    4646:	19 f4       	brne	.+6      	; 0x464e <ieee802_15_4_rx_disable+0xe>
        tat_go_to_sleep();
    4648:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    464c:	02 c0       	rjmp	.+4      	; 0x4652 <ieee802_15_4_rx_disable+0x12>
    } else {
		tat_reset();
    464e:	0e 94 76 26 	call	0x4cec	; 0x4cec <tat_reset>
	}
    
    return MAC_SUCCESS;
}
    4652:	80 e0       	ldi	r24, 0x00	; 0
    4654:	08 95       	ret

00004656 <ieee802_15_4_scan_do_confirm>:
     */
    scan_time_elapsed_callback(NULL);
}


void ieee802_15_4_scan_do_confirm(void *msc) {
    4656:	0f 93       	push	r16
    4658:	1f 93       	push	r17
    465a:	df 93       	push	r29
    465c:	cf 93       	push	r28
    465e:	0f 92       	push	r0
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	8c 01       	movw	r16, r24
    /* The radio transceiver will be in TRX_OFF when it arrives here. Put back 
     * the stored PAN ID and go to sleep.
     */
    ieee802_15_4_set_pan_id(mac_param.scan.saved_pan_id);
    4666:	80 91 44 11 	lds	r24, 0x1144
    466a:	90 91 45 11 	lds	r25, 0x1145
    466e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ieee802_15_4_set_pan_id>
    
    /* Verify that the pointer is valid. */
    if (NULL == msc) { return; }
    4672:	01 15       	cp	r16, r1
    4674:	11 05       	cpc	r17, r1
    4676:	69 f0       	breq	.+26     	; 0x4692 <ieee802_15_4_scan_do_confirm+0x3c>
    
    /* Execute the callback. */
    mac_param.scan.mlme_scan_confirm((mlme_scan_conf_t *)msc);
    4678:	e0 91 46 11 	lds	r30, 0x1146
    467c:	f0 91 47 11 	lds	r31, 0x1147
    4680:	c8 01       	movw	r24, r16
    4682:	09 95       	icall
    
    /* Set the internal state back to IDLE. */
    IEEE802_15_4_SET_STATE(IEEE_MAC_IDLE);
    4684:	8f b7       	in	r24, 0x3f	; 63
    4686:	89 83       	std	Y+1, r24	; 0x01
    4688:	f8 94       	cli
    468a:	10 92 8d 01 	sts	0x018D, r1
    468e:	89 81       	ldd	r24, Y+1	; 0x01
    4690:	8f bf       	out	0x3f, r24	; 63
}
    4692:	0f 90       	pop	r0
    4694:	cf 91       	pop	r28
    4696:	df 91       	pop	r29
    4698:	1f 91       	pop	r17
    469a:	0f 91       	pop	r16
    469c:	08 95       	ret

0000469e <scan_time_elapsed_callback>:
/*                          Callbacks                                         */


static void scan_time_elapsed_callback(void *null) {
    /* Take the radio transceiver to sleep. */
    tat_go_to_sleep();
    469e:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    
    /* Check if it is possible to post event. */
    if (0 == VRT_GET_ITEMS_FREE()) {
    46a2:	80 91 3a 12 	lds	r24, 0x123A
    46a6:	88 23       	and	r24, r24
    46a8:	31 f4       	brne	.+12     	; 0x46b6 <scan_time_elapsed_callback+0x18>
        VRT_EVENT_MISSED();
    46aa:	80 91 39 12 	lds	r24, 0x1239
    46ae:	8f 5f       	subi	r24, 0xFF	; 255
    46b0:	80 93 39 12 	sts	0x1239, r24
        return;
    46b4:	08 95       	ret
    }
    
    mlme_scan_conf_t *msc = (mlme_scan_conf_t *)mac_param.scan.msc;
    46b6:	a0 91 48 11 	lds	r26, 0x1148
    46ba:	b0 91 49 11 	lds	r27, 0x1149
       
    if (0 == msc->ResultListSize) {
    46be:	12 96       	adiw	r26, 0x02	; 2
    46c0:	8c 91       	ld	r24, X
    46c2:	12 97       	sbiw	r26, 0x02	; 2
    46c4:	88 23       	and	r24, r24
    46c6:	19 f4       	brne	.+6      	; 0x46ce <scan_time_elapsed_callback+0x30>
        msc->status = MAC_NO_BEACON;
    46c8:	8a ee       	ldi	r24, 0xEA	; 234
    46ca:	8c 93       	st	X, r24
    46cc:	01 c0       	rjmp	.+2      	; 0x46d0 <scan_time_elapsed_callback+0x32>
    } else {
        msc->status = MAC_SUCCESS;
    46ce:	1c 92       	st	X, r1
    }
    
    /* Post event. */
    vrt_quick_post_event(ieee802_15_4_scan_do_confirm, (void *)msc);
    46d0:	20 91 e8 11 	lds	r18, 0x11E8
    46d4:	e2 2f       	mov	r30, r18
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	ee 0f       	add	r30, r30
    46da:	ff 1f       	adc	r31, r31
    46dc:	ee 0f       	add	r30, r30
    46de:	ff 1f       	adc	r31, r31
    46e0:	e7 51       	subi	r30, 0x17	; 23
    46e2:	fe 4e       	sbci	r31, 0xEE	; 238
    46e4:	8b e2       	ldi	r24, 0x2B	; 43
    46e6:	93 e2       	ldi	r25, 0x23	; 35
    46e8:	91 83       	std	Z+1, r25	; 0x01
    46ea:	80 83       	st	Z, r24
    46ec:	b3 83       	std	Z+3, r27	; 0x03
    46ee:	a2 83       	std	Z+2, r26	; 0x02
    46f0:	23 31       	cpi	r18, 0x13	; 19
    46f2:	19 f4       	brne	.+6      	; 0x46fa <scan_time_elapsed_callback+0x5c>
    46f4:	10 92 e8 11 	sts	0x11E8, r1
    46f8:	03 c0       	rjmp	.+6      	; 0x4700 <scan_time_elapsed_callback+0x62>
    46fa:	2f 5f       	subi	r18, 0xFF	; 255
    46fc:	20 93 e8 11 	sts	0x11E8, r18
    4700:	80 91 3a 12 	lds	r24, 0x123A
    4704:	81 50       	subi	r24, 0x01	; 1
    4706:	80 93 3a 12 	sts	0x123A, r24
    470a:	80 91 e7 11 	lds	r24, 0x11E7
    470e:	8f 5f       	subi	r24, 0xFF	; 255
    4710:	80 93 e7 11 	sts	0x11E7, r24
    4714:	08 95       	ret

00004716 <ieee802_15_4_scan_request>:
 *  \param[in] ScanDuration Length of the scan in symbols.
 */
static bool do_orphan_scan(uint8_t ScanDuration);


bool ieee802_15_4_scan_request(mlme_scan_req_t* msr) {
    4716:	df 92       	push	r13
    4718:	ef 92       	push	r14
    471a:	ff 92       	push	r15
    471c:	0f 93       	push	r16
    471e:	1f 93       	push	r17
    4720:	df 93       	push	r29
    4722:	cf 93       	push	r28
    4724:	0f 92       	push	r0
    4726:	cd b7       	in	r28, 0x3d	; 61
    4728:	de b7       	in	r29, 0x3e	; 62
    472a:	8c 01       	movw	r16, r24
    /* This primitive can only be executed with the IEEE 802.15.4 MAC's internal 
     * state.
     */
    if (IEEE_MAC_IDLE != IEEE802_15_4_GET_STATE()) { return false; }
    472c:	80 91 8d 01 	lds	r24, 0x018D
    4730:	88 23       	and	r24, r24
    4732:	09 f0       	breq	.+2      	; 0x4736 <ieee802_15_4_scan_request+0x20>
    4734:	41 c1       	rjmp	.+642    	; 0x49b8 <ieee802_15_4_scan_request+0x2a2>
    
    /* Perform sanity check on supplied set of parameters. */
    if (NULL == msr) { return false; }
    4736:	01 15       	cp	r16, r1
    4738:	11 05       	cpc	r17, r1
    473a:	09 f4       	brne	.+2      	; 0x473e <ieee802_15_4_scan_request+0x28>
    473c:	3d c1       	rjmp	.+634    	; 0x49b8 <ieee802_15_4_scan_request+0x2a2>
    if (NULL == (msr->mlme_scan_confirm)) { return false; }
    473e:	f8 01       	movw	r30, r16
    4740:	83 81       	ldd	r24, Z+3	; 0x03
    4742:	94 81       	ldd	r25, Z+4	; 0x04
    4744:	00 97       	sbiw	r24, 0x00	; 0
    4746:	09 f4       	brne	.+2      	; 0x474a <ieee802_15_4_scan_request+0x34>
    4748:	37 c1       	rjmp	.+622    	; 0x49b8 <ieee802_15_4_scan_request+0x2a2>
    
    uint8_t scan_type = msr->ScanType;
    474a:	f0 80       	ld	r15, Z
    uint8_t scan_duration = msr->ScanDuration;
    474c:	e2 80       	ldd	r14, Z+2	; 0x02
    uint8_t scan_channel = msr->ScanChannel;
    474e:	d1 80       	ldd	r13, Z+1	; 0x01
    
    if (scan_duration > BEACON_NETWORK_MAX_BO)  { return false; }
    4750:	fe 2d       	mov	r31, r14
    4752:	ff 30       	cpi	r31, 0x0F	; 15
    4754:	08 f0       	brcs	.+2      	; 0x4758 <ieee802_15_4_scan_request+0x42>
    4756:	30 c1       	rjmp	.+608    	; 0x49b8 <ieee802_15_4_scan_request+0x2a2>
    
    /* Try to wake up the device and take it to TRX_OFF. */
    if (true != tat_wake_up()) {
    4758:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <tat_wake_up>
    475c:	88 23       	and	r24, r24
    475e:	09 f4       	brne	.+2      	; 0x4762 <ieee802_15_4_scan_request+0x4c>
    4760:	29 c1       	rjmp	.+594    	; 0x49b4 <ieee802_15_4_scan_request+0x29e>
        tat_go_to_sleep();
        return false;
    }
    
    /* Try to set the selected channel. */    
    if (MAC_SUCCESS != ieee802_15_4_set_channel(scan_channel)) {
    4762:	8d 2d       	mov	r24, r13
    4764:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <ieee802_15_4_set_channel>
    4768:	88 23       	and	r24, r24
    476a:	09 f0       	breq	.+2      	; 0x476e <ieee802_15_4_scan_request+0x58>
    476c:	23 c1       	rjmp	.+582    	; 0x49b4 <ieee802_15_4_scan_request+0x29e>
    }
    
    /* Set callback and storage pointer before proceeding. These parameters are
     * stored in the internal IEEE 802.15.4 MAC storgae container (mac_param).
     */
    mac_param.scan.mlme_scan_confirm = msr->mlme_scan_confirm;
    476e:	f8 01       	movw	r30, r16
    4770:	83 81       	ldd	r24, Z+3	; 0x03
    4772:	94 81       	ldd	r25, Z+4	; 0x04
    4774:	90 93 47 11 	sts	0x1147, r25
    4778:	80 93 46 11 	sts	0x1146, r24
    mac_param.scan.msc = &(msr->msc);
    477c:	0b 5f       	subi	r16, 0xFB	; 251
    477e:	1f 4f       	sbci	r17, 0xFF	; 255
    4780:	10 93 49 11 	sts	0x1149, r17
    4784:	00 93 48 11 	sts	0x1148, r16
    
    bool msr_status = false;
    
    
    if (MLME_SCAN_TYPE_ED == scan_type) {
    4788:	ff 20       	and	r15, r15
    478a:	09 f4       	brne	.+2      	; 0x478e <ieee802_15_4_scan_request+0x78>
    478c:	15 c1       	rjmp	.+554    	; 0x49b8 <ieee802_15_4_scan_request+0x2a2>
        /* ED scan not supported at the moment. */
    } else if (MLME_SCAN_TYPE_ACTIVE == scan_type) {
    478e:	ff 2d       	mov	r31, r15
    4790:	f1 30       	cpi	r31, 0x01	; 1
    4792:	09 f0       	breq	.+2      	; 0x4796 <ieee802_15_4_scan_request+0x80>
    4794:	5b c0       	rjmp	.+182    	; 0x484c <ieee802_15_4_scan_request+0x136>
static bool do_active_scan(uint8_t ScanDuration) {
    /* Try to allocate some memory to build the Beacon Request commando on. */
    uint8_t* beacon_request = IEEE802_15_4_GET_TX_BUFFER();

    /* Calculate scan duration in symbols. */
    mac_param.scan.scan_time = (1 << ScanDuration) + 1;
    4796:	61 e0       	ldi	r22, 0x01	; 1
    4798:	70 e0       	ldi	r23, 0x00	; 0
    479a:	02 c0       	rjmp	.+4      	; 0x47a0 <ieee802_15_4_scan_request+0x8a>
    479c:	66 0f       	add	r22, r22
    479e:	77 1f       	adc	r23, r23
    47a0:	ea 94       	dec	r14
    47a2:	e2 f7       	brpl	.-8      	; 0x479c <ieee802_15_4_scan_request+0x86>
    47a4:	6f 5f       	subi	r22, 0xFF	; 255
    47a6:	7f 4f       	sbci	r23, 0xFF	; 255
    47a8:	88 27       	eor	r24, r24
    47aa:	77 fd       	sbrc	r23, 7
    47ac:	80 95       	com	r24
    47ae:	98 2f       	mov	r25, r24
    mac_param.scan.scan_time *= aBaseSuperframeDuration;
    47b0:	20 ec       	ldi	r18, 0xC0	; 192
    47b2:	33 e0       	ldi	r19, 0x03	; 3
    47b4:	40 e0       	ldi	r20, 0x00	; 0
    47b6:	50 e0       	ldi	r21, 0x00	; 0
    47b8:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <__mulsi3>
    47bc:	60 93 40 11 	sts	0x1140, r22
    47c0:	70 93 41 11 	sts	0x1141, r23
    47c4:	80 93 42 11 	sts	0x1142, r24
    47c8:	90 93 43 11 	sts	0x1143, r25
    
    /* Store current PAN_ID as specified in the IEEE802.15.4 standard. */
    mac_param.scan.saved_pan_id = IEEE802_15_4_GET_PAN_ID();
    47cc:	80 91 2c 11 	lds	r24, 0x112C
    47d0:	90 91 2d 11 	lds	r25, 0x112D
    47d4:	90 93 45 11 	sts	0x1145, r25
    47d8:	80 93 44 11 	sts	0x1144, r24
    uint16_t fcf = FCF_SET_FRAMETYPE(FCF_FRAMETYPE_MAC_CMD) |
                   FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR)   |
                   FCF_SET_SOURCE_ADDR_MODE(FCF_NO_ADDR);

    uint8_t index = 0;
    beacon_request[index++] = ((fcf >> 8*0) & 0xFF);
    47dc:	83 e0       	ldi	r24, 0x03	; 3
    47de:	80 93 68 11 	sts	0x1168, r24
    beacon_request[index++] = ((fcf >> 8*1) & 0xFF);
    47e2:	88 e0       	ldi	r24, 0x08	; 8
    47e4:	80 93 69 11 	sts	0x1169, r24

    /* sequence number */
    beacon_request[index++] = IEEE802_15_4_GET_DSN();
    47e8:	80 91 26 11 	lds	r24, 0x1126
    47ec:	80 93 6a 11 	sts	0x116A, r24
    47f0:	8f 5f       	subi	r24, 0xFF	; 255
    47f2:	80 93 26 11 	sts	0x1126, r24

    /* dst PANid */
    beacon_request[index++] = 0xFF;
    47f6:	8f ef       	ldi	r24, 0xFF	; 255
    47f8:	80 93 6b 11 	sts	0x116B, r24
    beacon_request[index++] = 0xFF;
    47fc:	80 93 6c 11 	sts	0x116C, r24

    /* dst address */
    beacon_request[index++] = 0xFF;
    4800:	80 93 6d 11 	sts	0x116D, r24
    beacon_request[index++] = 0xFF;
    4804:	80 93 6e 11 	sts	0x116E, r24
    
    beacon_request[index++] = BEACONREQUEST;
    4808:	87 e0       	ldi	r24, 0x07	; 7
    480a:	80 93 6f 11 	sts	0x116F, r24
    bool masr_status = false;
    
    /* The radio transceiver will be in TRX_OFF state here and with the channel
     * set correctly.
     */
    if (MAC_SUCCESS != ieee802_15_4_set_pan_id(BROADCAST)) {
    480e:	8f ef       	ldi	r24, 0xFF	; 255
    4810:	9f ef       	ldi	r25, 0xFF	; 255
    4812:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ieee802_15_4_set_pan_id>
    4816:	88 23       	and	r24, r24
    4818:	09 f0       	breq	.+2      	; 0x481c <ieee802_15_4_scan_request+0x106>
    481a:	cc c0       	rjmp	.+408    	; 0x49b4 <ieee802_15_4_scan_request+0x29e>
        tat_go_to_sleep();
    } else if (true != ieee802_15_4_send(index, beacon_request)) {
    481c:	8a e0       	ldi	r24, 0x0A	; 10
    481e:	68 e6       	ldi	r22, 0x68	; 104
    4820:	71 e1       	ldi	r23, 0x11	; 17
    4822:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <ieee802_15_4_send>
    4826:	88 23       	and	r24, r24
    4828:	09 f4       	brne	.+2      	; 0x482c <ieee802_15_4_scan_request+0x116>
    482a:	c4 c0       	rjmp	.+392    	; 0x49b4 <ieee802_15_4_scan_request+0x29e>
        tat_go_to_sleep();
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_BUSY_SCANNING);
    482c:	8f b7       	in	r24, 0x3f	; 63
    482e:	89 83       	std	Y+1, r24	; 0x01
    4830:	f8 94       	cli
    4832:	82 e0       	ldi	r24, 0x02	; 2
    4834:	80 93 8d 01 	sts	0x018D, r24
    4838:	89 81       	ldd	r24, Y+1	; 0x01
    483a:	8f bf       	out	0x3f, r24	; 63
        mac_param.scan.msc->ResultListSize = 0;
    483c:	e0 91 48 11 	lds	r30, 0x1148
    4840:	f0 91 49 11 	lds	r31, 0x1149
    4844:	12 82       	std	Z+2, r1	; 0x02
        mac_param.scan.msc->ScanType = MLME_SCAN_TYPE_ACTIVE;
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	81 83       	std	Z+1, r24	; 0x01
    484a:	b7 c0       	rjmp	.+366    	; 0x49ba <ieee802_15_4_scan_request+0x2a4>
    
    if (MLME_SCAN_TYPE_ED == scan_type) {
        /* ED scan not supported at the moment. */
    } else if (MLME_SCAN_TYPE_ACTIVE == scan_type) {
        msr_status = do_active_scan(scan_duration);
    } else if (MLME_SCAN_TYPE_PASSIVE == scan_type) {
    484c:	8f 2d       	mov	r24, r15
    484e:	82 30       	cpi	r24, 0x02	; 2
    4850:	09 f0       	breq	.+2      	; 0x4854 <ieee802_15_4_scan_request+0x13e>
    4852:	50 c0       	rjmp	.+160    	; 0x48f4 <ieee802_15_4_scan_request+0x1de>
}


static bool do_passive_scan(uint8_t ScanDuration) {
    /* Calculate scan duration in symbols. */
    mac_param.scan.scan_time = (1 << ScanDuration) + 1;
    4854:	61 e0       	ldi	r22, 0x01	; 1
    4856:	70 e0       	ldi	r23, 0x00	; 0
    4858:	02 c0       	rjmp	.+4      	; 0x485e <ieee802_15_4_scan_request+0x148>
    485a:	66 0f       	add	r22, r22
    485c:	77 1f       	adc	r23, r23
    485e:	ea 94       	dec	r14
    4860:	e2 f7       	brpl	.-8      	; 0x485a <ieee802_15_4_scan_request+0x144>
    4862:	6f 5f       	subi	r22, 0xFF	; 255
    4864:	7f 4f       	sbci	r23, 0xFF	; 255
    4866:	88 27       	eor	r24, r24
    4868:	77 fd       	sbrc	r23, 7
    486a:	80 95       	com	r24
    486c:	98 2f       	mov	r25, r24
    mac_param.scan.scan_time *= aBaseSuperframeDuration;
    486e:	20 ec       	ldi	r18, 0xC0	; 192
    4870:	33 e0       	ldi	r19, 0x03	; 3
    4872:	40 e0       	ldi	r20, 0x00	; 0
    4874:	50 e0       	ldi	r21, 0x00	; 0
    4876:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <__mulsi3>
    487a:	60 93 40 11 	sts	0x1140, r22
    487e:	70 93 41 11 	sts	0x1141, r23
    4882:	80 93 42 11 	sts	0x1142, r24
    4886:	90 93 43 11 	sts	0x1143, r25
    
    /* Store current PAN_ID as specified in the IEEE802.15.4 standard. */
    mac_param.scan.saved_pan_id = IEEE802_15_4_GET_PAN_ID();
    488a:	80 91 2c 11 	lds	r24, 0x112C
    488e:	90 91 2d 11 	lds	r25, 0x112D
    4892:	90 93 45 11 	sts	0x1145, r25
    4896:	80 93 44 11 	sts	0x1144, r24
    bool mpsr_status = false;
    
    /* The radio transceiver will be in TRX_OFF state here and with the channel
     * set correctly.
     */
    if (MAC_SUCCESS != ieee802_15_4_set_pan_id(BROADCAST)) {
    489a:	8f ef       	ldi	r24, 0xFF	; 255
    489c:	9f ef       	ldi	r25, 0xFF	; 255
    489e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ieee802_15_4_set_pan_id>
    48a2:	88 23       	and	r24, r24
    48a4:	09 f0       	breq	.+2      	; 0x48a8 <ieee802_15_4_scan_request+0x192>
    48a6:	86 c0       	rjmp	.+268    	; 0x49b4 <ieee802_15_4_scan_request+0x29e>
        tat_go_to_sleep();
    } else if (true != tat_set_state(RX_AACK_ON)){
    48a8:	86 e1       	ldi	r24, 0x16	; 22
    48aa:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    48ae:	88 23       	and	r24, r24
    48b0:	09 f4       	brne	.+2      	; 0x48b4 <ieee802_15_4_scan_request+0x19e>
    48b2:	80 c0       	rjmp	.+256    	; 0x49b4 <ieee802_15_4_scan_request+0x29e>
        tat_go_to_sleep();
    } else if (true != vrt_timer_start_high_pri_delay(mac_param.scan.scan_time,\
    48b4:	60 91 40 11 	lds	r22, 0x1140
    48b8:	70 91 41 11 	lds	r23, 0x1141
    48bc:	80 91 42 11 	lds	r24, 0x1142
    48c0:	90 91 43 11 	lds	r25, 0x1143
    48c4:	4f e4       	ldi	r20, 0x4F	; 79
    48c6:	53 e2       	ldi	r21, 0x23	; 35
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	0e 94 ee 32 	call	0x65dc	; 0x65dc <vrt_timer_start_high_pri_delay>
    48d0:	88 23       	and	r24, r24
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <ieee802_15_4_scan_request+0x1c0>
    48d4:	6f c0       	rjmp	.+222    	; 0x49b4 <ieee802_15_4_scan_request+0x29e>
                                                      scan_time_elapsed_callback, (void *)NULL)) {
        tat_go_to_sleep();
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_BUSY_SCANNING);
    48d6:	8f b7       	in	r24, 0x3f	; 63
    48d8:	89 83       	std	Y+1, r24	; 0x01
    48da:	f8 94       	cli
    48dc:	82 e0       	ldi	r24, 0x02	; 2
    48de:	80 93 8d 01 	sts	0x018D, r24
    48e2:	99 81       	ldd	r25, Y+1	; 0x01
    48e4:	9f bf       	out	0x3f, r25	; 63
        mac_param.scan.msc->ResultListSize = 0;
    48e6:	e0 91 48 11 	lds	r30, 0x1148
    48ea:	f0 91 49 11 	lds	r31, 0x1149
    48ee:	12 82       	std	Z+2, r1	; 0x02
        mac_param.scan.msc->ScanType = MLME_SCAN_TYPE_PASSIVE;
    48f0:	81 83       	std	Z+1, r24	; 0x01
    48f2:	5e c0       	rjmp	.+188    	; 0x49b0 <ieee802_15_4_scan_request+0x29a>
        /* ED scan not supported at the moment. */
    } else if (MLME_SCAN_TYPE_ACTIVE == scan_type) {
        msr_status = do_active_scan(scan_duration);
    } else if (MLME_SCAN_TYPE_PASSIVE == scan_type) {
        msr_status = do_passive_scan(scan_duration);
    } else if (MLME_SCAN_TYPE_ORPHAN == scan_type) {
    48f4:	ef 2d       	mov	r30, r15
    48f6:	e3 30       	cpi	r30, 0x03	; 3
    48f8:	09 f0       	breq	.+2      	; 0x48fc <ieee802_15_4_scan_request+0x1e6>
    48fa:	5c c0       	rjmp	.+184    	; 0x49b4 <ieee802_15_4_scan_request+0x29e>
    uint8_t* orphan_notification = IEEE802_15_4_GET_TX_BUFFER();
    
    /* Set the scan duration in symbols. That is how long to wait for a Coordinator
     * Realignment command.
     */
    mac_param.scan.scan_time = aResponseWaitTime;
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	98 e7       	ldi	r25, 0x78	; 120
    4900:	a0 e0       	ldi	r26, 0x00	; 0
    4902:	b0 e0       	ldi	r27, 0x00	; 0
    4904:	80 93 40 11 	sts	0x1140, r24
    4908:	90 93 41 11 	sts	0x1141, r25
    490c:	a0 93 42 11 	sts	0x1142, r26
    4910:	b0 93 43 11 	sts	0x1143, r27
                   FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR)   |
                   FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR);
    
    uint8_t index = 0;
    
    orphan_notification[index++] = ((fcf >> 8*0) & 0xFF);
    4914:	03 e0       	ldi	r16, 0x03	; 3
    4916:	00 93 68 11 	sts	0x1168, r16
    orphan_notification[index++] = ((fcf >> 8*1) & 0xFF);
    491a:	88 ec       	ldi	r24, 0xC8	; 200
    491c:	80 93 69 11 	sts	0x1169, r24

    /* sequence number */
    orphan_notification[index++] = IEEE802_15_4_GET_DSN();;
    4920:	80 91 26 11 	lds	r24, 0x1126
    4924:	80 93 6a 11 	sts	0x116A, r24
    4928:	8f 5f       	subi	r24, 0xFF	; 255
    492a:	80 93 26 11 	sts	0x1126, r24

    /* dst PANid */
    orphan_notification[index++] = 0xFF;
    492e:	8f ef       	ldi	r24, 0xFF	; 255
    4930:	80 93 6b 11 	sts	0x116B, r24
    orphan_notification[index++] = 0xFF;
    4934:	80 93 6c 11 	sts	0x116C, r24

    /* dst address */
    orphan_notification[index++] = 0xFF;
    4938:	80 93 6d 11 	sts	0x116D, r24
    orphan_notification[index++] = 0xFF;
    493c:	80 93 6e 11 	sts	0x116E, r24

    /* src PANid */
    orphan_notification[index++] = 0xFF;
    4940:	80 93 6f 11 	sts	0x116F, r24
    orphan_notification[index++] = 0xFF;
    4944:	80 93 70 11 	sts	0x1170, r24
    
    /* src address */
    memcpy((void *)(&orphan_notification[index]), (void *)(&(IEEE802_15_4_GET_EXTENDED_ADDRESS())), sizeof(uint64_t));
    4948:	e1 e7       	ldi	r30, 0x71	; 113
    494a:	f1 e1       	ldi	r31, 0x11	; 17
    494c:	80 91 2e 11 	lds	r24, 0x112E
    4950:	80 93 71 11 	sts	0x1171, r24
    4954:	80 91 2f 11 	lds	r24, 0x112F
    4958:	81 83       	std	Z+1, r24	; 0x01
    495a:	80 91 30 11 	lds	r24, 0x1130
    495e:	82 83       	std	Z+2, r24	; 0x02
    4960:	80 91 31 11 	lds	r24, 0x1131
    4964:	83 83       	std	Z+3, r24	; 0x03
    4966:	80 91 32 11 	lds	r24, 0x1132
    496a:	84 83       	std	Z+4, r24	; 0x04
    496c:	80 91 33 11 	lds	r24, 0x1133
    4970:	85 83       	std	Z+5, r24	; 0x05
    4972:	80 91 34 11 	lds	r24, 0x1134
    4976:	86 83       	std	Z+6, r24	; 0x06
    4978:	80 91 35 11 	lds	r24, 0x1135
    497c:	87 83       	std	Z+7, r24	; 0x07
    index += sizeof(uint64_t);
    
    orphan_notification[index++] = ORPHANNOTIFICATION;
    497e:	86 e0       	ldi	r24, 0x06	; 6
    4980:	80 93 79 11 	sts	0x1179, r24
    bool mosr_status = false;
    
    /* The radio transceiver will be in TRX_OFF state here and with the channel
     * set correctly.
     */
    if (true != ieee802_15_4_send(index, orphan_notification)) {
    4984:	84 e1       	ldi	r24, 0x14	; 20
    4986:	bf 01       	movw	r22, r30
    4988:	69 50       	subi	r22, 0x09	; 9
    498a:	70 40       	sbci	r23, 0x00	; 0
    498c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <ieee802_15_4_send>
    4990:	88 23       	and	r24, r24
    4992:	81 f0       	breq	.+32     	; 0x49b4 <ieee802_15_4_scan_request+0x29e>
        tat_go_to_sleep();
    } else {
        IEEE802_15_4_SET_STATE(IEEE_MAC_BUSY_SCANNING);
    4994:	8f b7       	in	r24, 0x3f	; 63
    4996:	89 83       	std	Y+1, r24	; 0x01
    4998:	f8 94       	cli
    499a:	82 e0       	ldi	r24, 0x02	; 2
    499c:	80 93 8d 01 	sts	0x018D, r24
    49a0:	89 81       	ldd	r24, Y+1	; 0x01
    49a2:	8f bf       	out	0x3f, r24	; 63
        mac_param.scan.msc->ResultListSize = 0;
    49a4:	e0 91 48 11 	lds	r30, 0x1148
    49a8:	f0 91 49 11 	lds	r31, 0x1149
    49ac:	12 82       	std	Z+2, r1	; 0x02
        mac_param.scan.msc->ScanType = MLME_SCAN_TYPE_ORPHAN;
    49ae:	01 83       	std	Z+1, r16	; 0x01
        mosr_status = true;
    49b0:	81 e0       	ldi	r24, 0x01	; 1
    49b2:	03 c0       	rjmp	.+6      	; 0x49ba <ieee802_15_4_scan_request+0x2a4>
        msr_status = do_passive_scan(scan_duration);
    } else if (MLME_SCAN_TYPE_ORPHAN == scan_type) {
        msr_status = do_orphan_scan(scan_duration);
    } else {
        /* Unknown scan type. */
        tat_go_to_sleep();
    49b4:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
     * stored in the internal IEEE 802.15.4 MAC storgae container (mac_param).
     */
    mac_param.scan.mlme_scan_confirm = msr->mlme_scan_confirm;
    mac_param.scan.msc = &(msr->msc);
    
    bool msr_status = false;
    49b8:	80 e0       	ldi	r24, 0x00	; 0
        tat_go_to_sleep();
        msr_status = false;
    }
    
    return msr_status;
}
    49ba:	0f 90       	pop	r0
    49bc:	cf 91       	pop	r28
    49be:	df 91       	pop	r29
    49c0:	1f 91       	pop	r17
    49c2:	0f 91       	pop	r16
    49c4:	ff 90       	pop	r15
    49c6:	ef 90       	pop	r14
    49c8:	df 90       	pop	r13
    49ca:	08 95       	ret

000049cc <ieee802_15_4_scan_process_ack>:
     * be started so that the scan can terminate after the given scan duration.
     */
    uint8_t transmission_status = *((uint8_t *)tx_status);

    /* Set up the receiver and start timer. */
    if (TRAC_SUCCESS != transmission_status) {
    49cc:	fc 01       	movw	r30, r24
    49ce:	80 81       	ld	r24, Z
    49d0:	88 23       	and	r24, r24
    49d2:	a9 f4       	brne	.+42     	; 0x49fe <ieee802_15_4_scan_process_ack+0x32>
    } else if (true != tat_set_state(RX_AACK_ON)){
    49d4:	86 e1       	ldi	r24, 0x16	; 22
    49d6:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <tat_set_state>
    49da:	88 23       	and	r24, r24
    49dc:	81 f0       	breq	.+32     	; 0x49fe <ieee802_15_4_scan_process_ack+0x32>
    } else if (true != vrt_timer_start_high_pri_delay(mac_param.scan.scan_time,\
    49de:	60 91 40 11 	lds	r22, 0x1140
    49e2:	70 91 41 11 	lds	r23, 0x1141
    49e6:	80 91 42 11 	lds	r24, 0x1142
    49ea:	90 91 43 11 	lds	r25, 0x1143
    49ee:	4f e4       	ldi	r20, 0x4F	; 79
    49f0:	53 e2       	ldi	r21, 0x23	; 35
    49f2:	20 e0       	ldi	r18, 0x00	; 0
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	0e 94 ee 32 	call	0x65dc	; 0x65dc <vrt_timer_start_high_pri_delay>
    49fa:	88 23       	and	r24, r24
    49fc:	21 f4       	brne	.+8      	; 0x4a06 <ieee802_15_4_scan_process_ack+0x3a>
    
    /* An error occured when the system was doing a transition to RX_AACK_ON mode
     * or when starting the timer. The error handling is done as if the scan terminated
     * normally.
     */
    scan_time_elapsed_callback(NULL);
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	0e 94 4f 23 	call	0x469e	; 0x469e <scan_time_elapsed_callback>
    4a06:	08 95       	ret

00004a08 <tat_trx_end_cb>:
}


static void tat_trx_end_cb(uint8_t trx_isr_event) {
    /* Verify that this is an TRX_END interrupt. */
    if (RF230_TRX_END_MASK != (trx_isr_event & RF230_TRX_END_MASK)) {
    4a08:	83 ff       	sbrs	r24, 3
    4a0a:	c7 c0       	rjmp	.+398    	; 0x4b9a <tat_trx_end_cb+0x192>
     * so, store the transmission status and take the radio transceiver to TRX_OFF. On
     * the other hand, if the interrupt event is associated with a frame reception the
     * radio transceiver must be taken to TRX_OFF immidiately to protect the frame buffer.
     */
    
    if (false == waiting_for_ack) {
    4a0c:	80 91 5c 0d 	lds	r24, 0x0D5C
    4a10:	88 23       	and	r24, r24
    4a12:	09 f0       	breq	.+2      	; 0x4a16 <tat_trx_end_cb+0xe>
    4a14:	5e c0       	rjmp	.+188    	; 0x4ad2 <tat_trx_end_cb+0xca>
        /* RX_AACK_ON state. */
        
        /* Check if there is an event handler/callback assigned for this state. */
        if (NULL == rx_cb) {
    4a16:	80 91 58 0d 	lds	r24, 0x0D58
    4a1a:	90 91 59 0d 	lds	r25, 0x0D59
    4a1e:	00 97       	sbiw	r24, 0x00	; 0
    4a20:	09 f4       	brne	.+2      	; 0x4a24 <tat_trx_end_cb+0x1c>
    4a22:	bb c0       	rjmp	.+374    	; 0x4b9a <tat_trx_end_cb+0x192>
            return;
        }
        
        /* Read frame length and check if it is valid. */
        RF230_QUICK_READ_FRAME_LENGTH(frame_length);
    4a24:	28 98       	cbi	0x05, 0	; 5
    4a26:	20 e2       	ldi	r18, 0x20	; 32
    4a28:	2e bd       	out	0x2e, r18	; 46
    4a2a:	0d b4       	in	r0, 0x2d	; 45
    4a2c:	07 fe       	sbrs	r0, 7
    4a2e:	fd cf       	rjmp	.-6      	; 0x4a2a <tat_trx_end_cb+0x22>
    4a30:	2e b5       	in	r18, 0x2e	; 46
    4a32:	20 93 5d 0d 	sts	0x0D5D, r18
    4a36:	2e bd       	out	0x2e, r18	; 46
    4a38:	0d b4       	in	r0, 0x2d	; 45
    4a3a:	07 fe       	sbrs	r0, 7
    4a3c:	fd cf       	rjmp	.-6      	; 0x4a38 <tat_trx_end_cb+0x30>
    4a3e:	2e b5       	in	r18, 0x2e	; 46
    4a40:	2f 77       	andi	r18, 0x7F	; 127
    4a42:	20 93 5d 0d 	sts	0x0D5D, r18
    4a46:	28 9a       	sbi	0x05, 0	; 5
        if (frame_length < TAT_MIN_FRAME_LENGTH) {
    4a48:	28 30       	cpi	r18, 0x08	; 8
    4a4a:	08 f4       	brcc	.+2      	; 0x4a4e <tat_trx_end_cb+0x46>
    4a4c:	a6 c0       	rjmp	.+332    	; 0x4b9a <tat_trx_end_cb+0x192>
        /* Frame length is valid, so the radio transceiver is taken to a TX state
         * to protect the frame buffer. It will be up to the next higher layer to
         * put the radio transceiver either to sleep or back in RX_AACK_ON mode,
         * or to sleep.
         */
        RF230_QUICK_SUBREGISTER_WRITE(0x02, 0x1F, 0, CMD_PLL_ON);
    4a4e:	28 98       	cbi	0x05, 0	; 5
    4a50:	22 e8       	ldi	r18, 0x82	; 130
    4a52:	2e bd       	out	0x2e, r18	; 46
    4a54:	0d b4       	in	r0, 0x2d	; 45
    4a56:	07 fe       	sbrs	r0, 7
    4a58:	fd cf       	rjmp	.-6      	; 0x4a54 <tat_trx_end_cb+0x4c>
    4a5a:	2e b5       	in	r18, 0x2e	; 46
    4a5c:	2e bd       	out	0x2e, r18	; 46
    4a5e:	0d b4       	in	r0, 0x2d	; 45
    4a60:	07 fe       	sbrs	r0, 7
    4a62:	fd cf       	rjmp	.-6      	; 0x4a5e <tat_trx_end_cb+0x56>
    4a64:	2e b5       	in	r18, 0x2e	; 46
    4a66:	28 9a       	sbi	0x05, 0	; 5
    4a68:	28 98       	cbi	0x05, 0	; 5
    4a6a:	32 ec       	ldi	r19, 0xC2	; 194
    4a6c:	3e bd       	out	0x2e, r19	; 46
    4a6e:	20 7e       	andi	r18, 0xE0	; 224
    4a70:	29 60       	ori	r18, 0x09	; 9
    4a72:	0d b4       	in	r0, 0x2d	; 45
    4a74:	07 fe       	sbrs	r0, 7
    4a76:	fd cf       	rjmp	.-6      	; 0x4a72 <tat_trx_end_cb+0x6a>
    4a78:	3e b5       	in	r19, 0x2e	; 46
    4a7a:	2e bd       	out	0x2e, r18	; 46
    4a7c:	0d b4       	in	r0, 0x2d	; 45
    4a7e:	07 fe       	sbrs	r0, 7
    4a80:	fd cf       	rjmp	.-6      	; 0x4a7c <tat_trx_end_cb+0x74>
    4a82:	2e b5       	in	r18, 0x2e	; 46
    4a84:	28 9a       	sbi	0x05, 0	; 5
        
        /* Post to the VRT_KERNEL that the associated event must be executed. */
        if (0 == VRT_GET_ITEMS_FREE()) {
    4a86:	30 91 3a 12 	lds	r19, 0x123A
    4a8a:	33 23       	and	r19, r19
    4a8c:	09 f4       	brne	.+2      	; 0x4a90 <tat_trx_end_cb+0x88>
    4a8e:	5f c0       	rjmp	.+190    	; 0x4b4e <tat_trx_end_cb+0x146>
            VRT_EVENT_MISSED();
            return;
        }
        
        vrt_quick_post_event(rx_cb, (void*)(&frame_length));
    4a90:	20 91 e8 11 	lds	r18, 0x11E8
    4a94:	e2 2f       	mov	r30, r18
    4a96:	f0 e0       	ldi	r31, 0x00	; 0
    4a98:	ee 0f       	add	r30, r30
    4a9a:	ff 1f       	adc	r31, r31
    4a9c:	ee 0f       	add	r30, r30
    4a9e:	ff 1f       	adc	r31, r31
    4aa0:	e7 51       	subi	r30, 0x17	; 23
    4aa2:	fe 4e       	sbci	r31, 0xEE	; 238
    4aa4:	91 83       	std	Z+1, r25	; 0x01
    4aa6:	80 83       	st	Z, r24
    4aa8:	8d e5       	ldi	r24, 0x5D	; 93
    4aaa:	9d e0       	ldi	r25, 0x0D	; 13
    4aac:	93 83       	std	Z+3, r25	; 0x03
    4aae:	82 83       	std	Z+2, r24	; 0x02
    4ab0:	23 31       	cpi	r18, 0x13	; 19
    4ab2:	19 f4       	brne	.+6      	; 0x4aba <tat_trx_end_cb+0xb2>
    4ab4:	10 92 e8 11 	sts	0x11E8, r1
    4ab8:	03 c0       	rjmp	.+6      	; 0x4ac0 <tat_trx_end_cb+0xb8>
    4aba:	2f 5f       	subi	r18, 0xFF	; 255
    4abc:	20 93 e8 11 	sts	0x11E8, r18
    4ac0:	31 50       	subi	r19, 0x01	; 1
    4ac2:	30 93 3a 12 	sts	0x123A, r19
    4ac6:	80 91 e7 11 	lds	r24, 0x11E7
    4aca:	8f 5f       	subi	r24, 0xFF	; 255
    4acc:	80 93 e7 11 	sts	0x11E7, r24
    4ad0:	08 95       	ret
    } else {
        
        /* TX_ARET_ON state. */
        
        waiting_for_ack = false;
    4ad2:	10 92 5c 0d 	sts	0x0D5C, r1
        
        /* Read transaction status and go to TRX_OFF. It is up to the next higher
         * layer to put the radio transceiver in the next state.
         */
        RF230_QUICK_SUBREGISTER_READ(0x02, 0xE0, 5, transmission_status);
    4ad6:	28 98       	cbi	0x05, 0	; 5
    4ad8:	82 e8       	ldi	r24, 0x82	; 130
    4ada:	8e bd       	out	0x2e, r24	; 46
    4adc:	0d b4       	in	r0, 0x2d	; 45
    4ade:	07 fe       	sbrs	r0, 7
    4ae0:	fd cf       	rjmp	.-6      	; 0x4adc <tat_trx_end_cb+0xd4>
    4ae2:	8e b5       	in	r24, 0x2e	; 46
    4ae4:	80 93 8e 01 	sts	0x018E, r24
    4ae8:	8e bd       	out	0x2e, r24	; 46
    4aea:	0d b4       	in	r0, 0x2d	; 45
    4aec:	07 fe       	sbrs	r0, 7
    4aee:	fd cf       	rjmp	.-6      	; 0x4aea <tat_trx_end_cb+0xe2>
    4af0:	8e b5       	in	r24, 0x2e	; 46
    4af2:	80 93 8e 01 	sts	0x018E, r24
    4af6:	28 9a       	sbi	0x05, 0	; 5
    4af8:	82 95       	swap	r24
    4afa:	86 95       	lsr	r24
    4afc:	87 70       	andi	r24, 0x07	; 7
    4afe:	80 93 8e 01 	sts	0x018E, r24
        RF230_QUICK_SUBREGISTER_WRITE(0x02, 0x1F, 0, CMD_FORCE_TRX_OFF);
    4b02:	28 98       	cbi	0x05, 0	; 5
    4b04:	82 e8       	ldi	r24, 0x82	; 130
    4b06:	8e bd       	out	0x2e, r24	; 46
    4b08:	0d b4       	in	r0, 0x2d	; 45
    4b0a:	07 fe       	sbrs	r0, 7
    4b0c:	fd cf       	rjmp	.-6      	; 0x4b08 <tat_trx_end_cb+0x100>
    4b0e:	8e b5       	in	r24, 0x2e	; 46
    4b10:	8e bd       	out	0x2e, r24	; 46
    4b12:	0d b4       	in	r0, 0x2d	; 45
    4b14:	07 fe       	sbrs	r0, 7
    4b16:	fd cf       	rjmp	.-6      	; 0x4b12 <tat_trx_end_cb+0x10a>
    4b18:	8e b5       	in	r24, 0x2e	; 46
    4b1a:	28 9a       	sbi	0x05, 0	; 5
    4b1c:	28 98       	cbi	0x05, 0	; 5
    4b1e:	92 ec       	ldi	r25, 0xC2	; 194
    4b20:	9e bd       	out	0x2e, r25	; 46
    4b22:	80 7e       	andi	r24, 0xE0	; 224
    4b24:	83 60       	ori	r24, 0x03	; 3
    4b26:	0d b4       	in	r0, 0x2d	; 45
    4b28:	07 fe       	sbrs	r0, 7
    4b2a:	fd cf       	rjmp	.-6      	; 0x4b26 <tat_trx_end_cb+0x11e>
    4b2c:	9e b5       	in	r25, 0x2e	; 46
    4b2e:	8e bd       	out	0x2e, r24	; 46
    4b30:	0d b4       	in	r0, 0x2d	; 45
    4b32:	07 fe       	sbrs	r0, 7
    4b34:	fd cf       	rjmp	.-6      	; 0x4b30 <tat_trx_end_cb+0x128>
    4b36:	8e b5       	in	r24, 0x2e	; 46
    4b38:	28 9a       	sbi	0x05, 0	; 5
        
        /* Check if there is an event handler/callback assigned for this state. */
        if (NULL == tx_cb) {
    4b3a:	80 91 5a 0d 	lds	r24, 0x0D5A
    4b3e:	90 91 5b 0d 	lds	r25, 0x0D5B
    4b42:	00 97       	sbiw	r24, 0x00	; 0
    4b44:	51 f1       	breq	.+84     	; 0x4b9a <tat_trx_end_cb+0x192>
            return;
        }
        
        /* Check if it is possible to post event. */
        if (0 == VRT_GET_ITEMS_FREE()) {
    4b46:	30 91 3a 12 	lds	r19, 0x123A
    4b4a:	33 23       	and	r19, r19
    4b4c:	31 f4       	brne	.+12     	; 0x4b5a <tat_trx_end_cb+0x152>
            VRT_EVENT_MISSED();
    4b4e:	80 91 39 12 	lds	r24, 0x1239
    4b52:	8f 5f       	subi	r24, 0xFF	; 255
    4b54:	80 93 39 12 	sts	0x1239, r24
            return;
    4b58:	08 95       	ret
        }
        
        vrt_quick_post_event(tx_cb, (void*)(&transmission_status));
    4b5a:	20 91 e8 11 	lds	r18, 0x11E8
    4b5e:	e2 2f       	mov	r30, r18
    4b60:	f0 e0       	ldi	r31, 0x00	; 0
    4b62:	ee 0f       	add	r30, r30
    4b64:	ff 1f       	adc	r31, r31
    4b66:	ee 0f       	add	r30, r30
    4b68:	ff 1f       	adc	r31, r31
    4b6a:	e7 51       	subi	r30, 0x17	; 23
    4b6c:	fe 4e       	sbci	r31, 0xEE	; 238
    4b6e:	91 83       	std	Z+1, r25	; 0x01
    4b70:	80 83       	st	Z, r24
    4b72:	8e e8       	ldi	r24, 0x8E	; 142
    4b74:	91 e0       	ldi	r25, 0x01	; 1
    4b76:	93 83       	std	Z+3, r25	; 0x03
    4b78:	82 83       	std	Z+2, r24	; 0x02
    4b7a:	23 31       	cpi	r18, 0x13	; 19
    4b7c:	19 f4       	brne	.+6      	; 0x4b84 <tat_trx_end_cb+0x17c>
    4b7e:	10 92 e8 11 	sts	0x11E8, r1
    4b82:	03 c0       	rjmp	.+6      	; 0x4b8a <tat_trx_end_cb+0x182>
    4b84:	2f 5f       	subi	r18, 0xFF	; 255
    4b86:	20 93 e8 11 	sts	0x11E8, r18
    4b8a:	31 50       	subi	r19, 0x01	; 1
    4b8c:	30 93 3a 12 	sts	0x123A, r19
    4b90:	80 91 e7 11 	lds	r24, 0x11E7
    4b94:	8f 5f       	subi	r24, 0xFF	; 255
    4b96:	80 93 e7 11 	sts	0x11E7, r24
    4b9a:	08 95       	ret

00004b9c <tat_init>:
static void tat_trx_end_cb(uint8_t trx_isr_event);


bool tat_init(void) {
    /* Initialize local varaibles. */
    transmission_status = 0xFF;
    4b9c:	8f ef       	ldi	r24, 0xFF	; 255
    4b9e:	80 93 8e 01 	sts	0x018E, r24
    frame_length = 0;
    4ba2:	10 92 5d 0d 	sts	0x0D5D, r1
    waiting_for_ack = false;
    4ba6:	10 92 5c 0d 	sts	0x0D5C, r1
    tx_cb = NULL;
    4baa:	10 92 5b 0d 	sts	0x0D5B, r1
    4bae:	10 92 5a 0d 	sts	0x0D5A, r1
    rx_cb = NULL;
    4bb2:	10 92 59 0d 	sts	0x0D59, r1
    4bb6:	10 92 58 0d 	sts	0x0D58, r1
        
    /* Initialize the low level driver for the radio transceiver. */
    if (true != rf230_init()) {
    4bba:	0e 94 26 12 	call	0x244c	; 0x244c <rf230_init>
    4bbe:	88 23       	and	r24, r24
    4bc0:	09 f4       	brne	.+2      	; 0x4bc4 <tat_init+0x28>
    4bc2:	57 c0       	rjmp	.+174    	; 0x4c72 <tat_init+0xd6>
    4bc4:	8b ef       	ldi	r24, 0xFB	; 251
    4bc6:	93 e0       	ldi	r25, 0x03	; 3
    4bc8:	01 97       	sbiw	r24, 0x01	; 1
    4bca:	f1 f7       	brne	.-4      	; 0x4bc8 <tat_init+0x2c>
    4bcc:	00 c0       	rjmp	.+0      	; 0x4bce <tat_init+0x32>
    4bce:	00 00       	nop
    }
    
    /* Take the radio transceiver to P_ON state. */
    delay_us(TIME_TO_ENTER_P_ON);
    
    rf230_set_tst_low();
    4bd0:	2e 98       	cbi	0x05, 6	; 5
    rf230_set_rst_low();
    4bd2:	2d 98       	cbi	0x05, 5	; 5
    rf230_set_slptr_low();
    4bd4:	2c 98       	cbi	0x05, 4	; 5
    4bd6:	90 e1       	ldi	r25, 0x10	; 16
    4bd8:	9a 95       	dec	r25
    4bda:	f1 f7       	brne	.-4      	; 0x4bd8 <tat_init+0x3c>
    delay_us(TIME_RESET);    
    rf230_set_rst_high();
    4bdc:	2d 9a       	sbi	0x05, 5	; 5
    4bde:	8f e5       	ldi	r24, 0x5F	; 95
    4be0:	99 e0       	ldi	r25, 0x09	; 9
    4be2:	01 97       	sbiw	r24, 0x01	; 1
    4be4:	f1 f7       	brne	.-4      	; 0x4be2 <tat_init+0x46>
    4be6:	00 c0       	rjmp	.+0      	; 0x4be8 <tat_init+0x4c>
    4be8:	00 00       	nop
    4bea:	8f e5       	ldi	r24, 0x5F	; 95
    4bec:	99 e0       	ldi	r25, 0x09	; 9
    4bee:	01 97       	sbiw	r24, 0x01	; 1
    4bf0:	f1 f7       	brne	.-4      	; 0x4bee <tat_init+0x52>
    4bf2:	00 c0       	rjmp	.+0      	; 0x4bf4 <tat_init+0x58>
    4bf4:	00 00       	nop
    
    /* Could be that we were sleeping before we got here. */
    delay_us(TIME_SLEEP_TO_TRX_OFF);
    
    /* Force transition to TRX_OFF and verify. */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    4bf6:	82 e0       	ldi	r24, 0x02	; 2
    4bf8:	6f e1       	ldi	r22, 0x1F	; 31
    4bfa:	40 e0       	ldi	r20, 0x00	; 0
    4bfc:	23 e0       	ldi	r18, 0x03	; 3
    4bfe:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
    4c02:	8b ef       	ldi	r24, 0xFB	; 251
    4c04:	93 e0       	ldi	r25, 0x03	; 3
    4c06:	01 97       	sbiw	r24, 0x01	; 1
    4c08:	f1 f7       	brne	.-4      	; 0x4c06 <tat_init+0x6a>
    4c0a:	00 c0       	rjmp	.+0      	; 0x4c0c <tat_init+0x70>
    4c0c:	00 00       	nop
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    bool rf230_init_status = false;
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	6f e1       	ldi	r22, 0x1F	; 31
    4c12:	40 e0       	ldi	r20, 0x00	; 0
    4c14:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
    4c18:	88 30       	cpi	r24, 0x08	; 8
    4c1a:	59 f5       	brne	.+86     	; 0x4c72 <tat_init+0xd6>
    } else if (RF230_REVB != rf230_register_read(RG_VERSION_NUM)) {
    4c1c:	8d e1       	ldi	r24, 0x1D	; 29
    4c1e:	0e 94 43 12 	call	0x2486	; 0x2486 <rf230_register_read>
    4c22:	82 30       	cpi	r24, 0x02	; 2
    4c24:	31 f5       	brne	.+76     	; 0x4c72 <tat_init+0xd6>
    } else if (RF230_SUPPORTED_MANUFACTURER_ID != rf230_register_read(RG_MAN_ID_0)) {
    4c26:	8e e1       	ldi	r24, 0x1E	; 30
    4c28:	0e 94 43 12 	call	0x2486	; 0x2486 <rf230_register_read>
    4c2c:	8f 31       	cpi	r24, 0x1F	; 31
    4c2e:	19 f5       	brne	.+70     	; 0x4c76 <tat_init+0xda>
    } else {
        /* Set callback handler for the interrupts signaled by the radio transceiver. */
        rf230_set_callback_handler(tat_trx_end_cb);
    4c30:	84 e0       	ldi	r24, 0x04	; 4
    4c32:	95 e2       	ldi	r25, 0x25	; 37
    4c34:	0e 94 20 13 	call	0x2640	; 0x2640 <rf230_set_callback_handler>
        
        /* Enable automatic CRC generation and set the ISR mask. */
        rf230_subregister_write(SR_CLKM_SHA_SEL, 0);
    4c38:	83 e0       	ldi	r24, 0x03	; 3
    4c3a:	68 e0       	ldi	r22, 0x08	; 8
    4c3c:	43 e0       	ldi	r20, 0x03	; 3
    4c3e:	20 e0       	ldi	r18, 0x00	; 0
    4c40:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        rf230_subregister_write(SR_CLKM_CTRL, 0);
    4c44:	83 e0       	ldi	r24, 0x03	; 3
    4c46:	67 e0       	ldi	r22, 0x07	; 7
    4c48:	40 e0       	ldi	r20, 0x00	; 0
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        rf230_subregister_write(SR_TX_AUTO_CRC_ON, 1);
    4c50:	85 e0       	ldi	r24, 0x05	; 5
    4c52:	60 e8       	ldi	r22, 0x80	; 128
    4c54:	47 e0       	ldi	r20, 0x07	; 7
    4c56:	21 e0       	ldi	r18, 0x01	; 1
    4c58:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        rf230_register_write(RG_IRQ_MASK, RF230_SUPPORTED_INTERRUPT_MASK);
    4c5c:	8e e0       	ldi	r24, 0x0E	; 14
    4c5e:	6c e0       	ldi	r22, 0x0C	; 12
    4c60:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
        
        RF230_ENABLE_TRX_ISR();
    4c64:	80 91 6f 00 	lds	r24, 0x006F
    4c68:	80 62       	ori	r24, 0x20	; 32
    4c6a:	80 93 6f 00 	sts	0x006F, r24
        
        rf230_init_status = true;
    4c6e:	81 e0       	ldi	r24, 0x01	; 1
    4c70:	08 95       	ret
    
    /* Force transition to TRX_OFF and verify. */
    rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    delay_us(TIME_P_ON_TO_TRX_OFF);
    
    bool rf230_init_status = false;
    4c72:	80 e0       	ldi	r24, 0x00	; 0
    4c74:	08 95       	ret
    4c76:	80 e0       	ldi	r24, 0x00	; 0
        
        rf230_init_status = true;
    }
    
    return rf230_init_status;
}
    4c78:	08 95       	ret

00004c7a <tat_go_to_sleep>:

void tat_go_to_sleep(void) {
    /* Reset the waiting for ack flag. Should only be set in the period between 
     * a frame being sent and until the associated ACK arrives (BUSY_TX_ARET).
     */
    waiting_for_ack = false;
    4c7a:	10 92 5c 0d 	sts	0x0D5C, r1
    
    if (1 == rf230_get_slptr()) { return; } // Check that we are not already sleeping.
    4c7e:	1c 99       	sbic	0x03, 4	; 3
    4c80:	15 c0       	rjmp	.+42     	; 0x4cac <tat_go_to_sleep+0x32>
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	6f e1       	ldi	r22, 0x1F	; 31
    4c86:	40 e0       	ldi	r20, 0x00	; 0
    4c88:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
    4c8c:	88 30       	cpi	r24, 0x08	; 8
    4c8e:	39 f0       	breq	.+14     	; 0x4c9e <tat_go_to_sleep+0x24>
        do {
            rf230_subregister_write(SR_TRX_CMD, CMD_TRX_OFF);
    4c90:	82 e0       	ldi	r24, 0x02	; 2
    4c92:	6f e1       	ldi	r22, 0x1F	; 31
    4c94:	40 e0       	ldi	r20, 0x00	; 0
    4c96:	28 e0       	ldi	r18, 0x08	; 8
    4c98:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
    4c9c:	f2 cf       	rjmp	.-28     	; 0x4c82 <tat_go_to_sleep+0x8>
        } while (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS));
    }
    
    /* Put the radio transceiver to sleep and wait until sleep state has been entered. */
    rf230_set_slptr_high(); // Go to SLEEP from TRX_OFF.
    4c9e:	2c 9a       	sbi	0x05, 4	; 5
    4ca0:	8f e5       	ldi	r24, 0x5F	; 95
    4ca2:	99 e0       	ldi	r25, 0x09	; 9
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	f1 f7       	brne	.-4      	; 0x4ca4 <tat_go_to_sleep+0x2a>
    4ca8:	00 c0       	rjmp	.+0      	; 0x4caa <tat_go_to_sleep+0x30>
    4caa:	00 00       	nop
    4cac:	08 95       	ret

00004cae <tat_deinit>:
    return rf230_init_status;
}


void tat_deinit(void) {
    rf230_clear_callback_handler();
    4cae:	0e 94 44 13 	call	0x2688	; 0x2688 <rf230_clear_callback_handler>
    
    /* Take the radio transceiver to sleep and then deinit the driver for the
     * radio transceiver.
     */
    tat_go_to_sleep();
    4cb2:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <tat_go_to_sleep>
    rf230_deinit();
    4cb6:	0e 94 3d 12 	call	0x247a	; 0x247a <rf230_deinit>
}
    4cba:	08 95       	ret

00004cbc <tat_wake_up>:

bool tat_wake_up(void) {
    /* Reset the waiting for ack flag. Should only be set in the period between 
     * a frame being sent and until the associated ACK arrives (BUSY_TX_ARET).
     */
    waiting_for_ack = false;
    4cbc:	10 92 5c 0d 	sts	0x0D5C, r1
    
    /* Check if device is sleeping or not. */
    if (0 == rf230_get_slptr()) {
    4cc0:	1c 9b       	sbis	0x03, 4	; 3
    4cc2:	11 c0       	rjmp	.+34     	; 0x4ce6 <tat_wake_up+0x2a>
        return true;
    }
    
    /* Devcie was sleeping: Wake it up. */
    rf230_set_slptr_low(); // Go to TRX_OFF from SLEEP.
    4cc4:	2c 98       	cbi	0x05, 4	; 5
    4cc6:	8f e9       	ldi	r24, 0x9F	; 159
    4cc8:	9f e0       	ldi	r25, 0x0F	; 15
    4cca:	01 97       	sbiw	r24, 0x01	; 1
    4ccc:	f1 f7       	brne	.-4      	; 0x4cca <tat_wake_up+0xe>
    4cce:	00 c0       	rjmp	.+0      	; 0x4cd0 <tat_wake_up+0x14>
    4cd0:	00 00       	nop
    delay_us(2000); // Wait for state transition to complete.
    
    /* Verify that the device has entered the TRX_OFF state. */
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
    4cd2:	81 e0       	ldi	r24, 0x01	; 1
    4cd4:	6f e1       	ldi	r22, 0x1F	; 31
    4cd6:	40 e0       	ldi	r20, 0x00	; 0
    4cd8:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
    rf230_set_slptr_high(); // Go to SLEEP from TRX_OFF.
    delay_us(TIME_TRX_OFF_TO_SLEEP);
}


bool tat_wake_up(void) {
    4cdc:	91 e0       	ldi	r25, 0x01	; 1
    4cde:	88 30       	cpi	r24, 0x08	; 8
    4ce0:	19 f0       	breq	.+6      	; 0x4ce8 <tat_wake_up+0x2c>
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	01 c0       	rjmp	.+2      	; 0x4ce8 <tat_wake_up+0x2c>
     */
    waiting_for_ack = false;
    
    /* Check if device is sleeping or not. */
    if (0 == rf230_get_slptr()) {
        return true;
    4ce6:	91 e0       	ldi	r25, 0x01	; 1
    if (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS)) {
        return false;
    } else {
        return true;
    }
}
    4ce8:	89 2f       	mov	r24, r25
    4cea:	08 95       	ret

00004cec <tat_reset>:
}


void tat_reset(void) {
    /* Make sure that the device is awake. */
    (bool)tat_wake_up();
    4cec:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <tat_wake_up>
    
    /* Make sure that TRX_OFF is entered. */
    do {
        rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    4cf0:	82 e0       	ldi	r24, 0x02	; 2
    4cf2:	6f e1       	ldi	r22, 0x1F	; 31
    4cf4:	40 e0       	ldi	r20, 0x00	; 0
    4cf6:	23 e0       	ldi	r18, 0x03	; 3
    4cf8:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
    } while (TRX_OFF != rf230_subregister_read(SR_TRX_STATUS));
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	6f e1       	ldi	r22, 0x1F	; 31
    4d00:	40 e0       	ldi	r20, 0x00	; 0
    4d02:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
    4d06:	88 30       	cpi	r24, 0x08	; 8
    4d08:	99 f7       	brne	.-26     	; 0x4cf0 <tat_reset+0x4>
    
    frame_length = 0;
    4d0a:	10 92 5d 0d 	sts	0x0D5D, r1
    waiting_for_ack = false;
    4d0e:	10 92 5c 0d 	sts	0x0D5C, r1
}
    4d12:	08 95       	ret

00004d14 <tat_get_pan_id>:


uint16_t tat_get_pan_id(void) {
    /* Not implemented yet. */
    return 0;
}
    4d14:	80 e0       	ldi	r24, 0x00	; 0
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	08 95       	ret

00004d1a <tat_set_pan_id>:


void tat_set_pan_id(uint16_t pan_id) {
    4d1a:	df 93       	push	r29
    4d1c:	cf 93       	push	r28
    4d1e:	0f 92       	push	r0
    4d20:	cd b7       	in	r28, 0x3d	; 61
    4d22:	de b7       	in	r29, 0x3e	; 62
    4d24:	68 2f       	mov	r22, r24
    uint8_t pan_id_byte = ((pan_id >> 8*0) & 0xFF); // Extract short_address_7_0.
    rf230_register_write(RG_PAN_ID_0, pan_id_byte);
    4d26:	82 e2       	ldi	r24, 0x22	; 34
    4d28:	99 83       	std	Y+1, r25	; 0x01
    4d2a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    
    pan_id_byte = ((pan_id >> 8*1) & 0xFF); // Extract short_address_15_8.
    rf230_register_write(RG_PAN_ID_1, pan_id_byte);
    4d2e:	83 e2       	ldi	r24, 0x23	; 35
    4d30:	99 81       	ldd	r25, Y+1	; 0x01
    4d32:	69 2f       	mov	r22, r25
    4d34:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
}
    4d38:	0f 90       	pop	r0
    4d3a:	cf 91       	pop	r28
    4d3c:	df 91       	pop	r29
    4d3e:	08 95       	ret

00004d40 <tat_get_short_address>:


uint16_t tat_get_short_address(void) {
    /* Not implemented yet. */
    return 0;
}
    4d40:	80 e0       	ldi	r24, 0x00	; 0
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	08 95       	ret

00004d46 <tat_set_short_address>:


void tat_set_short_address(uint16_t short_address) {
    4d46:	df 93       	push	r29
    4d48:	cf 93       	push	r28
    4d4a:	0f 92       	push	r0
    4d4c:	cd b7       	in	r28, 0x3d	; 61
    4d4e:	de b7       	in	r29, 0x3e	; 62
    4d50:	68 2f       	mov	r22, r24
    uint8_t address_byte = ((short_address >> 8*0) & 0xFF); // Extract short_address_7_0.
    rf230_register_write(RG_SHORT_ADDR_0, address_byte);
    4d52:	80 e2       	ldi	r24, 0x20	; 32
    4d54:	99 83       	std	Y+1, r25	; 0x01
    4d56:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    
    address_byte = ((short_address >> 8*1) & 0xFF); // Extract short_address_15_8.
    rf230_register_write(RG_SHORT_ADDR_1, address_byte);
    4d5a:	81 e2       	ldi	r24, 0x21	; 33
    4d5c:	99 81       	ldd	r25, Y+1	; 0x01
    4d5e:	69 2f       	mov	r22, r25
    4d60:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
}
    4d64:	0f 90       	pop	r0
    4d66:	cf 91       	pop	r28
    4d68:	df 91       	pop	r29
    4d6a:	08 95       	ret

00004d6c <tat_get_ieee_address>:


uint64_t tat_get_ieee_address(void) {
    /* Not implemented yet. */
    return 0;
}
    4d6c:	20 e0       	ldi	r18, 0x00	; 0
    4d6e:	30 e0       	ldi	r19, 0x00	; 0
    4d70:	40 e0       	ldi	r20, 0x00	; 0
    4d72:	50 e0       	ldi	r21, 0x00	; 0
    4d74:	60 e0       	ldi	r22, 0x00	; 0
    4d76:	70 e0       	ldi	r23, 0x00	; 0
    4d78:	80 e0       	ldi	r24, 0x00	; 0
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	08 95       	ret

00004d7e <tat_set_ieee_address>:


void tat_set_ieee_address(const uint8_t *ieee_address) {
    4d7e:	cf 92       	push	r12
    4d80:	df 92       	push	r13
    4d82:	ef 92       	push	r14
    4d84:	ff 92       	push	r15
    4d86:	0f 93       	push	r16
    4d88:	1f 93       	push	r17
    4d8a:	cf 93       	push	r28
    4d8c:	df 93       	push	r29
    4d8e:	ec 01       	movw	r28, r24
    rf230_register_write(RG_IEEE_ADDR_0, *ieee_address++);
    4d90:	8c 01       	movw	r16, r24
    4d92:	0f 5f       	subi	r16, 0xFF	; 255
    4d94:	1f 4f       	sbci	r17, 0xFF	; 255
    4d96:	84 e2       	ldi	r24, 0x24	; 36
    4d98:	68 81       	ld	r22, Y
    4d9a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_1, *ieee_address++);
    4d9e:	78 01       	movw	r14, r16
    4da0:	08 94       	sec
    4da2:	e1 1c       	adc	r14, r1
    4da4:	f1 1c       	adc	r15, r1
    4da6:	85 e2       	ldi	r24, 0x25	; 37
    4da8:	69 81       	ldd	r22, Y+1	; 0x01
    4daa:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_2, *ieee_address++);
    4dae:	e7 01       	movw	r28, r14
    4db0:	21 96       	adiw	r28, 0x01	; 1
    4db2:	86 e2       	ldi	r24, 0x26	; 38
    4db4:	f8 01       	movw	r30, r16
    4db6:	61 81       	ldd	r22, Z+1	; 0x01
    4db8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_3, *ieee_address++);
    4dbc:	6e 01       	movw	r12, r28
    4dbe:	08 94       	sec
    4dc0:	c1 1c       	adc	r12, r1
    4dc2:	d1 1c       	adc	r13, r1
    4dc4:	87 e2       	ldi	r24, 0x27	; 39
    4dc6:	f7 01       	movw	r30, r14
    4dc8:	61 81       	ldd	r22, Z+1	; 0x01
    4dca:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_4, *ieee_address++);
    4dce:	86 01       	movw	r16, r12
    4dd0:	0f 5f       	subi	r16, 0xFF	; 255
    4dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    4dd4:	88 e2       	ldi	r24, 0x28	; 40
    4dd6:	69 81       	ldd	r22, Y+1	; 0x01
    4dd8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_5, *ieee_address++);
    4ddc:	e8 01       	movw	r28, r16
    4dde:	21 96       	adiw	r28, 0x01	; 1
    4de0:	89 e2       	ldi	r24, 0x29	; 41
    4de2:	f6 01       	movw	r30, r12
    4de4:	61 81       	ldd	r22, Z+1	; 0x01
    4de6:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_6, *ieee_address++);
    4dea:	8a e2       	ldi	r24, 0x2A	; 42
    4dec:	f8 01       	movw	r30, r16
    4dee:	61 81       	ldd	r22, Z+1	; 0x01
    4df0:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
    rf230_register_write(RG_IEEE_ADDR_7, *ieee_address++);
    4df4:	8b e2       	ldi	r24, 0x2B	; 43
    4df6:	69 81       	ldd	r22, Y+1	; 0x01
    4df8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <rf230_register_write>
}
    4dfc:	df 91       	pop	r29
    4dfe:	cf 91       	pop	r28
    4e00:	1f 91       	pop	r17
    4e02:	0f 91       	pop	r16
    4e04:	ff 90       	pop	r15
    4e06:	ef 90       	pop	r14
    4e08:	df 90       	pop	r13
    4e0a:	cf 90       	pop	r12
    4e0c:	08 95       	ret

00004e0e <tat_set_pan_coordinator>:


void tat_set_pan_coordinator(bool iam_pan_coordinator) {
    if (true != iam_pan_coordinator) {
    4e0e:	88 23       	and	r24, r24
    4e10:	29 f4       	brne	.+10     	; 0x4e1c <tat_set_pan_coordinator+0xe>
        rf230_subregister_write(SR_I_AM_COORD, 0);
    4e12:	8e e2       	ldi	r24, 0x2E	; 46
    4e14:	68 e0       	ldi	r22, 0x08	; 8
    4e16:	43 e0       	ldi	r20, 0x03	; 3
    4e18:	20 e0       	ldi	r18, 0x00	; 0
    4e1a:	04 c0       	rjmp	.+8      	; 0x4e24 <tat_set_pan_coordinator+0x16>
    } else {
        rf230_subregister_write(SR_I_AM_COORD, 1);
    4e1c:	8e e2       	ldi	r24, 0x2E	; 46
    4e1e:	68 e0       	ldi	r22, 0x08	; 8
    4e20:	43 e0       	ldi	r20, 0x03	; 3
    4e22:	21 e0       	ldi	r18, 0x01	; 1
    4e24:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
    4e28:	08 95       	ret

00004e2a <tat_send_frame>:
    }
}


bool tat_send_frame(uint8_t length, const uint8_t *frame) {
    4e2a:	df 93       	push	r29
    4e2c:	cf 93       	push	r28
    4e2e:	0f 92       	push	r0
    4e30:	cd b7       	in	r28, 0x3d	; 61
    4e32:	de b7       	in	r29, 0x3e	; 62
    /* Verify that the function parameters are sane. */
    if (0 == length) {
    4e34:	88 23       	and	r24, r24
    4e36:	b9 f0       	breq	.+46     	; 0x4e66 <tat_send_frame+0x3c>
        return false;
    }
    
    if (NULL == frame) {
    4e38:	61 15       	cp	r22, r1
    4e3a:	71 05       	cpc	r23, r1
    4e3c:	a1 f0       	breq	.+40     	; 0x4e66 <tat_send_frame+0x3c>
        return false;
    }
    
    ENTER_CRITICAL_REGION();
    4e3e:	9f b7       	in	r25, 0x3f	; 63
    4e40:	99 83       	std	Y+1, r25	; 0x01
    4e42:	f8 94       	cli
    
    /* Check that we are not busy transmitting a frame already. */
    if (true == waiting_for_ack) {
    4e44:	90 91 5c 0d 	lds	r25, 0x0D5C
    4e48:	99 23       	and	r25, r25
    4e4a:	19 f0       	breq	.+6      	; 0x4e52 <tat_send_frame+0x28>
        LEAVE_CRITICAL_REGION();    
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
    4e4e:	8f bf       	out	0x3f, r24	; 63
    4e50:	0a c0       	rjmp	.+20     	; 0x4e66 <tat_send_frame+0x3c>
    
    /*
     * Toggle the SLP_TR pin to quickly initiate Initiate
     * frame transmission.
     */
    rf230_set_slptr_high();
    4e52:	2c 9a       	sbi	0x05, 4	; 5
    rf230_set_slptr_low();
    4e54:	2c 98       	cbi	0x05, 4	; 5

    LEAVE_CRITICAL_REGION();
    4e56:	99 81       	ldd	r25, Y+1	; 0x01
    4e58:	9f bf       	out	0x3f, r25	; 63
    
    rf230_frame_write(length, frame);
    4e5a:	0e 94 b4 12 	call	0x2568	; 0x2568 <rf230_frame_write>
    waiting_for_ack = true;
    4e5e:	81 e0       	ldi	r24, 0x01	; 1
    4e60:	80 93 5c 0d 	sts	0x0D5C, r24
    
    return true;
    4e64:	01 c0       	rjmp	.+2      	; 0x4e68 <tat_send_frame+0x3e>
    if (0 == length) {
        return false;
    }
    
    if (NULL == frame) {
        return false;
    4e66:	80 e0       	ldi	r24, 0x00	; 0
    
    rf230_frame_write(length, frame);
    waiting_for_ack = true;
    
    return true;
}
    4e68:	0f 90       	pop	r0
    4e6a:	cf 91       	pop	r28
    4e6c:	df 91       	pop	r29
    4e6e:	08 95       	ret

00004e70 <tat_read_frame>:


bool tat_read_frame(uint8_t length, uint8_t *rd_buffer) {
    /* Perform sanity check on function parameters. */
    if (0 == length) {
    4e70:	88 23       	and	r24, r24
    4e72:	39 f0       	breq	.+14     	; 0x4e82 <tat_read_frame+0x12>
        return false;
    }
    
    if (NULL == rd_buffer) {
    4e74:	61 15       	cp	r22, r1
    4e76:	71 05       	cpc	r23, r1
    4e78:	31 f0       	breq	.+12     	; 0x4e86 <tat_read_frame+0x16>
        return false;
    }
    
    /* Upload farme from the frame buffer. */
    rf230_frame_read(length, rd_buffer);
    4e7a:	0e 94 00 13 	call	0x2600	; 0x2600 <rf230_frame_read>
    
    return true;
    4e7e:	81 e0       	ldi	r24, 0x01	; 1
    4e80:	08 95       	ret


bool tat_read_frame(uint8_t length, uint8_t *rd_buffer) {
    /* Perform sanity check on function parameters. */
    if (0 == length) {
        return false;
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	08 95       	ret
    }
    
    if (NULL == rd_buffer) {
        return false;
    4e86:	80 e0       	ldi	r24, 0x00	; 0
    
    /* Upload farme from the frame buffer. */
    rf230_frame_read(length, rd_buffer);
    
    return true;
}
    4e88:	08 95       	ret

00004e8a <tat_get_state>:


uint8_t tat_get_state(void) {
    return rf230_subregister_read(SR_TRX_STATUS);
    4e8a:	81 e0       	ldi	r24, 0x01	; 1
    4e8c:	6f e1       	ldi	r22, 0x1F	; 31
    4e8e:	40 e0       	ldi	r20, 0x00	; 0
    4e90:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
}
    4e94:	08 95       	ret

00004e96 <tat_set_state>:


bool tat_set_state(uint8_t new_state) {
    4e96:	0f 93       	push	r16
    4e98:	1f 93       	push	r17
    4e9a:	18 2f       	mov	r17, r24
    /* Reset the waiting for ack flag. Should only be set in the period between 
     * a frame being sent and until the associated ACK arrives (BUSY_TX_ARET).
     */
    waiting_for_ack = false;
    4e9c:	10 92 5c 0d 	sts	0x0D5C, r1
    
    /*Check function paramter and current state of the radio transceiver.*/
    if (!((new_state == TRX_OFF ) || (new_state == RX_ON) || (new_state == PLL_ON) || 
    4ea0:	88 30       	cpi	r24, 0x08	; 8
    4ea2:	49 f0       	breq	.+18     	; 0x4eb6 <tat_set_state+0x20>
    4ea4:	86 30       	cpi	r24, 0x06	; 6
    4ea6:	39 f0       	breq	.+14     	; 0x4eb6 <tat_set_state+0x20>
    4ea8:	89 30       	cpi	r24, 0x09	; 9
    4eaa:	29 f0       	breq	.+10     	; 0x4eb6 <tat_set_state+0x20>
    4eac:	86 31       	cpi	r24, 0x16	; 22
    4eae:	19 f0       	breq	.+6      	; 0x4eb6 <tat_set_state+0x20>
    4eb0:	89 31       	cpi	r24, 0x19	; 25
    4eb2:	09 f0       	breq	.+2      	; 0x4eb6 <tat_set_state+0x20>
    4eb4:	59 c0       	rjmp	.+178    	; 0x4f68 <tat_set_state+0xd2>
        (new_state == RX_AACK_ON ) || (new_state == TX_ARET_ON ))) {
            return false;
    }
    
    /* Check if the radio transceiver is sleeping. */
    if (rf230_get_slptr() == 1) {
    4eb6:	1c 99       	sbic	0x03, 4	; 3
    4eb8:	57 c0       	rjmp	.+174    	; 0x4f68 <tat_set_state+0xd2>
        return false;
    }
    
    uint8_t original_state = rf230_subregister_read(SR_TRX_STATUS);
    4eba:	81 e0       	ldi	r24, 0x01	; 1
    4ebc:	6f e1       	ldi	r22, 0x1F	; 31
    4ebe:	40 e0       	ldi	r20, 0x00	; 0
    4ec0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
    4ec4:	08 2f       	mov	r16, r24
    
    if ((original_state == BUSY_RX ) || (original_state == BUSY_TX) || 
    4ec6:	81 50       	subi	r24, 0x01	; 1
    4ec8:	82 30       	cpi	r24, 0x02	; 2
    4eca:	08 f4       	brcc	.+2      	; 0x4ece <tat_set_state+0x38>
    4ecc:	4d c0       	rjmp	.+154    	; 0x4f68 <tat_set_state+0xd2>
    4ece:	01 31       	cpi	r16, 0x11	; 17
    4ed0:	09 f4       	brne	.+2      	; 0x4ed4 <tat_set_state+0x3e>
    4ed2:	4a c0       	rjmp	.+148    	; 0x4f68 <tat_set_state+0xd2>
        (original_state == BUSY_RX_AACK) || (original_state == BUSY_TX_ARET)) { return false; }
    4ed4:	02 31       	cpi	r16, 0x12	; 18
    4ed6:	09 f4       	brne	.+2      	; 0x4eda <tat_set_state+0x44>
    4ed8:	47 c0       	rjmp	.+142    	; 0x4f68 <tat_set_state+0xd2>
    
    if (new_state == original_state) { return true; }
    4eda:	10 17       	cp	r17, r16
    4edc:	09 f4       	brne	.+2      	; 0x4ee0 <tat_set_state+0x4a>
    4ede:	46 c0       	rjmp	.+140    	; 0x4f6c <tat_set_state+0xd6>
    //At this point it is clear that the requested new_state is:
    //TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.
                
    //The radio transceiver can be in one of the following states:
    //TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON, TX_ARET_ON.
    if(new_state == TRX_OFF){
    4ee0:	18 30       	cpi	r17, 0x08	; 8
    4ee2:	59 f4       	brne	.+22     	; 0x4efa <tat_set_state+0x64>
        rf230_set_slptr_low();
    4ee4:	2c 98       	cbi	0x05, 4	; 5
    4ee6:	80 e1       	ldi	r24, 0x10	; 16
    4ee8:	8a 95       	dec	r24
    4eea:	f1 f7       	brne	.-4      	; 0x4ee8 <tat_set_state+0x52>
        delay_us(TIME_NOCLK_TO_WAKE);
        rf230_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    4eec:	82 e0       	ldi	r24, 0x02	; 2
    4eee:	6f e1       	ldi	r22, 0x1F	; 31
    4ef0:	40 e0       	ldi	r20, 0x00	; 0
    4ef2:	23 e0       	ldi	r18, 0x03	; 3
    4ef4:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
    4ef8:	2b c0       	rjmp	.+86     	; 0x4f50 <tat_set_state+0xba>
        delay_us(TIME_CMD_FORCE_TRX_OFF);
    } else {
        
        //It is not allowed to go from RX_AACK_ON or TX_AACK_ON and directly to
        //TX_AACK_ON or RX_AACK_ON respectively. Need to go via RX_ON or PLL_ON.
        if ((new_state == TX_ARET_ON) && (original_state == RX_AACK_ON)) {
    4efa:	19 31       	cpi	r17, 0x19	; 25
    4efc:	61 f4       	brne	.+24     	; 0x4f16 <tat_set_state+0x80>
    4efe:	06 31       	cpi	r16, 0x16	; 22
    4f00:	c1 f4       	brne	.+48     	; 0x4f32 <tat_set_state+0x9c>
            
            //First do intermediate state transition to PLL_ON, then to TX_ARET_ON.
            //The final state transition to TX_ARET_ON is handled after the if-else if.
            rf230_subregister_write(SR_TRX_CMD, PLL_ON);
    4f02:	82 e0       	ldi	r24, 0x02	; 2
    4f04:	6f e1       	ldi	r22, 0x1F	; 31
    4f06:	40 e0       	ldi	r20, 0x00	; 0
    4f08:	29 e0       	ldi	r18, 0x09	; 9
    4f0a:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
    4f0e:	82 e0       	ldi	r24, 0x02	; 2
    4f10:	8a 95       	dec	r24
    4f12:	f1 f7       	brne	.-4      	; 0x4f10 <tat_set_state+0x7a>
    4f14:	0d c0       	rjmp	.+26     	; 0x4f30 <tat_set_state+0x9a>
            delay_us(TIME_STATE_TRANSITION_PLL_ACTIVE);
        } else if ((new_state == RX_AACK_ON) && (original_state == TX_ARET_ON)) {
    4f16:	16 31       	cpi	r17, 0x16	; 22
    4f18:	61 f4       	brne	.+24     	; 0x4f32 <tat_set_state+0x9c>
    4f1a:	09 31       	cpi	r16, 0x19	; 25
    4f1c:	51 f4       	brne	.+20     	; 0x4f32 <tat_set_state+0x9c>
            
            //First do intermediate state transition to RX_ON, then to RX_AACK_ON.
            //The final state transition to RX_AACK_ON is handled after the if-else if.
            rf230_subregister_write(SR_TRX_CMD, RX_ON);
    4f1e:	82 e0       	ldi	r24, 0x02	; 2
    4f20:	6f e1       	ldi	r22, 0x1F	; 31
    4f22:	40 e0       	ldi	r20, 0x00	; 0
    4f24:	26 e0       	ldi	r18, 0x06	; 6
    4f26:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
    4f2a:	92 e0       	ldi	r25, 0x02	; 2
    4f2c:	9a 95       	dec	r25
    4f2e:	f1 f7       	brne	.-4      	; 0x4f2c <tat_set_state+0x96>
    4f30:	00 c0       	rjmp	.+0      	; 0x4f32 <tat_set_state+0x9c>
            delay_us(TIME_STATE_TRANSITION_PLL_ACTIVE);
        }
            
        //Any other state transition can be done directly.    
        rf230_subregister_write(SR_TRX_CMD, new_state);
    4f32:	82 e0       	ldi	r24, 0x02	; 2
    4f34:	6f e1       	ldi	r22, 0x1F	; 31
    4f36:	40 e0       	ldi	r20, 0x00	; 0
    4f38:	21 2f       	mov	r18, r17
    4f3a:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
        
        //When the PLL is active most states can be reached in 1us. However, from
        //TRX_OFF the PLL needs time to activate.
        if (original_state == TRX_OFF) {
    4f3e:	08 30       	cpi	r16, 0x08	; 8
    4f40:	39 f4       	brne	.+14     	; 0x4f50 <tat_set_state+0xba>
    4f42:	87 e6       	ldi	r24, 0x67	; 103
    4f44:	91 e0       	ldi	r25, 0x01	; 1
    4f46:	01 97       	sbiw	r24, 0x01	; 1
    4f48:	f1 f7       	brne	.-4      	; 0x4f46 <tat_set_state+0xb0>
    4f4a:	00 c0       	rjmp	.+0      	; 0x4f4c <tat_set_state+0xb6>
    4f4c:	00 00       	nop
    4f4e:	04 c0       	rjmp	.+8      	; 0x4f58 <tat_set_state+0xc2>
    4f50:	92 e0       	ldi	r25, 0x02	; 2
    4f52:	9a 95       	dec	r25
    4f54:	f1 f7       	brne	.-4      	; 0x4f52 <tat_set_state+0xbc>
    4f56:	00 c0       	rjmp	.+0      	; 0x4f58 <tat_set_state+0xc2>
            delay_us(TIME_STATE_TRANSITION_PLL_ACTIVE);
        }
    }
        
    /*Verify state transition.*/
    if(rf230_subregister_read(SR_TRX_STATUS) == new_state) { 
    4f58:	81 e0       	ldi	r24, 0x01	; 1
    4f5a:	6f e1       	ldi	r22, 0x1F	; 31
    4f5c:	40 e0       	ldi	r20, 0x00	; 0
    4f5e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
uint8_t tat_get_state(void) {
    return rf230_subregister_read(SR_TRX_STATUS);
}


bool tat_set_state(uint8_t new_state) {
    4f62:	91 e0       	ldi	r25, 0x01	; 1
    4f64:	81 17       	cp	r24, r17
    4f66:	19 f0       	breq	.+6      	; 0x4f6e <tat_set_state+0xd8>
    }
    
    uint8_t original_state = rf230_subregister_read(SR_TRX_STATUS);
    
    if ((original_state == BUSY_RX ) || (original_state == BUSY_TX) || 
        (original_state == BUSY_RX_AACK) || (original_state == BUSY_TX_ARET)) { return false; }
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	01 c0       	rjmp	.+2      	; 0x4f6e <tat_set_state+0xd8>
    
    if (new_state == original_state) { return true; }
    4f6c:	91 e0       	ldi	r25, 0x01	; 1
    if(rf230_subregister_read(SR_TRX_STATUS) == new_state) { 
        return true; 
    } else {
        return false;
    }
}
    4f6e:	89 2f       	mov	r24, r25
    4f70:	1f 91       	pop	r17
    4f72:	0f 91       	pop	r16
    4f74:	08 95       	ret

00004f76 <tat_get_channel>:


uint8_t tat_get_channel(void) {
    return 0;
}
    4f76:	80 e0       	ldi	r24, 0x00	; 0
    4f78:	08 95       	ret

00004f7a <tat_set_channel>:


bool tat_set_channel(uint8_t channel) {
    4f7a:	1f 93       	push	r17
    4f7c:	18 2f       	mov	r17, r24
    /* Check that the selected channel is within bounds. */
    if ((channel < TAT_MIN_CHANNEL) || (channel > TAT_MAX_CHANNEL)) {
    4f7e:	8b 50       	subi	r24, 0x0B	; 11
    4f80:	80 31       	cpi	r24, 0x10	; 16
    4f82:	68 f4       	brcc	.+26     	; 0x4f9e <tat_set_channel+0x24>
        return false;
    }
    
    /*Set new operating channel.*/        
    rf230_subregister_write(SR_CHANNEL, channel);
    4f84:	88 e0       	ldi	r24, 0x08	; 8
    4f86:	6f e1       	ldi	r22, 0x1F	; 31
    4f88:	40 e0       	ldi	r20, 0x00	; 0
    4f8a:	21 2f       	mov	r18, r17
    4f8c:	0e 94 90 12 	call	0x2520	; 0x2520 <rf230_subregister_write>
    
    bool set_channel_status = false;
    /* Verify that the channel was set. */
    if (channel == rf230_subregister_read(SR_CHANNEL)) {
    4f90:	88 e0       	ldi	r24, 0x08	; 8
    4f92:	6f e1       	ldi	r22, 0x1F	; 31
    4f94:	40 e0       	ldi	r20, 0x00	; 0
    4f96:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf230_subregister_read>
uint8_t tat_get_channel(void) {
    return 0;
}


bool tat_set_channel(uint8_t channel) {
    4f9a:	91 e0       	ldi	r25, 0x01	; 1
    4f9c:	18 13       	cpse	r17, r24
    /* Check that the selected channel is within bounds. */
    if ((channel < TAT_MIN_CHANNEL) || (channel > TAT_MAX_CHANNEL)) {
        return false;
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    if (channel == rf230_subregister_read(SR_CHANNEL)) {
        set_channel_status = true;
    }
    
    return set_channel_status;
}
    4fa0:	89 2f       	mov	r24, r25
    4fa2:	1f 91       	pop	r17
    4fa4:	08 95       	ret

00004fa6 <tat_set_tx_callback_handler>:


void tat_set_tx_callback_handler(tat_cb_handler_t handler) {
    4fa6:	df 93       	push	r29
    4fa8:	cf 93       	push	r28
    4faa:	0f 92       	push	r0
    4fac:	cd b7       	in	r28, 0x3d	; 61
    4fae:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    4fb0:	2f b7       	in	r18, 0x3f	; 63
    4fb2:	29 83       	std	Y+1, r18	; 0x01
    4fb4:	f8 94       	cli
    tx_cb = handler;
    4fb6:	90 93 5b 0d 	sts	0x0D5B, r25
    4fba:	80 93 5a 0d 	sts	0x0D5A, r24
    LEAVE_CRITICAL_REGION();
    4fbe:	89 81       	ldd	r24, Y+1	; 0x01
    4fc0:	8f bf       	out	0x3f, r24	; 63
}
    4fc2:	0f 90       	pop	r0
    4fc4:	cf 91       	pop	r28
    4fc6:	df 91       	pop	r29
    4fc8:	08 95       	ret

00004fca <tat_get_tx_callback_handler>:


tat_cb_handler_t tat_get_tx_callback_handler(void) {
    4fca:	df 93       	push	r29
    4fcc:	cf 93       	push	r28
    4fce:	0f 92       	push	r0
    4fd0:	cd b7       	in	r28, 0x3d	; 61
    4fd2:	de b7       	in	r29, 0x3e	; 62
    tat_cb_handler_t handler = NULL;
    
    ENTER_CRITICAL_REGION();
    4fd4:	8f b7       	in	r24, 0x3f	; 63
    4fd6:	89 83       	std	Y+1, r24	; 0x01
    4fd8:	f8 94       	cli
    handler = tx_cb;
    4fda:	80 91 5a 0d 	lds	r24, 0x0D5A
    4fde:	90 91 5b 0d 	lds	r25, 0x0D5B
    LEAVE_CRITICAL_REGION();
    4fe2:	29 81       	ldd	r18, Y+1	; 0x01
    4fe4:	2f bf       	out	0x3f, r18	; 63
    
    return handler;
}
    4fe6:	0f 90       	pop	r0
    4fe8:	cf 91       	pop	r28
    4fea:	df 91       	pop	r29
    4fec:	08 95       	ret

00004fee <tat_clear_tx_callback_handler>:


void tat_clear_tx_callback_handler(void) {
    4fee:	df 93       	push	r29
    4ff0:	cf 93       	push	r28
    4ff2:	0f 92       	push	r0
    4ff4:	cd b7       	in	r28, 0x3d	; 61
    4ff6:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    4ff8:	8f b7       	in	r24, 0x3f	; 63
    4ffa:	89 83       	std	Y+1, r24	; 0x01
    4ffc:	f8 94       	cli
    tx_cb = NULL;
    4ffe:	10 92 5b 0d 	sts	0x0D5B, r1
    5002:	10 92 5a 0d 	sts	0x0D5A, r1
    LEAVE_CRITICAL_REGION();
    5006:	89 81       	ldd	r24, Y+1	; 0x01
    5008:	8f bf       	out	0x3f, r24	; 63
}
    500a:	0f 90       	pop	r0
    500c:	cf 91       	pop	r28
    500e:	df 91       	pop	r29
    5010:	08 95       	ret

00005012 <tat_set_rx_callback_handler>:


void tat_set_rx_callback_handler(tat_cb_handler_t handler) {
    5012:	df 93       	push	r29
    5014:	cf 93       	push	r28
    5016:	0f 92       	push	r0
    5018:	cd b7       	in	r28, 0x3d	; 61
    501a:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    501c:	2f b7       	in	r18, 0x3f	; 63
    501e:	29 83       	std	Y+1, r18	; 0x01
    5020:	f8 94       	cli
    rx_cb = handler;
    5022:	90 93 59 0d 	sts	0x0D59, r25
    5026:	80 93 58 0d 	sts	0x0D58, r24
    LEAVE_CRITICAL_REGION();
    502a:	89 81       	ldd	r24, Y+1	; 0x01
    502c:	8f bf       	out	0x3f, r24	; 63
}
    502e:	0f 90       	pop	r0
    5030:	cf 91       	pop	r28
    5032:	df 91       	pop	r29
    5034:	08 95       	ret

00005036 <tat_get_rx_callback_handler>:


tat_cb_handler_t tat_get_rx_callback_handler(void) {
    5036:	df 93       	push	r29
    5038:	cf 93       	push	r28
    503a:	0f 92       	push	r0
    503c:	cd b7       	in	r28, 0x3d	; 61
    503e:	de b7       	in	r29, 0x3e	; 62
    tat_cb_handler_t handler = NULL;
    
    ENTER_CRITICAL_REGION();
    5040:	8f b7       	in	r24, 0x3f	; 63
    5042:	89 83       	std	Y+1, r24	; 0x01
    5044:	f8 94       	cli
    handler = rx_cb;
    5046:	80 91 58 0d 	lds	r24, 0x0D58
    504a:	90 91 59 0d 	lds	r25, 0x0D59
    LEAVE_CRITICAL_REGION();
    504e:	29 81       	ldd	r18, Y+1	; 0x01
    5050:	2f bf       	out	0x3f, r18	; 63
    
    return handler;
}
    5052:	0f 90       	pop	r0
    5054:	cf 91       	pop	r28
    5056:	df 91       	pop	r29
    5058:	08 95       	ret

0000505a <tat_clear_rx_callback_handler>:


void tat_clear_rx_callback_handler(void) {
    505a:	df 93       	push	r29
    505c:	cf 93       	push	r28
    505e:	0f 92       	push	r0
    5060:	cd b7       	in	r28, 0x3d	; 61
    5062:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    5064:	8f b7       	in	r24, 0x3f	; 63
    5066:	89 83       	std	Y+1, r24	; 0x01
    5068:	f8 94       	cli
    rx_cb = NULL;
    506a:	10 92 59 0d 	sts	0x0D59, r1
    506e:	10 92 58 0d 	sts	0x0D58, r1
    LEAVE_CRITICAL_REGION();
    5072:	89 81       	ldd	r24, Y+1	; 0x01
    5074:	8f bf       	out	0x3f, r24	; 63
}
    5076:	0f 90       	pop	r0
    5078:	cf 91       	pop	r28
    507a:	df 91       	pop	r29
    507c:	08 95       	ret

0000507e <vrt_mem_init>:
/*================================= LOCAL VARIABLES  =========================*/
static uint8_t nmbr_of_partitions = 0;
static vrt_mem_partition_desc_t *first_partition;
/*================================= PROTOTYPES       =========================*/
bool vrt_mem_init(void) {
    nmbr_of_partitions = 0;
    507e:	10 92 5e 0d 	sts	0x0D5E, r1
    first_partition = NULL;
    5082:	10 92 60 0d 	sts	0x0D60, r1
    5086:	10 92 5f 0d 	sts	0x0D5F, r1
    
	return true;
}
    508a:	81 e0       	ldi	r24, 0x01	; 1
    508c:	08 95       	ret

0000508e <vrt_mem_add_partition>:


bool vrt_mem_add_partition(uint8_t *address, uint16_t block_size, uint8_t block_count, vrt_mem_partition_desc_t *desc) {
    508e:	cf 92       	push	r12
    5090:	df 92       	push	r13
    5092:	ef 92       	push	r14
    5094:	ff 92       	push	r15
    5096:	0f 93       	push	r16
    5098:	1f 93       	push	r17
    509a:	df 93       	push	r29
    509c:	cf 93       	push	r28
    509e:	0f 92       	push	r0
    50a0:	cd b7       	in	r28, 0x3d	; 61
    50a2:	de b7       	in	r29, 0x3e	; 62
    50a4:	f9 01       	movw	r30, r18
    /* Validate  function parameters. */
    if (NULL == address) { return false; }
    50a6:	00 97       	sbiw	r24, 0x00	; 0
    50a8:	09 f4       	brne	.+2      	; 0x50ac <vrt_mem_add_partition+0x1e>
    50aa:	6e c0       	rjmp	.+220    	; 0x5188 <vrt_mem_add_partition+0xfa>
    if (block_count < 2) { return false; }
    50ac:	42 30       	cpi	r20, 0x02	; 2
    50ae:	08 f4       	brcc	.+2      	; 0x50b2 <vrt_mem_add_partition+0x24>
    50b0:	6b c0       	rjmp	.+214    	; 0x5188 <vrt_mem_add_partition+0xfa>
    if (block_size < sizeof(void *)) { return false; }
    50b2:	62 30       	cpi	r22, 0x02	; 2
    50b4:	71 05       	cpc	r23, r1
    50b6:	08 f4       	brcc	.+2      	; 0x50ba <vrt_mem_add_partition+0x2c>
    50b8:	67 c0       	rjmp	.+206    	; 0x5188 <vrt_mem_add_partition+0xfa>
    
    /* Protect the remaining code from interrupts. */
    ENTER_CRITICAL_REGION();
    50ba:	2f b7       	in	r18, 0x3f	; 63
    50bc:	29 83       	std	Y+1, r18	; 0x01
    50be:	f8 94       	cli
    
    /* Build list of free blocks. */
    void **link = (void **)address;
    50c0:	dc 01       	movw	r26, r24
    uint8_t *block  = (uint8_t *)(address + block_size);
    50c2:	9c 01       	movw	r18, r24
    50c4:	26 0f       	add	r18, r22
    50c6:	37 1f       	adc	r19, r23
    
    for (uint8_t i = 0; i < (block_count - 1); i++) {
    50c8:	50 e0       	ldi	r21, 0x00	; 0
    50ca:	04 2f       	mov	r16, r20
    50cc:	10 e0       	ldi	r17, 0x00	; 0
    50ce:	68 01       	movw	r12, r16
    50d0:	08 94       	sec
    50d2:	c1 08       	sbc	r12, r1
    50d4:	d1 08       	sbc	r13, r1
    50d6:	06 c0       	rjmp	.+12     	; 0x50e4 <vrt_mem_add_partition+0x56>
       *link  = (void *)block;
    50d8:	2d 93       	st	X+, r18
    50da:	3c 93       	st	X, r19
    50dc:	d9 01       	movw	r26, r18
        link  = (void **)block;
        block = (uint8_t *)(block + block_size);
    50de:	26 0f       	add	r18, r22
    50e0:	37 1f       	adc	r19, r23
    
    /* Build list of free blocks. */
    void **link = (void **)address;
    uint8_t *block  = (uint8_t *)(address + block_size);
    
    for (uint8_t i = 0; i < (block_count - 1); i++) {
    50e2:	5f 5f       	subi	r21, 0xFF	; 255
    50e4:	e5 2e       	mov	r14, r21
    50e6:	ff 24       	eor	r15, r15
    50e8:	ec 14       	cp	r14, r12
    50ea:	fd 04       	cpc	r15, r13
    50ec:	ac f3       	brlt	.-22     	; 0x50d8 <vrt_mem_add_partition+0x4a>
       *link  = (void *)block;
        link  = (void **)block;
        block = (uint8_t *)(block + block_size);
    }
    
    *link = (void *)NULL;
    50ee:	11 96       	adiw	r26, 0x01	; 1
    50f0:	1c 92       	st	X, r1
    50f2:	1e 92       	st	-X, r1
    
    /* Set-up the partition. */
    desc->block_size = block_size;
    50f4:	71 83       	std	Z+1, r23	; 0x01
    50f6:	60 83       	st	Z, r22
    desc->block_count = block_count;
    50f8:	42 83       	std	Z+2, r20	; 0x02
    desc->free_block_count = block_count;
    50fa:	43 83       	std	Z+3, r20	; 0x03
    desc->partition_start = address;
    50fc:	95 83       	std	Z+5, r25	; 0x05
    50fe:	84 83       	std	Z+4, r24	; 0x04
    desc->partition_end = address + (block_size * block_count) - 1;
    5100:	06 9f       	mul	r16, r22
    5102:	90 01       	movw	r18, r0
    5104:	07 9f       	mul	r16, r23
    5106:	30 0d       	add	r19, r0
    5108:	16 9f       	mul	r17, r22
    510a:	30 0d       	add	r19, r0
    510c:	11 24       	eor	r1, r1
    510e:	21 50       	subi	r18, 0x01	; 1
    5110:	30 40       	sbci	r19, 0x00	; 0
    5112:	28 0f       	add	r18, r24
    5114:	39 1f       	adc	r19, r25
    5116:	37 83       	std	Z+7, r19	; 0x07
    5118:	26 83       	std	Z+6, r18	; 0x06
    desc->free_list = address;
    511a:	91 87       	std	Z+9, r25	; 0x09
    511c:	80 87       	std	Z+8, r24	; 0x08
    
    /* Add to the list of partitions. The partitions are sorted by ascending block size. */
    if (0 == nmbr_of_partitions) {
    511e:	40 91 5e 0d 	lds	r20, 0x0D5E
    5122:	44 23       	and	r20, r20
    5124:	39 f4       	brne	.+14     	; 0x5134 <vrt_mem_add_partition+0xa6>
        desc->next = (vrt_mem_partition_desc_t *)NULL;
    5126:	13 86       	std	Z+11, r1	; 0x0b
    5128:	12 86       	std	Z+10, r1	; 0x0a
        first_partition = desc;
    512a:	f0 93 60 0d 	sts	0x0D60, r31
    512e:	e0 93 5f 0d 	sts	0x0D5F, r30
    5132:	23 c0       	rjmp	.+70     	; 0x517a <vrt_mem_add_partition+0xec>
    } else {
        vrt_mem_partition_desc_t *current_partition = first_partition;
    5134:	a0 91 5f 0d 	lds	r26, 0x0D5F
    5138:	b0 91 60 0d 	lds	r27, 0x0D60
    513c:	54 2f       	mov	r21, r20
        vrt_mem_partition_desc_t *previous_partition = first_partition;
    513e:	cd 01       	movw	r24, r26
    5140:	03 c0       	rjmp	.+6      	; 0x5148 <vrt_mem_add_partition+0xba>
        uint8_t partiotions_left = nmbr_of_partitions;
    
        while(0 != partiotions_left) {
    5142:	cd 01       	movw	r24, r26
            if((current_partition->block_size) >= block_size) {
                break;
            } else {
                previous_partition = current_partition;
                current_partition = current_partition->next;
    5144:	a3 2f       	mov	r26, r19
    5146:	b2 2f       	mov	r27, r18
        vrt_mem_partition_desc_t *current_partition = first_partition;
        vrt_mem_partition_desc_t *previous_partition = first_partition;
        uint8_t partiotions_left = nmbr_of_partitions;
    
        while(0 != partiotions_left) {
            if((current_partition->block_size) >= block_size) {
    5148:	2d 91       	ld	r18, X+
    514a:	3c 91       	ld	r19, X
    514c:	11 97       	sbiw	r26, 0x01	; 1
    514e:	26 17       	cp	r18, r22
    5150:	37 07       	cpc	r19, r23
    5152:	50 f4       	brcc	.+20     	; 0x5168 <vrt_mem_add_partition+0xda>
                break;
            } else {
                previous_partition = current_partition;
                current_partition = current_partition->next;
    5154:	1a 96       	adiw	r26, 0x0a	; 10
    5156:	3c 91       	ld	r19, X
    5158:	1a 97       	sbiw	r26, 0x0a	; 10
    515a:	1b 96       	adiw	r26, 0x0b	; 11
    515c:	2c 91       	ld	r18, X
    515e:	1b 97       	sbiw	r26, 0x0b	; 11
                partiotions_left--;
    5160:	51 50       	subi	r21, 0x01	; 1
    } else {
        vrt_mem_partition_desc_t *current_partition = first_partition;
        vrt_mem_partition_desc_t *previous_partition = first_partition;
        uint8_t partiotions_left = nmbr_of_partitions;
    
        while(0 != partiotions_left) {
    5162:	79 f7       	brne	.-34     	; 0x5142 <vrt_mem_add_partition+0xb4>
    5164:	cd 01       	movw	r24, r26
    5166:	02 c0       	rjmp	.+4      	; 0x516c <vrt_mem_add_partition+0xde>
            if((current_partition->block_size) >= block_size) {
    5168:	3a 2f       	mov	r19, r26
    516a:	2b 2f       	mov	r18, r27
                current_partition = current_partition->next;
                partiotions_left--;
            }
        }
        
        previous_partition->next = desc;
    516c:	dc 01       	movw	r26, r24
    516e:	1b 96       	adiw	r26, 0x0b	; 11
    5170:	fc 93       	st	X, r31
    5172:	ee 93       	st	-X, r30
    5174:	1a 97       	sbiw	r26, 0x0a	; 10
        desc->next = current_partition;
    5176:	32 87       	std	Z+10, r19	; 0x0a
    5178:	23 87       	std	Z+11, r18	; 0x0b
    }
    
    nmbr_of_partitions++;
    517a:	4f 5f       	subi	r20, 0xFF	; 255
    517c:	40 93 5e 0d 	sts	0x0D5E, r20
    
    LEAVE_CRITICAL_REGION();
    5180:	89 81       	ldd	r24, Y+1	; 0x01
    5182:	8f bf       	out	0x3f, r24	; 63
	return true;
    5184:	81 e0       	ldi	r24, 0x01	; 1
    5186:	01 c0       	rjmp	.+2      	; 0x518a <vrt_mem_add_partition+0xfc>

bool vrt_mem_add_partition(uint8_t *address, uint16_t block_size, uint8_t block_count, vrt_mem_partition_desc_t *desc) {
    /* Validate  function parameters. */
    if (NULL == address) { return false; }
    if (block_count < 2) { return false; }
    if (block_size < sizeof(void *)) { return false; }
    5188:	80 e0       	ldi	r24, 0x00	; 0
    
    nmbr_of_partitions++;
    
    LEAVE_CRITICAL_REGION();
	return true;
}
    518a:	0f 90       	pop	r0
    518c:	cf 91       	pop	r28
    518e:	df 91       	pop	r29
    5190:	1f 91       	pop	r17
    5192:	0f 91       	pop	r16
    5194:	ff 90       	pop	r15
    5196:	ef 90       	pop	r14
    5198:	df 90       	pop	r13
    519a:	cf 90       	pop	r12
    519c:	08 95       	ret

0000519e <vrt_mem_alloc>:


void * vrt_mem_alloc(uint16_t block_size) {
    519e:	df 93       	push	r29
    51a0:	cf 93       	push	r28
    51a2:	0f 92       	push	r0
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
    /* Validate function parameter. */
    if (0 == block_size) { return (void*)NULL; }
    51a8:	00 97       	sbiw	r24, 0x00	; 0
    51aa:	09 f4       	brne	.+2      	; 0x51ae <vrt_mem_alloc+0x10>
    51ac:	3f c0       	rjmp	.+126    	; 0x522c <vrt_mem_alloc+0x8e>
    /* Check that there is at least one partition available. */
    if (0 == nmbr_of_partitions) { return (void*)NULL; }
    51ae:	20 91 5e 0d 	lds	r18, 0x0D5E
    51b2:	22 23       	and	r18, r18
    51b4:	d9 f1       	breq	.+118    	; 0x522c <vrt_mem_alloc+0x8e>
    
    /* Find the smallest block available. */
    ENTER_CRITICAL_REGION();
    51b6:	2f b7       	in	r18, 0x3f	; 63
    51b8:	29 83       	std	Y+1, r18	; 0x01
    51ba:	f8 94       	cli
    vrt_mem_partition_desc_t *partition = first_partition;
    51bc:	a0 91 5f 0d 	lds	r26, 0x0D5F
    51c0:	b0 91 60 0d 	lds	r27, 0x0D60
    uint8_t partiotions_left = nmbr_of_partitions;
    51c4:	50 91 5e 0d 	lds	r21, 0x0D5E
    
    bool partition_found = false;
    51c8:	40 e0       	ldi	r20, 0x00	; 0
    while((0 != partiotions_left) && (false == partition_found)) {
    51ca:	12 c0       	rjmp	.+36     	; 0x51f0 <vrt_mem_alloc+0x52>
        if(((partition->block_size) >= block_size) && (0 != (partition->free_block_count))) {
    51cc:	2d 91       	ld	r18, X+
    51ce:	3c 91       	ld	r19, X
    51d0:	11 97       	sbiw	r26, 0x01	; 1
    51d2:	28 17       	cp	r18, r24
    51d4:	39 07       	cpc	r19, r25
    51d6:	28 f0       	brcs	.+10     	; 0x51e2 <vrt_mem_alloc+0x44>
    51d8:	13 96       	adiw	r26, 0x03	; 3
    51da:	2c 91       	ld	r18, X
    51dc:	13 97       	sbiw	r26, 0x03	; 3
    51de:	22 23       	and	r18, r18
    51e0:	31 f4       	brne	.+12     	; 0x51ee <vrt_mem_alloc+0x50>
            partition_found = true;
        } else {
            partition = partition->next;
    51e2:	1a 96       	adiw	r26, 0x0a	; 10
    51e4:	0d 90       	ld	r0, X+
    51e6:	bc 91       	ld	r27, X
    51e8:	a0 2d       	mov	r26, r0
            partiotions_left--;
    51ea:	51 50       	subi	r21, 0x01	; 1
    51ec:	01 c0       	rjmp	.+2      	; 0x51f0 <vrt_mem_alloc+0x52>
    uint8_t partiotions_left = nmbr_of_partitions;
    
    bool partition_found = false;
    while((0 != partiotions_left) && (false == partition_found)) {
        if(((partition->block_size) >= block_size) && (0 != (partition->free_block_count))) {
            partition_found = true;
    51ee:	41 e0       	ldi	r20, 0x01	; 1
    ENTER_CRITICAL_REGION();
    vrt_mem_partition_desc_t *partition = first_partition;
    uint8_t partiotions_left = nmbr_of_partitions;
    
    bool partition_found = false;
    while((0 != partiotions_left) && (false == partition_found)) {
    51f0:	55 23       	and	r21, r21
    51f2:	19 f0       	breq	.+6      	; 0x51fa <vrt_mem_alloc+0x5c>
    51f4:	44 23       	and	r20, r20
    51f6:	51 f3       	breq	.-44     	; 0x51cc <vrt_mem_alloc+0x2e>
    51f8:	02 c0       	rjmp	.+4      	; 0x51fe <vrt_mem_alloc+0x60>
        }
    }
    
    void *block = (void *)NULL;
    
    if (true == partition_found) {
    51fa:	44 23       	and	r20, r20
    51fc:	91 f0       	breq	.+36     	; 0x5222 <vrt_mem_alloc+0x84>
        block = partition->free_list;
    51fe:	18 96       	adiw	r26, 0x08	; 8
    5200:	ed 91       	ld	r30, X+
    5202:	fc 91       	ld	r31, X
    5204:	19 97       	sbiw	r26, 0x09	; 9
        partition->free_list = *(void **)block;
    5206:	80 81       	ld	r24, Z
    5208:	91 81       	ldd	r25, Z+1	; 0x01
    520a:	19 96       	adiw	r26, 0x09	; 9
    520c:	9c 93       	st	X, r25
    520e:	8e 93       	st	-X, r24
    5210:	18 97       	sbiw	r26, 0x08	; 8
        (partition->free_block_count)--;
    5212:	13 96       	adiw	r26, 0x03	; 3
    5214:	8c 91       	ld	r24, X
    5216:	13 97       	sbiw	r26, 0x03	; 3
    5218:	81 50       	subi	r24, 0x01	; 1
    521a:	13 96       	adiw	r26, 0x03	; 3
    521c:	8c 93       	st	X, r24
    521e:	13 97       	sbiw	r26, 0x03	; 3
    5220:	02 c0       	rjmp	.+4      	; 0x5226 <vrt_mem_alloc+0x88>
            partition = partition->next;
            partiotions_left--;
        }
    }
    
    void *block = (void *)NULL;
    5222:	e0 e0       	ldi	r30, 0x00	; 0
    5224:	f0 e0       	ldi	r31, 0x00	; 0
        block = partition->free_list;
        partition->free_list = *(void **)block;
        (partition->free_block_count)--;
    }
    
    LEAVE_CRITICAL_REGION();
    5226:	89 81       	ldd	r24, Y+1	; 0x01
    5228:	8f bf       	out	0x3f, r24	; 63
    
    return block;
    522a:	02 c0       	rjmp	.+4      	; 0x5230 <vrt_mem_alloc+0x92>

void * vrt_mem_alloc(uint16_t block_size) {
    /* Validate function parameter. */
    if (0 == block_size) { return (void*)NULL; }
    /* Check that there is at least one partition available. */
    if (0 == nmbr_of_partitions) { return (void*)NULL; }
    522c:	e0 e0       	ldi	r30, 0x00	; 0
    522e:	f0 e0       	ldi	r31, 0x00	; 0
    }
    
    LEAVE_CRITICAL_REGION();
    
    return block;
}
    5230:	cf 01       	movw	r24, r30
    5232:	0f 90       	pop	r0
    5234:	cf 91       	pop	r28
    5236:	df 91       	pop	r29
    5238:	08 95       	ret

0000523a <vrt_mem_free>:


void vrt_mem_free(void *block) {
    523a:	df 93       	push	r29
    523c:	cf 93       	push	r28
    523e:	0f 92       	push	r0
    5240:	cd b7       	in	r28, 0x3d	; 61
    5242:	de b7       	in	r29, 0x3e	; 62
    /* Verify that the function parameter is valid. */
    if (NULL == block) { return; }
    5244:	00 97       	sbiw	r24, 0x00	; 0
    5246:	b9 f1       	breq	.+110    	; 0x52b6 <vrt_mem_free+0x7c>
    
    /* Check that there is at least one partition available. */
    if (0 == nmbr_of_partitions) { return; }
    5248:	20 91 5e 0d 	lds	r18, 0x0D5E
    524c:	22 23       	and	r18, r18
    524e:	99 f1       	breq	.+102    	; 0x52b6 <vrt_mem_free+0x7c>
    
    /* Find partition where this block belongs. */
    ENTER_CRITICAL_REGION();
    5250:	2f b7       	in	r18, 0x3f	; 63
    5252:	29 83       	std	Y+1, r18	; 0x01
    5254:	f8 94       	cli
    vrt_mem_partition_desc_t *partition = first_partition;
    5256:	e0 91 5f 0d 	lds	r30, 0x0D5F
    525a:	f0 91 60 0d 	lds	r31, 0x0D60
    uint8_t partiotions_left = nmbr_of_partitions;
    525e:	70 91 5e 0d 	lds	r23, 0x0D5E
    
    bool partition_found = false;
    5262:	60 e0       	ldi	r22, 0x00	; 0
    while((0 != partiotions_left) && (false == partition_found)) {
    5264:	10 c0       	rjmp	.+32     	; 0x5286 <vrt_mem_free+0x4c>
        void *start = partition->partition_start;
        void *end   = partition->partition_end;
    5266:	26 81       	ldd	r18, Z+6	; 0x06
    5268:	37 81       	ldd	r19, Z+7	; 0x07
        
        if((block >= start) && (block <= end)) {
    526a:	44 81       	ldd	r20, Z+4	; 0x04
    526c:	55 81       	ldd	r21, Z+5	; 0x05
    526e:	84 17       	cp	r24, r20
    5270:	95 07       	cpc	r25, r21
    5272:	18 f0       	brcs	.+6      	; 0x527a <vrt_mem_free+0x40>
    5274:	28 17       	cp	r18, r24
    5276:	39 07       	cpc	r19, r25
    5278:	28 f4       	brcc	.+10     	; 0x5284 <vrt_mem_free+0x4a>
            partition_found = true;
        } else {
            partition = partition->next;
    527a:	02 84       	ldd	r0, Z+10	; 0x0a
    527c:	f3 85       	ldd	r31, Z+11	; 0x0b
    527e:	e0 2d       	mov	r30, r0
            partiotions_left--;
    5280:	71 50       	subi	r23, 0x01	; 1
    5282:	01 c0       	rjmp	.+2      	; 0x5286 <vrt_mem_free+0x4c>
    while((0 != partiotions_left) && (false == partition_found)) {
        void *start = partition->partition_start;
        void *end   = partition->partition_end;
        
        if((block >= start) && (block <= end)) {
            partition_found = true;
    5284:	61 e0       	ldi	r22, 0x01	; 1
    ENTER_CRITICAL_REGION();
    vrt_mem_partition_desc_t *partition = first_partition;
    uint8_t partiotions_left = nmbr_of_partitions;
    
    bool partition_found = false;
    while((0 != partiotions_left) && (false == partition_found)) {
    5286:	77 23       	and	r23, r23
    5288:	19 f0       	breq	.+6      	; 0x5290 <vrt_mem_free+0x56>
    528a:	66 23       	and	r22, r22
    528c:	61 f3       	breq	.-40     	; 0x5266 <vrt_mem_free+0x2c>
    528e:	02 c0       	rjmp	.+4      	; 0x5294 <vrt_mem_free+0x5a>
            partition = partition->next;
            partiotions_left--;
        }
    }
    
    if (true == partition_found) {
    5290:	66 23       	and	r22, r22
    5292:	79 f0       	breq	.+30     	; 0x52b2 <vrt_mem_free+0x78>
        /* Check if this partitions is full or not. */
        if ((partition->free_block_count) >= (partition->block_count)) { return; }
    5294:	33 81       	ldd	r19, Z+3	; 0x03
    5296:	22 81       	ldd	r18, Z+2	; 0x02
    5298:	32 17       	cp	r19, r18
    529a:	68 f4       	brcc	.+26     	; 0x52b6 <vrt_mem_free+0x7c>
        
        *(void **)block = partition->free_list;
    529c:	20 85       	ldd	r18, Z+8	; 0x08
    529e:	31 85       	ldd	r19, Z+9	; 0x09
    52a0:	dc 01       	movw	r26, r24
    52a2:	11 96       	adiw	r26, 0x01	; 1
    52a4:	3c 93       	st	X, r19
    52a6:	2e 93       	st	-X, r18
        partition->free_list = block;
    52a8:	91 87       	std	Z+9, r25	; 0x09
    52aa:	80 87       	std	Z+8, r24	; 0x08
        (partition->free_block_count)++;
    52ac:	83 81       	ldd	r24, Z+3	; 0x03
    52ae:	8f 5f       	subi	r24, 0xFF	; 255
    52b0:	83 83       	std	Z+3, r24	; 0x03
    }
    
    LEAVE_CRITICAL_REGION();
    52b2:	89 81       	ldd	r24, Y+1	; 0x01
    52b4:	8f bf       	out	0x3f, r24	; 63
}
    52b6:	0f 90       	pop	r0
    52b8:	cf 91       	pop	r28
    52ba:	df 91       	pop	r29
    52bc:	08 95       	ret

000052be <vrt_init>:
uint8_t vrt_kernel_events_missed;
/*================================= LOCAL VARIABLES  =========================*/
static vrt_event_queue_size_t vrt_event_fifo_tail; //!< Extraction point of events.
/*================================= PROTOTYPES       =========================*/
bool vrt_init(void) {
    vrt_event_fifo_head = 0;
    52be:	10 92 e8 11 	sts	0x11E8, r1
    vrt_event_fifo_tail = VRT_EVENT_QUEUE_SIZE - 1;
    52c2:	83 e1       	ldi	r24, 0x13	; 19
    52c4:	80 93 61 0d 	sts	0x0D61, r24
    vrt_event_fifo_items_used = 0;
    52c8:	10 92 e7 11 	sts	0x11E7, r1
    vrt_event_fifo_items_free = VRT_EVENT_QUEUE_SIZE;
    52cc:	84 e1       	ldi	r24, 0x14	; 20
    52ce:	80 93 3a 12 	sts	0x123A, r24
    
    vrt_kernel_events_missed = 0;
    52d2:	10 92 39 12 	sts	0x1239, r1
    
    return true;
}
    52d6:	81 e0       	ldi	r24, 0x01	; 1
    52d8:	08 95       	ret

000052da <vrt_flush_event_queue>:


void vrt_flush_event_queue(void) {
    52da:	df 93       	push	r29
    52dc:	cf 93       	push	r28
    52de:	0f 92       	push	r0
    52e0:	cd b7       	in	r28, 0x3d	; 61
    52e2:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    52e4:	8f b7       	in	r24, 0x3f	; 63
    52e6:	89 83       	std	Y+1, r24	; 0x01
    52e8:	f8 94       	cli
    vrt_event_fifo_head = 0;
    52ea:	10 92 e8 11 	sts	0x11E8, r1
    vrt_event_fifo_tail = VRT_EVENT_QUEUE_SIZE - 1;
    52ee:	83 e1       	ldi	r24, 0x13	; 19
    52f0:	80 93 61 0d 	sts	0x0D61, r24
    vrt_event_fifo_items_used = 0;
    52f4:	10 92 e7 11 	sts	0x11E7, r1
    vrt_event_fifo_items_free = VRT_EVENT_QUEUE_SIZE;
    52f8:	84 e1       	ldi	r24, 0x14	; 20
    52fa:	80 93 3a 12 	sts	0x123A, r24
    LEAVE_CRITICAL_REGION();
    52fe:	89 81       	ldd	r24, Y+1	; 0x01
    5300:	8f bf       	out	0x3f, r24	; 63
}
    5302:	0f 90       	pop	r0
    5304:	cf 91       	pop	r28
    5306:	df 91       	pop	r29
    5308:	08 95       	ret

0000530a <vrt_post_event>:


bool vrt_post_event(vrt_event_handler_t handler, void* attribute) {
    530a:	df 93       	push	r29
    530c:	cf 93       	push	r28
    530e:	0f 92       	push	r0
    5310:	cd b7       	in	r28, 0x3d	; 61
    5312:	de b7       	in	r29, 0x3e	; 62
    //Check that there is enough room left to do add an event.
    if (vrt_event_fifo_items_free == 0) { return false;}
    5314:	20 91 3a 12 	lds	r18, 0x123A
    5318:	22 23       	and	r18, r18
    531a:	41 f1       	breq	.+80     	; 0x536c <vrt_post_event+0x62>
    
    vrt_event_t* this_event_ptr = &vrt_event_fifo[vrt_event_fifo_head];
    531c:	e0 91 e8 11 	lds	r30, 0x11E8
    5320:	f0 e0       	ldi	r31, 0x00	; 0
    this_event_ptr->handler = handler;
    5322:	ee 0f       	add	r30, r30
    5324:	ff 1f       	adc	r31, r31
    5326:	ee 0f       	add	r30, r30
    5328:	ff 1f       	adc	r31, r31
    532a:	e7 51       	subi	r30, 0x17	; 23
    532c:	fe 4e       	sbci	r31, 0xEE	; 238
    532e:	91 83       	std	Z+1, r25	; 0x01
    5330:	80 83       	st	Z, r24
    this_event_ptr->attribute = attribute;
    5332:	73 83       	std	Z+3, r23	; 0x03
    5334:	62 83       	std	Z+2, r22	; 0x02
    
    // Do event FIFO handling. Must be protected from interrupts.
    ENTER_CRITICAL_REGION();
    5336:	8f b7       	in	r24, 0x3f	; 63
    5338:	89 83       	std	Y+1, r24	; 0x01
    533a:	f8 94       	cli
    
    if (vrt_event_fifo_head == (VRT_EVENT_QUEUE_SIZE - 1)) {
    533c:	80 91 e8 11 	lds	r24, 0x11E8
    5340:	83 31       	cpi	r24, 0x13	; 19
    5342:	19 f4       	brne	.+6      	; 0x534a <vrt_post_event+0x40>
        vrt_event_fifo_head = 0;
    5344:	10 92 e8 11 	sts	0x11E8, r1
    5348:	03 c0       	rjmp	.+6      	; 0x5350 <vrt_post_event+0x46>
    } else {
        vrt_event_fifo_head++;
    534a:	8f 5f       	subi	r24, 0xFF	; 255
    534c:	80 93 e8 11 	sts	0x11E8, r24
    } // END: if (event_fifo_head == (VRT_EVENT_QUEUE_SIZE - 1)) ...
    
    vrt_event_fifo_items_used++;
    5350:	80 91 e7 11 	lds	r24, 0x11E7
    5354:	8f 5f       	subi	r24, 0xFF	; 255
    5356:	80 93 e7 11 	sts	0x11E7, r24
    vrt_event_fifo_items_free--;
    535a:	80 91 3a 12 	lds	r24, 0x123A
    535e:	81 50       	subi	r24, 0x01	; 1
    5360:	80 93 3a 12 	sts	0x123A, r24
    
    LEAVE_CRITICAL_REGION();
    5364:	89 81       	ldd	r24, Y+1	; 0x01
    5366:	8f bf       	out	0x3f, r24	; 63
    
    return true;
    5368:	81 e0       	ldi	r24, 0x01	; 1
    536a:	01 c0       	rjmp	.+2      	; 0x536e <vrt_post_event+0x64>
}


bool vrt_post_event(vrt_event_handler_t handler, void* attribute) {
    //Check that there is enough room left to do add an event.
    if (vrt_event_fifo_items_free == 0) { return false;}
    536c:	80 e0       	ldi	r24, 0x00	; 0
    vrt_event_fifo_items_free--;
    
    LEAVE_CRITICAL_REGION();
    
    return true;
}
    536e:	0f 90       	pop	r0
    5370:	cf 91       	pop	r28
    5372:	df 91       	pop	r29
    5374:	08 95       	ret

00005376 <vrt_dispatch_event>:


void vrt_dispatch_event(void) {
    5376:	df 93       	push	r29
    5378:	cf 93       	push	r28
    537a:	0f 92       	push	r0
    537c:	cd b7       	in	r28, 0x3d	; 61
    537e:	de b7       	in	r29, 0x3e	; 62
    /* Get next event. */
    ENTER_CRITICAL_REGION();
    5380:	8f b7       	in	r24, 0x3f	; 63
    5382:	89 83       	std	Y+1, r24	; 0x01
    5384:	f8 94       	cli
	/* Check if there are events in the queue. */
    if (0 == vrt_event_fifo_items_used) { 
    5386:	80 91 e7 11 	lds	r24, 0x11E7
    538a:	88 23       	and	r24, r24
    538c:	19 f4       	brne	.+6      	; 0x5394 <vrt_dispatch_event+0x1e>
        LEAVE_CRITICAL_REGION();
    538e:	89 81       	ldd	r24, Y+1	; 0x01
    5390:	8f bf       	out	0x3f, r24	; 63
        return;
    5392:	27 c0       	rjmp	.+78     	; 0x53e2 <vrt_dispatch_event+0x6c>
    }
    
    if ((VRT_EVENT_QUEUE_SIZE - 1) == vrt_event_fifo_tail) {
    5394:	90 91 61 0d 	lds	r25, 0x0D61
    5398:	93 31       	cpi	r25, 0x13	; 19
    539a:	19 f4       	brne	.+6      	; 0x53a2 <vrt_dispatch_event+0x2c>
	    vrt_event_fifo_tail = 0;
    539c:	10 92 61 0d 	sts	0x0D61, r1
    53a0:	03 c0       	rjmp	.+6      	; 0x53a8 <vrt_dispatch_event+0x32>
    } else {
	    vrt_event_fifo_tail++;
    53a2:	9f 5f       	subi	r25, 0xFF	; 255
    53a4:	90 93 61 0d 	sts	0x0D61, r25
    }
    
    vrt_event_fifo_items_used--;
    53a8:	81 50       	subi	r24, 0x01	; 1
    53aa:	80 93 e7 11 	sts	0x11E7, r24
    vrt_event_fifo_items_free++;
    53ae:	80 91 3a 12 	lds	r24, 0x123A
    53b2:	8f 5f       	subi	r24, 0xFF	; 255
    53b4:	80 93 3a 12 	sts	0x123A, r24
    
    LEAVE_CRITICAL_REGION();
    53b8:	89 81       	ldd	r24, Y+1	; 0x01
    53ba:	8f bf       	out	0x3f, r24	; 63
    
    /* Extract next event and call the event handler if it is known to the system. */
    vrt_event_t *this_event = &vrt_event_fifo[vrt_event_fifo_tail];
    53bc:	a0 91 61 0d 	lds	r26, 0x0D61
    53c0:	b0 e0       	ldi	r27, 0x00	; 0
    
    // Dispatch event if possible.
    if (NULL == (this_event->handler)) { 
    53c2:	aa 0f       	add	r26, r26
    53c4:	bb 1f       	adc	r27, r27
    53c6:	aa 0f       	add	r26, r26
    53c8:	bb 1f       	adc	r27, r27
    53ca:	a7 51       	subi	r26, 0x17	; 23
    53cc:	be 4e       	sbci	r27, 0xEE	; 238
    53ce:	ed 91       	ld	r30, X+
    53d0:	fc 91       	ld	r31, X
    53d2:	11 97       	sbiw	r26, 0x01	; 1
    53d4:	30 97       	sbiw	r30, 0x00	; 0
    53d6:	29 f0       	breq	.+10     	; 0x53e2 <vrt_dispatch_event+0x6c>
        return;
    }
    
    (this_event->handler)(this_event->attribute);
    53d8:	12 96       	adiw	r26, 0x02	; 2
    53da:	8d 91       	ld	r24, X+
    53dc:	9c 91       	ld	r25, X
    53de:	13 97       	sbiw	r26, 0x03	; 3
    53e0:	09 95       	icall
}
    53e2:	0f 90       	pop	r0
    53e4:	cf 91       	pop	r28
    53e6:	df 91       	pop	r29
    53e8:	08 95       	ret

000053ea <zigbee_start_router_request>:
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

bool zigbee_start_router_request(void) {
    /* The device must be joined before it can be started as a router. */
    if (NWK_JOINED != ZIGBEE_NWK_GET_STATE()) { return false; }
    53ea:	80 91 8f 01 	lds	r24, 0x018F
    53ee:	85 30       	cpi	r24, 0x05	; 5
    53f0:	31 f5       	brne	.+76     	; 0x543e <zigbee_start_router_request+0x54>
    
    /* The device is joined to a coordinator or another router. */
    bool start_router_status = false;
    if (MAC_SUCCESS != ieee802_15_4_start_request(IEEE802_15_4_GET_PAN_ID(), IEEE802_15_4_GET_CHANNEL(), true)) {    
    53f2:	80 91 2c 11 	lds	r24, 0x112C
    53f6:	90 91 2d 11 	lds	r25, 0x112D
    53fa:	60 91 29 11 	lds	r22, 0x1129
    53fe:	41 e0       	ldi	r20, 0x01	; 1
    5400:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <ieee802_15_4_start_request>
    5404:	88 23       	and	r24, r24
    5406:	d9 f4       	brne	.+54     	; 0x543e <zigbee_start_router_request+0x54>
    } else if (MAC_SUCCESS != ieee802_15_4_rx_enable()) {
    5408:	0e 94 06 23 	call	0x460c	; 0x460c <ieee802_15_4_rx_enable>
    540c:	88 23       	and	r24, r24
    540e:	c9 f4       	brne	.+50     	; 0x5442 <zigbee_start_router_request+0x58>
    } else {
        
        /* Calculate the router's depth in the network and set up the Cskip algorithm. */
        uint8_t depth = zigbee_neighbor_table_find_depth(IEEE802_15_4_GET_COORD_SHORT_ADDRESS(), \
    5410:	60 91 3e 11 	lds	r22, 0x113E
    5414:	70 91 3f 11 	lds	r23, 0x113F
    5418:	80 91 2a 11 	lds	r24, 0x112A
    541c:	90 91 2b 11 	lds	r25, 0x112B
    5420:	0e 94 26 32 	call	0x644c	; 0x644c <zigbee_neighbor_table_find_depth>
                                                         IEEE802_15_4_GET_SHORT_ADDRESS());
        
        uint16_t c_skip = zigbee_nib_c_skip(depth);
    5424:	0e 94 71 32 	call	0x64e2	; 0x64e2 <zigbee_nib_c_skip>
        NWK_NIB_SET_ADDRESS_INCREMENT(c_skip);
    5428:	90 93 54 12 	sts	0x1254, r25
    542c:	80 93 53 12 	sts	0x1253, r24
         
        ZIGBEE_NWK_SET_STATE(NWK_STARTED);
    5430:	84 e0       	ldi	r24, 0x04	; 4
    5432:	80 93 8f 01 	sts	0x018F, r24
        NWK_NIB_SET_NODE_ROLE(ZIGBEE_TYPE_COORD);
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	80 93 55 12 	sts	0x1255, r24
    543c:	08 95       	ret
bool zigbee_start_router_request(void) {
    /* The device must be joined before it can be started as a router. */
    if (NWK_JOINED != ZIGBEE_NWK_GET_STATE()) { return false; }
    
    /* The device is joined to a coordinator or another router. */
    bool start_router_status = false;
    543e:	80 e0       	ldi	r24, 0x00	; 0
    5440:	08 95       	ret
    5442:	80 e0       	ldi	r24, 0x00	; 0
        NWK_NIB_SET_NODE_ROLE(ZIGBEE_TYPE_COORD);
        start_router_status = true;
    }
    
    return start_router_status; 
}
    5444:	08 95       	ret

00005446 <mac_orphan_indication_callback>:
/*                       IEEE 802.15.4 MAC Callbacks.                         */


void mac_orphan_indication_callback(mlme_orphan_ind_t *moi) {

}
    5446:	08 95       	ret

00005448 <zigbee_init>:
static zigbee_data_indication_t ndi; //!< Pointer function that will be executed upon a NLDE_DATA.indication.
static zigbee_join_indication_t nji; //!< Pointer function that will be executed upon a NLME_JOIN.indication.
static zigbee_leave_indication_t nli; //!< Pointer function that will be executed upon a NLME_LEAVE.indication.
/*================================= PROTOTYPES       =========================*/

bool zigbee_init(uint64_t ieee_address) {
    5448:	df 93       	push	r29
    544a:	cf 93       	push	r28
    544c:	cd b7       	in	r28, 0x3d	; 61
    544e:	de b7       	in	r29, 0x3e	; 62
    5450:	29 97       	sbiw	r28, 0x09	; 9
    5452:	0f b6       	in	r0, 0x3f	; 63
    5454:	f8 94       	cli
    5456:	de bf       	out	0x3e, r29	; 62
    5458:	0f be       	out	0x3f, r0	; 63
    545a:	cd bf       	out	0x3d, r28	; 61
    /* Set local variables to initial value. */
    ENTER_CRITICAL_REGION();
    545c:	ef b7       	in	r30, 0x3f	; 63
    545e:	e9 83       	std	Y+1, r30	; 0x01
    5460:	f8 94       	cli
    bool init_status = false;
    
    ndi = NULL;
    5462:	10 92 67 0d 	sts	0x0D67, r1
    5466:	10 92 66 0d 	sts	0x0D66, r1
    nji = NULL;
    546a:	10 92 65 0d 	sts	0x0D65, r1
    546e:	10 92 64 0d 	sts	0x0D64, r1
    nli = NULL;
    5472:	10 92 63 0d 	sts	0x0D63, r1
    5476:	10 92 62 0d 	sts	0x0D62, r1
    LEAVE_CRITICAL_REGION();
    547a:	e9 81       	ldd	r30, Y+1	; 0x01
    547c:	ef bf       	out	0x3f, r30	; 63
    
    /* Reset internal variables. */
    zigbee_nib_init();
    547e:	2a 83       	std	Y+2, r18	; 0x02
    5480:	3b 83       	std	Y+3, r19	; 0x03
    5482:	4c 83       	std	Y+4, r20	; 0x04
    5484:	5d 83       	std	Y+5, r21	; 0x05
    5486:	6e 83       	std	Y+6, r22	; 0x06
    5488:	7f 83       	std	Y+7, r23	; 0x07
    548a:	88 87       	std	Y+8, r24	; 0x08
    548c:	99 87       	std	Y+9, r25	; 0x09
    548e:	0e 94 2c 32 	call	0x6458	; 0x6458 <zigbee_nib_init>
    zigbee_neighbor_table_init();
    5492:	0e 94 70 30 	call	0x60e0	; 0x60e0 <zigbee_neighbor_table_init>
    
    if(true != ieee802_15_4_init(ieee_address)) {
    5496:	2a 81       	ldd	r18, Y+2	; 0x02
    5498:	3b 81       	ldd	r19, Y+3	; 0x03
    549a:	4c 81       	ldd	r20, Y+4	; 0x04
    549c:	5d 81       	ldd	r21, Y+5	; 0x05
    549e:	6e 81       	ldd	r22, Y+6	; 0x06
    54a0:	7f 81       	ldd	r23, Y+7	; 0x07
    54a2:	88 85       	ldd	r24, Y+8	; 0x08
    54a4:	99 85       	ldd	r25, Y+9	; 0x09
    54a6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <ieee802_15_4_init>
    54aa:	88 23       	and	r24, r24
    54ac:	c1 f0       	breq	.+48     	; 0x54de <zigbee_init+0x96>
    } else {
        /* Initialize all necessary callbacks from the IEEE 802.15.4 MAC. */
        ieee802_15_4_set_mcps_data_indication(mac_data_indication_callback);
    54ae:	84 e6       	ldi	r24, 0x64	; 100
    54b0:	9c e2       	ldi	r25, 0x2C	; 44
    54b2:	0e 94 09 17 	call	0x2e12	; 0x2e12 <ieee802_15_4_set_mcps_data_indication>
        ieee802_15_4_set_mlme_associate_indication(mac_associate_indication_callback);
    54b6:	81 ed       	ldi	r24, 0xD1	; 209
    54b8:	9e e2       	ldi	r25, 0x2E	; 46
    54ba:	0e 94 32 17 	call	0x2e64	; 0x2e64 <ieee802_15_4_set_mlme_associate_indication>
        ieee802_15_4_set_mlme_disassociate_indication(mac_disassociate_indication_callback);
    54be:	82 e3       	ldi	r24, 0x32	; 50
    54c0:	90 e3       	ldi	r25, 0x30	; 48
    54c2:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <ieee802_15_4_set_mlme_disassociate_indication>
        ieee802_15_4_set_mlme_orphan_indication(mac_orphan_indication_callback);
    54c6:	83 e2       	ldi	r24, 0x23	; 35
    54c8:	9a e2       	ldi	r25, 0x2A	; 42
    54ca:	0e 94 84 17 	call	0x2f08	; 0x2f08 <ieee802_15_4_set_mlme_orphan_indication>
        ieee802_15_4_set_mlme_comm_status_indication(mac_comm_status_indication_callback);
    54ce:	8f e1       	ldi	r24, 0x1F	; 31
    54d0:	9f e2       	ldi	r25, 0x2F	; 47
    54d2:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <ieee802_15_4_set_mlme_comm_status_indication>

        ZIGBEE_NWK_SET_STATE(NWK_IDLE);
    54d6:	10 92 8f 01 	sts	0x018F, r1
        init_status = true;
    54da:	81 e0       	ldi	r24, 0x01	; 1
    54dc:	01 c0       	rjmp	.+2      	; 0x54e0 <zigbee_init+0x98>
/*================================= PROTOTYPES       =========================*/

bool zigbee_init(uint64_t ieee_address) {
    /* Set local variables to initial value. */
    ENTER_CRITICAL_REGION();
    bool init_status = false;
    54de:	80 e0       	ldi	r24, 0x00	; 0
        ZIGBEE_NWK_SET_STATE(NWK_IDLE);
        init_status = true;
    } // END: if(ieee802_15_4_init(ieee_address)) ...
    
    return init_status;
}
    54e0:	29 96       	adiw	r28, 0x09	; 9
    54e2:	0f b6       	in	r0, 0x3f	; 63
    54e4:	f8 94       	cli
    54e6:	de bf       	out	0x3e, r29	; 62
    54e8:	0f be       	out	0x3f, r0	; 63
    54ea:	cd bf       	out	0x3d, r28	; 61
    54ec:	cf 91       	pop	r28
    54ee:	df 91       	pop	r29
    54f0:	08 95       	ret

000054f2 <zigbee_deinit>:

void zigbee_deinit(void) {
    54f2:	df 93       	push	r29
    54f4:	cf 93       	push	r28
    54f6:	0f 92       	push	r0
    54f8:	cd b7       	in	r28, 0x3d	; 61
    54fa:	de b7       	in	r29, 0x3e	; 62
    if (NWK_UNINITIALIZED == nwk_state) { return; }
    54fc:	80 91 8f 01 	lds	r24, 0x018F
    5500:	81 30       	cpi	r24, 0x01	; 1
    5502:	b1 f0       	breq	.+44     	; 0x5530 <zigbee_deinit+0x3e>
    
    ieee802_15_4_deinit();
    5504:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <ieee802_15_4_deinit>
    
    ENTER_CRITICAL_REGION();
    5508:	8f b7       	in	r24, 0x3f	; 63
    550a:	89 83       	std	Y+1, r24	; 0x01
    550c:	f8 94       	cli
    
    ndi = NULL;
    550e:	10 92 67 0d 	sts	0x0D67, r1
    5512:	10 92 66 0d 	sts	0x0D66, r1
    nji = NULL;
    5516:	10 92 65 0d 	sts	0x0D65, r1
    551a:	10 92 64 0d 	sts	0x0D64, r1
    nli = NULL;
    551e:	10 92 63 0d 	sts	0x0D63, r1
    5522:	10 92 62 0d 	sts	0x0D62, r1
    
    LEAVE_CRITICAL_REGION();
    5526:	89 81       	ldd	r24, Y+1	; 0x01
    5528:	8f bf       	out	0x3f, r24	; 63
    
    nwk_state = NWK_UNINITIALIZED;
    552a:	81 e0       	ldi	r24, 0x01	; 1
    552c:	80 93 8f 01 	sts	0x018F, r24
}
    5530:	0f 90       	pop	r0
    5532:	cf 91       	pop	r28
    5534:	df 91       	pop	r29
    5536:	08 95       	ret

00005538 <zigbee_get_nlde_data_indication>:


zigbee_data_indication_t zigbee_get_nlde_data_indication(void) {    
    return ndi;
}
    5538:	80 91 66 0d 	lds	r24, 0x0D66
    553c:	90 91 67 0d 	lds	r25, 0x0D67
    5540:	08 95       	ret

00005542 <zigbee_clear_nlde_data_indication>:


void zigbee_clear_nlde_data_indication(void) {
    5542:	df 93       	push	r29
    5544:	cf 93       	push	r28
    5546:	0f 92       	push	r0
    5548:	cd b7       	in	r28, 0x3d	; 61
    554a:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    554c:	8f b7       	in	r24, 0x3f	; 63
    554e:	89 83       	std	Y+1, r24	; 0x01
    5550:	f8 94       	cli
    ndi = NULL;
    5552:	10 92 67 0d 	sts	0x0D67, r1
    5556:	10 92 66 0d 	sts	0x0D66, r1
    LEAVE_CRITICAL_REGION();
    555a:	89 81       	ldd	r24, Y+1	; 0x01
    555c:	8f bf       	out	0x3f, r24	; 63
}
    555e:	0f 90       	pop	r0
    5560:	cf 91       	pop	r28
    5562:	df 91       	pop	r29
    5564:	08 95       	ret

00005566 <zigbee_set_nlde_data_indication>:


void zigbee_set_nlde_data_indication(zigbee_data_indication_t indication) {
    5566:	df 93       	push	r29
    5568:	cf 93       	push	r28
    556a:	0f 92       	push	r0
    556c:	cd b7       	in	r28, 0x3d	; 61
    556e:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    5570:	2f b7       	in	r18, 0x3f	; 63
    5572:	29 83       	std	Y+1, r18	; 0x01
    5574:	f8 94       	cli
    ndi = indication;
    5576:	90 93 67 0d 	sts	0x0D67, r25
    557a:	80 93 66 0d 	sts	0x0D66, r24
    LEAVE_CRITICAL_REGION();
    557e:	89 81       	ldd	r24, Y+1	; 0x01
    5580:	8f bf       	out	0x3f, r24	; 63
}
    5582:	0f 90       	pop	r0
    5584:	cf 91       	pop	r28
    5586:	df 91       	pop	r29
    5588:	08 95       	ret

0000558a <zigbee_get_nlme_join_indication>:


zigbee_join_indication_t zigbee_get_nlme_join_indication(void) {    
    return nji;
}
    558a:	80 91 64 0d 	lds	r24, 0x0D64
    558e:	90 91 65 0d 	lds	r25, 0x0D65
    5592:	08 95       	ret

00005594 <zigbee_clear_nlme_join_indication>:


void zigbee_clear_nlme_join_indication(void) {
    5594:	df 93       	push	r29
    5596:	cf 93       	push	r28
    5598:	0f 92       	push	r0
    559a:	cd b7       	in	r28, 0x3d	; 61
    559c:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    559e:	8f b7       	in	r24, 0x3f	; 63
    55a0:	89 83       	std	Y+1, r24	; 0x01
    55a2:	f8 94       	cli
    nji = NULL;
    55a4:	10 92 65 0d 	sts	0x0D65, r1
    55a8:	10 92 64 0d 	sts	0x0D64, r1
    LEAVE_CRITICAL_REGION();
    55ac:	89 81       	ldd	r24, Y+1	; 0x01
    55ae:	8f bf       	out	0x3f, r24	; 63
}
    55b0:	0f 90       	pop	r0
    55b2:	cf 91       	pop	r28
    55b4:	df 91       	pop	r29
    55b6:	08 95       	ret

000055b8 <zigbee_set_nlme_join_indication>:


void zigbee_set_nlme_join_indication(zigbee_join_indication_t indication) {
    55b8:	df 93       	push	r29
    55ba:	cf 93       	push	r28
    55bc:	0f 92       	push	r0
    55be:	cd b7       	in	r28, 0x3d	; 61
    55c0:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    55c2:	2f b7       	in	r18, 0x3f	; 63
    55c4:	29 83       	std	Y+1, r18	; 0x01
    55c6:	f8 94       	cli
    nji = indication;
    55c8:	90 93 65 0d 	sts	0x0D65, r25
    55cc:	80 93 64 0d 	sts	0x0D64, r24
    LEAVE_CRITICAL_REGION();
    55d0:	89 81       	ldd	r24, Y+1	; 0x01
    55d2:	8f bf       	out	0x3f, r24	; 63
}
    55d4:	0f 90       	pop	r0
    55d6:	cf 91       	pop	r28
    55d8:	df 91       	pop	r29
    55da:	08 95       	ret

000055dc <zigbee_get_nlme_leave_indication>:


zigbee_leave_indication_t zigbee_get_nlme_leave_indication(void) {    
    return nli;
}
    55dc:	80 91 62 0d 	lds	r24, 0x0D62
    55e0:	90 91 63 0d 	lds	r25, 0x0D63
    55e4:	08 95       	ret

000055e6 <zigbee_clear_nlme_leave_indication>:


void zigbee_clear_nlme_leave_indication(void) {
    55e6:	df 93       	push	r29
    55e8:	cf 93       	push	r28
    55ea:	0f 92       	push	r0
    55ec:	cd b7       	in	r28, 0x3d	; 61
    55ee:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    55f0:	8f b7       	in	r24, 0x3f	; 63
    55f2:	89 83       	std	Y+1, r24	; 0x01
    55f4:	f8 94       	cli
    nli = NULL;
    55f6:	10 92 63 0d 	sts	0x0D63, r1
    55fa:	10 92 62 0d 	sts	0x0D62, r1
    LEAVE_CRITICAL_REGION();
    55fe:	89 81       	ldd	r24, Y+1	; 0x01
    5600:	8f bf       	out	0x3f, r24	; 63
}
    5602:	0f 90       	pop	r0
    5604:	cf 91       	pop	r28
    5606:	df 91       	pop	r29
    5608:	08 95       	ret

0000560a <zigbee_set_nlme_leave_indication>:


void zigbee_set_nlme_leave_indication(zigbee_leave_indication_t indication) {
    560a:	df 93       	push	r29
    560c:	cf 93       	push	r28
    560e:	0f 92       	push	r0
    5610:	cd b7       	in	r28, 0x3d	; 61
    5612:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    5614:	2f b7       	in	r18, 0x3f	; 63
    5616:	29 83       	std	Y+1, r18	; 0x01
    5618:	f8 94       	cli
    nli = indication;
    561a:	90 93 63 0d 	sts	0x0D63, r25
    561e:	80 93 62 0d 	sts	0x0D62, r24
    LEAVE_CRITICAL_REGION();
    5622:	89 81       	ldd	r24, Y+1	; 0x01
    5624:	8f bf       	out	0x3f, r24	; 63
}
    5626:	0f 90       	pop	r0
    5628:	cf 91       	pop	r28
    562a:	df 91       	pop	r29
    562c:	08 95       	ret

0000562e <mac_data_confirm_callback>:
    ndi_callback((nlde_data_ind_t *)ndi);
    MEM_FREE(ndi);
}


static void mac_data_confirm_callback(mcps_data_conf_t *mdc) {
    562e:	dc 01       	movw	r26, r24
    /* Post NLDE_DATA.confirm event. */
    if (NULL == mdc) {
    5630:	00 97       	sbiw	r24, 0x00	; 0
    5632:	81 f0       	breq	.+32     	; 0x5654 <mac_data_confirm_callback+0x26>
        return;
    }
    
    if (NULL == nlde_callback_data_confirm) {
    5634:	e0 91 6a 0d 	lds	r30, 0x0D6A
    5638:	f0 91 6b 0d 	lds	r31, 0x0D6B
    563c:	30 97       	sbiw	r30, 0x00	; 0
    563e:	51 f0       	breq	.+20     	; 0x5654 <mac_data_confirm_callback+0x26>
        return;
    }
    
    if (NULL == confirm) {
    5640:	80 91 6c 0d 	lds	r24, 0x0D6C
    5644:	90 91 6d 0d 	lds	r25, 0x0D6D
    5648:	00 97       	sbiw	r24, 0x00	; 0
    564a:	21 f0       	breq	.+8      	; 0x5654 <mac_data_confirm_callback+0x26>
        return;
    }
    
    confirm->Status = mdc->status;
    564c:	2c 91       	ld	r18, X
    564e:	dc 01       	movw	r26, r24
    5650:	2c 93       	st	X, r18
    nlde_callback_data_confirm(confirm);
    5652:	09 95       	icall
    5654:	08 95       	ret

00005656 <find_next_address>:
    /* Go back to RX_AACK_ON. */
    ieee802_15_4_rx_enable();
}


static uint16_t find_next_address(uint16_t destination) {
    5656:	ac 01       	movw	r20, r24
    uint16_t next_hop_address = 0xFFFF;
    
    /* Check if the destination is a descendant of this node. */
    if (0x0000 == IEEE802_15_4_GET_SHORT_ADDRESS()) {
    5658:	80 91 3e 11 	lds	r24, 0x113E
    565c:	90 91 3f 11 	lds	r25, 0x113F
    5660:	00 97       	sbiw	r24, 0x00	; 0
    5662:	b1 f4       	brne	.+44     	; 0x5690 <find_next_address+0x3a>
        /* Coordinator: All devices are descendants. */
        /* Destination address is a descendant. */
        if (destination <= ((ZIGBEE_MAX_NMBR_OF_ROUTERS * NWK_NIB_GET_ADDRESS_INCREMENT()))) {
    5664:	e0 91 53 12 	lds	r30, 0x1253
    5668:	f0 91 54 12 	lds	r31, 0x1254
    566c:	e4 17       	cp	r30, r20
    566e:	f5 07       	cpc	r31, r21
    5670:	f0 f1       	brcs	.+124    	; 0x56ee <find_next_address+0x98>
            /* As found in the ZigBee specification section 3.7.3.3. */
            next_hop_address = 1 + (((destination - 1) / NWK_NIB_GET_ADDRESS_INCREMENT()) * NWK_NIB_GET_ADDRESS_INCREMENT());
    5672:	ca 01       	movw	r24, r20
    5674:	01 97       	sbiw	r24, 0x01	; 1
    5676:	bf 01       	movw	r22, r30
    5678:	0e 94 00 34 	call	0x6800	; 0x6800 <__udivmodhi4>
    567c:	6e 9f       	mul	r22, r30
    567e:	90 01       	movw	r18, r0
    5680:	6f 9f       	mul	r22, r31
    5682:	30 0d       	add	r19, r0
    5684:	7e 9f       	mul	r23, r30
    5686:	30 0d       	add	r19, r0
    5688:	11 24       	eor	r1, r1
    568a:	2f 5f       	subi	r18, 0xFF	; 255
    568c:	3f 4f       	sbci	r19, 0xFF	; 255
    568e:	30 c0       	rjmp	.+96     	; 0x56f0 <find_next_address+0x9a>
        } else {
            next_hop_address = destination;
        }
    } else if ((destination > IEEE802_15_4_GET_SHORT_ADDRESS()) && 
    5690:	84 17       	cp	r24, r20
    5692:	95 07       	cpc	r25, r21
    5694:	38 f5       	brcc	.+78     	; 0x56e4 <find_next_address+0x8e>
               (destination < (IEEE802_15_4_GET_SHORT_ADDRESS() + NWK_NIB_GET_PARENT_ADDRESS_INCREMENT()))) {
    5696:	20 91 51 12 	lds	r18, 0x1251
    569a:	30 91 52 12 	lds	r19, 0x1252
    569e:	28 0f       	add	r18, r24
    56a0:	39 1f       	adc	r19, r25
            /* As found in the ZigBee specification section 3.7.3.3. */
            next_hop_address = 1 + (((destination - 1) / NWK_NIB_GET_ADDRESS_INCREMENT()) * NWK_NIB_GET_ADDRESS_INCREMENT());
        } else {
            next_hop_address = destination;
        }
    } else if ((destination > IEEE802_15_4_GET_SHORT_ADDRESS()) && 
    56a2:	42 17       	cp	r20, r18
    56a4:	53 07       	cpc	r21, r19
    56a6:	f0 f4       	brcc	.+60     	; 0x56e4 <find_next_address+0x8e>
               (destination < (IEEE802_15_4_GET_SHORT_ADDRESS() + NWK_NIB_GET_PARENT_ADDRESS_INCREMENT()))) {
        /* Destination address is a descendant. */
        if (destination <= (IEEE802_15_4_GET_SHORT_ADDRESS() + (ZIGBEE_MAX_NMBR_OF_ROUTERS * NWK_NIB_GET_ADDRESS_INCREMENT()))) {
    56a8:	e0 91 53 12 	lds	r30, 0x1253
    56ac:	f0 91 54 12 	lds	r31, 0x1254
    56b0:	9f 01       	movw	r18, r30
    56b2:	28 0f       	add	r18, r24
    56b4:	39 1f       	adc	r19, r25
    56b6:	24 17       	cp	r18, r20
    56b8:	35 07       	cpc	r19, r21
    56ba:	c8 f0       	brcs	.+50     	; 0x56ee <find_next_address+0x98>
            /* As found in the ZigBee specification section 3.7.3.3. */
            next_hop_address = (IEEE802_15_4_GET_SHORT_ADDRESS() + 1 + 
    56bc:	9c 01       	movw	r18, r24
    56be:	2f 5f       	subi	r18, 0xFF	; 255
    56c0:	3f 4f       	sbci	r19, 0xFF	; 255
            ((uint16_t)(destination - (IEEE802_15_4_GET_SHORT_ADDRESS() + 1)) / NWK_NIB_GET_ADDRESS_INCREMENT()) * NWK_NIB_GET_ADDRESS_INCREMENT());
    56c2:	80 95       	com	r24
    56c4:	90 95       	com	r25
    56c6:	84 0f       	add	r24, r20
    56c8:	95 1f       	adc	r25, r21
    56ca:	bf 01       	movw	r22, r30
    56cc:	0e 94 00 34 	call	0x6800	; 0x6800 <__udivmodhi4>
    56d0:	6e 9f       	mul	r22, r30
    56d2:	c0 01       	movw	r24, r0
    56d4:	6f 9f       	mul	r22, r31
    56d6:	90 0d       	add	r25, r0
    56d8:	7e 9f       	mul	r23, r30
    56da:	90 0d       	add	r25, r0
    56dc:	11 24       	eor	r1, r1
    } else if ((destination > IEEE802_15_4_GET_SHORT_ADDRESS()) && 
               (destination < (IEEE802_15_4_GET_SHORT_ADDRESS() + NWK_NIB_GET_PARENT_ADDRESS_INCREMENT()))) {
        /* Destination address is a descendant. */
        if (destination <= (IEEE802_15_4_GET_SHORT_ADDRESS() + (ZIGBEE_MAX_NMBR_OF_ROUTERS * NWK_NIB_GET_ADDRESS_INCREMENT()))) {
            /* As found in the ZigBee specification section 3.7.3.3. */
            next_hop_address = (IEEE802_15_4_GET_SHORT_ADDRESS() + 1 + 
    56de:	28 0f       	add	r18, r24
    56e0:	39 1f       	adc	r19, r25
    56e2:	06 c0       	rjmp	.+12     	; 0x56f0 <find_next_address+0x9a>
        } else {
            next_hop_address = destination;
        }
    } else {
        /* Send frame to parent node. */
        next_hop_address = IEEE802_15_4_GET_COORD_SHORT_ADDRESS();
    56e4:	20 91 2a 11 	lds	r18, 0x112A
    56e8:	30 91 2b 11 	lds	r19, 0x112B
    56ec:	01 c0       	rjmp	.+2      	; 0x56f0 <find_next_address+0x9a>
            next_hop_address = destination;
        }
    } else if ((destination > IEEE802_15_4_GET_SHORT_ADDRESS()) && 
               (destination < (IEEE802_15_4_GET_SHORT_ADDRESS() + NWK_NIB_GET_PARENT_ADDRESS_INCREMENT()))) {
        /* Destination address is a descendant. */
        if (destination <= (IEEE802_15_4_GET_SHORT_ADDRESS() + (ZIGBEE_MAX_NMBR_OF_ROUTERS * NWK_NIB_GET_ADDRESS_INCREMENT()))) {
    56ee:	9a 01       	movw	r18, r20
        /* Send frame to parent node. */
        next_hop_address = IEEE802_15_4_GET_COORD_SHORT_ADDRESS();
    }
        
    return next_hop_address;
}
    56f0:	c9 01       	movw	r24, r18
    56f2:	08 95       	ret

000056f4 <relay_confirm>:
}


static void relay_confirm(mcps_data_conf_t *mdc) {
    /* Free previously allocated memory. */
    MEM_FREE(relay);
    56f4:	80 91 68 0d 	lds	r24, 0x0D68
    56f8:	90 91 69 0d 	lds	r25, 0x0D69
    56fc:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
    
    /* Go back to RX_AACK_ON. */
    ieee802_15_4_rx_enable();
    5700:	0e 94 06 23 	call	0x460c	; 0x460c <ieee802_15_4_rx_enable>
}
    5704:	08 95       	ret

00005706 <zigbee_data_indication_do_callback>:
    
    return data_request_status;
}


void zigbee_data_indication_do_callback(void *ndi) {
    5706:	cf 93       	push	r28
    5708:	df 93       	push	r29
    570a:	ec 01       	movw	r28, r24
    /* Verify that the */
    if (NULL == ndi) {
    570c:	00 97       	sbiw	r24, 0x00	; 0
    570e:	51 f0       	breq	.+20     	; 0x5724 <zigbee_data_indication_do_callback+0x1e>
        return;
    }
    
    /* Check if a callback is registered. */
    zigbee_data_indication_t ndi_callback = zigbee_get_nlde_data_indication();
    5710:	0e 94 9c 2a 	call	0x5538	; 0x5538 <zigbee_get_nlde_data_indication>
    5714:	fc 01       	movw	r30, r24
    if (NULL == ndi_callback) {
    5716:	00 97       	sbiw	r24, 0x00	; 0
    5718:	11 f0       	breq	.+4      	; 0x571e <zigbee_data_indication_do_callback+0x18>
        MEM_FREE(ndi);
        return;
    }
    
    /* Execute the callback. */
    ndi_callback((nlde_data_ind_t *)ndi);
    571a:	ce 01       	movw	r24, r28
    571c:	09 95       	icall
    MEM_FREE(ndi);
    571e:	ce 01       	movw	r24, r28
    5720:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
}
    5724:	df 91       	pop	r29
    5726:	cf 91       	pop	r28
    5728:	08 95       	ret

0000572a <zigbee_data_request>:
 *  \returns A number between 0 and 0xFFFF, where 0xFFFF indicates an error.
 */
static uint16_t find_next_address(uint16_t destination);


bool zigbee_data_request(nlde_data_req_t *ndr) {
    572a:	cf 92       	push	r12
    572c:	df 92       	push	r13
    572e:	ef 92       	push	r14
    5730:	ff 92       	push	r15
    5732:	0f 93       	push	r16
    5734:	1f 93       	push	r17
    5736:	df 93       	push	r29
    5738:	cf 93       	push	r28
    573a:	0f 92       	push	r0
    573c:	cd b7       	in	r28, 0x3d	; 61
    573e:	de b7       	in	r29, 0x3e	; 62
    5740:	6c 01       	movw	r12, r24
    /* Check that the NWK status is either: Formed, started or joined. */
    if ((NWK_FORMED  != ZIGBEE_NWK_GET_STATE()) &&
        (NWK_STARTED != ZIGBEE_NWK_GET_STATE()) && 
    5742:	80 91 8f 01 	lds	r24, 0x018F
    5746:	83 50       	subi	r24, 0x03	; 3
static uint16_t find_next_address(uint16_t destination);


bool zigbee_data_request(nlde_data_req_t *ndr) {
    /* Check that the NWK status is either: Formed, started or joined. */
    if ((NWK_FORMED  != ZIGBEE_NWK_GET_STATE()) &&
    5748:	83 30       	cpi	r24, 0x03	; 3
    574a:	08 f0       	brcs	.+2      	; 0x574e <zigbee_data_request+0x24>
    574c:	b1 c0       	rjmp	.+354    	; 0x58b0 <zigbee_data_request+0x186>
        (NWK_JOINED  != ZIGBEE_NWK_GET_STATE())) {
        return false;
    }
    
    /* Perform sanity check on function parameters. */
    if (NULL == ndr) {
    574e:	c1 14       	cp	r12, r1
    5750:	d1 04       	cpc	r13, r1
    5752:	09 f4       	brne	.+2      	; 0x5756 <zigbee_data_request+0x2c>
    5754:	ad c0       	rjmp	.+346    	; 0x58b0 <zigbee_data_request+0x186>
        return false;
    }
    
    if (NULL == (ndr->nsdu)) {
    5756:	d6 01       	movw	r26, r12
    5758:	17 96       	adiw	r26, 0x07	; 7
    575a:	8d 91       	ld	r24, X+
    575c:	9c 91       	ld	r25, X
    575e:	18 97       	sbiw	r26, 0x08	; 8
    5760:	00 97       	sbiw	r24, 0x00	; 0
    5762:	09 f4       	brne	.+2      	; 0x5766 <zigbee_data_request+0x3c>
    5764:	a5 c0       	rjmp	.+330    	; 0x58b0 <zigbee_data_request+0x186>
        return false;
    }
    
    if (NULL == (ndr->nlde_callback_data_confirm)) {
    5766:	19 96       	adiw	r26, 0x09	; 9
    5768:	8d 91       	ld	r24, X+
    576a:	9c 91       	ld	r25, X
    576c:	1a 97       	sbiw	r26, 0x0a	; 10
    576e:	00 97       	sbiw	r24, 0x00	; 0
    5770:	09 f4       	brne	.+2      	; 0x5774 <zigbee_data_request+0x4a>
    5772:	9e c0       	rjmp	.+316    	; 0x58b0 <zigbee_data_request+0x186>
        return false;
    }
    
    if (IEEE802_15_4_GET_SHORT_ADDRESS() == (ndr->dst_addr)) {
    5774:	20 91 3e 11 	lds	r18, 0x113E
    5778:	30 91 3f 11 	lds	r19, 0x113F
    577c:	11 96       	adiw	r26, 0x01	; 1
    577e:	8d 91       	ld	r24, X+
    5780:	9c 91       	ld	r25, X
    5782:	12 97       	sbiw	r26, 0x02	; 2
    5784:	28 17       	cp	r18, r24
    5786:	39 07       	cpc	r19, r25
    5788:	09 f4       	brne	.+2      	; 0x578c <zigbee_data_request+0x62>
    578a:	92 c0       	rjmp	.+292    	; 0x58b0 <zigbee_data_request+0x186>
    }
    
    /* Verify that the payload to be transmitted is within the defined bounds and 
     * not zero.
     */
    if (0 == (ndr->nsdu_length)) {
    578c:	16 96       	adiw	r26, 0x06	; 6
    578e:	8c 91       	ld	r24, X
    5790:	16 97       	sbiw	r26, 0x06	; 6
    5792:	88 23       	and	r24, r24
    5794:	09 f4       	brne	.+2      	; 0x5798 <zigbee_data_request+0x6e>
    5796:	8c c0       	rjmp	.+280    	; 0x58b0 <zigbee_data_request+0x186>
        return false;
    }
    
    if ((aMaxMACFrameSize - NWK_MIN_HEADER_OVERHEAD) < (ndr->nsdu_length)) {
    5798:	8f 35       	cpi	r24, 0x5F	; 95
    579a:	08 f0       	brcs	.+2      	; 0x579e <zigbee_data_request+0x74>
    579c:	89 c0       	rjmp	.+274    	; 0x58b0 <zigbee_data_request+0x186>
        return false;
    }
    
    /* Try to allocate some memory to build the frame on. */
    uint8_t *nwk_frame = (uint8_t *)MEM_ALLOC_ARRAY(uint8_t, ((ndr->nsdu_length) + NWK_MIN_HEADER_OVERHEAD));
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	08 96       	adiw	r24, 0x08	; 8
    57a2:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    57a6:	8c 01       	movw	r16, r24
    
    if (NULL == nwk_frame) {
    57a8:	00 97       	sbiw	r24, 0x00	; 0
    57aa:	09 f4       	brne	.+2      	; 0x57ae <zigbee_data_request+0x84>
    57ac:	81 c0       	rjmp	.+258    	; 0x58b0 <zigbee_data_request+0x186>
    /* 1. Build the NWK layer FCF and add to the frame. */
    uint16_t fcf = NWK_FCF_SET_FRAME_TYPE(NWK_FCF_FRAMETYPE_DATA) | NWK_FCF_SET_PROTOCOL_VERSION(1);
    
    uint8_t index = 0;
    
    nwk_frame[index++] = ((fcf >> 8*0) & 0xFF);
    57ae:	84 e0       	ldi	r24, 0x04	; 4
    57b0:	f8 01       	movw	r30, r16
    57b2:	80 83       	st	Z, r24
    nwk_frame[index++] = ((fcf >> 8*1) & 0xFF);
    57b4:	11 82       	std	Z+1, r1	; 0x01
    
    /* 2. Add destination address. */
    memcpy((void *)(&nwk_frame[index]), (void *)(&(ndr->dst_addr)), sizeof(uint16_t));
    57b6:	d6 01       	movw	r26, r12
    57b8:	11 96       	adiw	r26, 0x01	; 1
    57ba:	8d 91       	ld	r24, X+
    57bc:	9c 91       	ld	r25, X
    57be:	12 97       	sbiw	r26, 0x02	; 2
    57c0:	93 83       	std	Z+3, r25	; 0x03
    57c2:	82 83       	std	Z+2, r24	; 0x02
    index += sizeof(uint16_t);
    
    /* 3. Add source address. */
    memcpy((void *)(&nwk_frame[index]), (void *)(&IEEE802_15_4_GET_SHORT_ADDRESS()), sizeof(uint16_t));
    57c4:	80 91 3e 11 	lds	r24, 0x113E
    57c8:	90 91 3f 11 	lds	r25, 0x113F
    57cc:	95 83       	std	Z+5, r25	; 0x05
    57ce:	84 83       	std	Z+4, r24	; 0x04
    
    /* 4. Next is the radius field. If the radius fiels of the request message
     *    unequal from zero it will be used. Otherwise, the specification says that
     *    it should be set to twice the value of the nwkMaxDepth attribute.
     */
    if (0 == (ndr->radius)) {
    57d0:	13 96       	adiw	r26, 0x03	; 3
    57d2:	8c 91       	ld	r24, X
    57d4:	13 97       	sbiw	r26, 0x03	; 3
    57d6:	88 23       	and	r24, r24
    57d8:	11 f4       	brne	.+4      	; 0x57de <zigbee_data_request+0xb4>
        nwk_frame[index++] = (2 * ZIGBEE_MAX_NWK_DEPTH);
    57da:	82 e0       	ldi	r24, 0x02	; 2
    57dc:	01 c0       	rjmp	.+2      	; 0x57e0 <zigbee_data_request+0xb6>
    } else {
        nwk_frame[index++] = ndr->radius;
    57de:	f8 01       	movw	r30, r16
    57e0:	86 83       	std	Z+6, r24	; 0x06
    }
    
    /* 5. Add NWK layer sequence number. */
    nwk_frame[index++] = NWK_NIB_GET_SEQUENCE_NMBR();
    57e2:	80 91 6c 12 	lds	r24, 0x126C
    57e6:	d8 01       	movw	r26, r16
    57e8:	17 96       	adiw	r26, 0x07	; 7
    57ea:	8c 93       	st	X, r24
    57ec:	8f 5f       	subi	r24, 0xFF	; 255
    57ee:	80 93 6c 12 	sts	0x126C, r24
    
    /* 6. Copy the user defined data. */
    memcpy((void *)(&nwk_frame[index]), (void *)(ndr->nsdu), ndr->nsdu_length);
    57f2:	98 01       	movw	r18, r16
    57f4:	28 5f       	subi	r18, 0xF8	; 248
    57f6:	3f 4f       	sbci	r19, 0xFF	; 255
    57f8:	f6 01       	movw	r30, r12
    57fa:	46 81       	ldd	r20, Z+6	; 0x06
    57fc:	67 81       	ldd	r22, Z+7	; 0x07
    57fe:	70 85       	ldd	r23, Z+8	; 0x08
    5800:	c9 01       	movw	r24, r18
    5802:	50 e0       	ldi	r21, 0x00	; 0
    5804:	0e 94 c2 33 	call	0x6784	; 0x6784 <memcpy>
    index += (ndr->nsdu_length);
    5808:	d6 01       	movw	r26, r12
    580a:	16 96       	adiw	r26, 0x06	; 6
    580c:	fc 90       	ld	r15, X
    580e:	16 97       	sbiw	r26, 0x06	; 6
    
    /* TODO: Use tree routing algorithm to find the first hop destination address. */
    uint16_t next_hop_address = find_next_address(ndr->dst_addr);
    5810:	11 96       	adiw	r26, 0x01	; 1
    5812:	8d 91       	ld	r24, X+
    5814:	9c 91       	ld	r25, X
    5816:	12 97       	sbiw	r26, 0x02	; 2
    5818:	0e 94 2b 2b 	call	0x5656	; 0x5656 <find_next_address>
    581c:	9c 01       	movw	r18, r24

    /* Could not find a valid address for the next hop. */
    if (0xFFFF == next_hop_address) {
    581e:	bf ef       	ldi	r27, 0xFF	; 255
    5820:	8f 3f       	cpi	r24, 0xFF	; 255
    5822:	9b 07       	cpc	r25, r27
    5824:	21 f4       	brne	.+8      	; 0x582e <zigbee_data_request+0x104>
        /* Free allocated memory. */
        MEM_FREE(nwk_frame);
    5826:	c8 01       	movw	r24, r16
    5828:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
    582c:	41 c0       	rjmp	.+130    	; 0x58b0 <zigbee_data_request+0x186>
        return false;
    }
    
    /* 7. Build MCPS_DATA.request. */
    ndr->mcps.SrcAddrMode       = WPAN_ADDRMODE_SHORT;
    582e:	82 e0       	ldi	r24, 0x02	; 2
    5830:	e8 2e       	mov	r14, r24
    5832:	f6 01       	movw	r30, r12
    5834:	e4 86       	std	Z+12, r14	; 0x0c
    ndr->mcps.SrcAddr           = IEEE802_15_4_GET_SHORT_ADDRESS();
    5836:	40 91 3e 11 	lds	r20, 0x113E
    583a:	50 91 3f 11 	lds	r21, 0x113F
    583e:	45 87       	std	Z+13, r20	; 0x0d
    5840:	56 87       	std	Z+14, r21	; 0x0e
    5842:	17 86       	std	Z+15, r1	; 0x0f
    5844:	10 8a       	std	Z+16, r1	; 0x10
    5846:	11 8a       	std	Z+17, r1	; 0x11
    5848:	12 8a       	std	Z+18, r1	; 0x12
    584a:	13 8a       	std	Z+19, r1	; 0x13
    584c:	14 8a       	std	Z+20, r1	; 0x14
    ndr->mcps.DstAddrMode       = WPAN_ADDRMODE_SHORT;
    584e:	e5 8a       	std	Z+21, r14	; 0x15
    ndr->mcps.DstPANId          = IEEE802_15_4_GET_PAN_ID();
    5850:	80 91 2c 11 	lds	r24, 0x112C
    5854:	90 91 2d 11 	lds	r25, 0x112D
    5858:	97 8b       	std	Z+23, r25	; 0x17
    585a:	86 8b       	std	Z+22, r24	; 0x16
    ndr->mcps.DstAddr           = next_hop_address;
    585c:	20 8f       	std	Z+24, r18	; 0x18
    585e:	31 8f       	std	Z+25, r19	; 0x19
    5860:	12 8e       	std	Z+26, r1	; 0x1a
    5862:	13 8e       	std	Z+27, r1	; 0x1b
    5864:	14 8e       	std	Z+28, r1	; 0x1c
    5866:	15 8e       	std	Z+29, r1	; 0x1d
    5868:	16 8e       	std	Z+30, r1	; 0x1e
    586a:	17 8e       	std	Z+31, r1	; 0x1f
    ndr->mcps.TxOptions         = WPAN_TXOPT_ACK;
    586c:	81 e0       	ldi	r24, 0x01	; 1
    586e:	80 a3       	std	Z+32, r24	; 0x20
    /* 5. Add NWK layer sequence number. */
    nwk_frame[index++] = NWK_NIB_GET_SEQUENCE_NMBR();
    
    /* 6. Copy the user defined data. */
    memcpy((void *)(&nwk_frame[index]), (void *)(ndr->nsdu), ndr->nsdu_length);
    index += (ndr->nsdu_length);
    5870:	8f 2d       	mov	r24, r15
    5872:	88 5f       	subi	r24, 0xF8	; 248
    ndr->mcps.SrcAddr           = IEEE802_15_4_GET_SHORT_ADDRESS();
    ndr->mcps.DstAddrMode       = WPAN_ADDRMODE_SHORT;
    ndr->mcps.DstPANId          = IEEE802_15_4_GET_PAN_ID();
    ndr->mcps.DstAddr           = next_hop_address;
    ndr->mcps.TxOptions         = WPAN_TXOPT_ACK;
    ndr->mcps.msduLength        = index;
    5874:	81 a3       	std	Z+33, r24	; 0x21
    ndr->mcps.data              = nwk_frame;
    5876:	13 a3       	std	Z+35, r17	; 0x23
    5878:	02 a3       	std	Z+34, r16	; 0x22
    ndr->mcps.mcps_data_confirm = mac_data_confirm_callback;
    587a:	87 e1       	ldi	r24, 0x17	; 23
    587c:	9b e2       	ldi	r25, 0x2B	; 43
    587e:	95 a3       	std	Z+37, r25	; 0x25
    5880:	84 a3       	std	Z+36, r24	; 0x24
        
    /* Set NWK layer callbacks. */
    nlde_callback_data_confirm = ndr->nlde_callback_data_confirm;
    5882:	81 85       	ldd	r24, Z+9	; 0x09
    5884:	92 85       	ldd	r25, Z+10	; 0x0a
    5886:	90 93 6b 0d 	sts	0x0D6B, r25
    588a:	80 93 6a 0d 	sts	0x0D6A, r24
    confirm = &(ndr->confirm);
    588e:	c6 01       	movw	r24, r12
    5890:	0b 96       	adiw	r24, 0x0b	; 11
    5892:	90 93 6d 0d 	sts	0x0D6D, r25
    5896:	80 93 6c 0d 	sts	0x0D6C, r24

    /* 8. Issue primitive. */
    bool data_request_status = false;
    if (true != ieee802_15_4_data_request(&(ndr->mcps))) {
    589a:	c6 01       	movw	r24, r12
    589c:	0c 96       	adiw	r24, 0x0c	; 12
    589e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <ieee802_15_4_data_request>
    58a2:	28 2f       	mov	r18, r24
    } else {
        data_request_status = true;
    }
    
    /* Free allocated memory. */
    MEM_FREE(nwk_frame);
    58a4:	c8 01       	movw	r24, r16
    58a6:	29 83       	std	Y+1, r18	; 0x01
    58a8:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
    
    return data_request_status;
    58ac:	29 81       	ldd	r18, Y+1	; 0x01
    58ae:	01 c0       	rjmp	.+2      	; 0x58b2 <zigbee_data_request+0x188>
    
    /* Try to allocate some memory to build the frame on. */
    uint8_t *nwk_frame = (uint8_t *)MEM_ALLOC_ARRAY(uint8_t, ((ndr->nsdu_length) + NWK_MIN_HEADER_OVERHEAD));
    
    if (NULL == nwk_frame) {
        return false;
    58b0:	20 e0       	ldi	r18, 0x00	; 0
    
    /* Free allocated memory. */
    MEM_FREE(nwk_frame);
    
    return data_request_status;
}
    58b2:	82 2f       	mov	r24, r18
    58b4:	0f 90       	pop	r0
    58b6:	cf 91       	pop	r28
    58b8:	df 91       	pop	r29
    58ba:	1f 91       	pop	r17
    58bc:	0f 91       	pop	r16
    58be:	ff 90       	pop	r15
    58c0:	ef 90       	pop	r14
    58c2:	df 90       	pop	r13
    58c4:	cf 90       	pop	r12
    58c6:	08 95       	ret

000058c8 <mac_data_indication_callback>:


/*                         IEEE 802.15.4 MAC Callback.                        */


void mac_data_indication_callback(mcps_data_ind_t *mcdi) {
    58c8:	cf 92       	push	r12
    58ca:	df 92       	push	r13
    58cc:	ef 92       	push	r14
    58ce:	ff 92       	push	r15
    58d0:	0f 93       	push	r16
    58d2:	1f 93       	push	r17
    58d4:	cf 93       	push	r28
    58d6:	df 93       	push	r29
    58d8:	7c 01       	movw	r14, r24
    /* Must at least be enough data available to extract the NWK layer header. */
    if (NWK_MIN_HEADER_OVERHEAD > (mcdi->msduLength)) { return; }
    58da:	fc 01       	movw	r30, r24
    58dc:	85 89       	ldd	r24, Z+21	; 0x15
    58de:	88 30       	cpi	r24, 0x08	; 8
    58e0:	08 f4       	brcc	.+2      	; 0x58e4 <mac_data_indication_callback+0x1c>
    58e2:	93 c0       	rjmp	.+294    	; 0x5a0a <mac_data_indication_callback+0x142>
    
    uint16_t fcf = (nwk_header[0] << 8 * 0); // Read FCF LSB.
    fcf         |= (nwk_header[1] << 8 * 1); // Read FCF MSB.
    
    uint16_t nwk_dest_addr = (nwk_header[2] << 8 * 0); // Read Destination Address LSB.
    nwk_dest_addr         |= (nwk_header[3] << 8 * 1); // Read Destination Address MSB.;
    58e4:	31 8d       	ldd	r19, Z+25	; 0x19
    58e6:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t *nwk_header = mcdi->msdu;
    
    uint16_t fcf = (nwk_header[0] << 8 * 0); // Read FCF LSB.
    fcf         |= (nwk_header[1] << 8 * 1); // Read FCF MSB.
    
    uint16_t nwk_dest_addr = (nwk_header[2] << 8 * 0); // Read Destination Address LSB.
    58e8:	00 8d       	ldd	r16, Z+24	; 0x18
    58ea:	10 e0       	ldi	r17, 0x00	; 0
    nwk_dest_addr         |= (nwk_header[3] << 8 * 1); // Read Destination Address MSB.;
    58ec:	02 2b       	or	r16, r18
    58ee:	13 2b       	or	r17, r19
    
    if (nwk_dest_addr != IEEE802_15_4_GET_SHORT_ADDRESS()) {
    58f0:	20 91 3e 11 	lds	r18, 0x113E
    58f4:	30 91 3f 11 	lds	r19, 0x113F
    58f8:	02 17       	cp	r16, r18
    58fa:	13 07       	cpc	r17, r19
    58fc:	09 f4       	brne	.+2      	; 0x5900 <mac_data_indication_callback+0x38>
    58fe:	4d c0       	rjmp	.+154    	; 0x599a <mac_data_indication_callback+0xd2>
        /* Route to another device. */
        /* Route along the three. */
        /* Update destination MAC destination address and send. */
        
        relay = (mcps_data_req_t *)MEM_ALLOC(mcps_data_req_t);
    5900:	8b e1       	ldi	r24, 0x1B	; 27
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    5908:	c8 2e       	mov	r12, r24
    590a:	e6 01       	movw	r28, r12
    590c:	6e 01       	movw	r12, r28
    590e:	d9 2e       	mov	r13, r25
    5910:	e6 01       	movw	r28, r12
    5912:	d0 92 69 0d 	sts	0x0D69, r13
    5916:	c0 92 68 0d 	sts	0x0D68, r12
        /* Verify that memory was allocated. */
        if (NULL == relay) {
    591a:	20 97       	sbiw	r28, 0x00	; 0
    591c:	09 f4       	brne	.+2      	; 0x5920 <mac_data_indication_callback+0x58>
    591e:	73 c0       	rjmp	.+230    	; 0x5a06 <mac_data_indication_callback+0x13e>
        }
        
        /* TODO: Use tree routing algorithm to find the first hop destination address. */
        /* Send top parent or to one of the childs if this is a coordinator or router. */
        /* For now always send to parent. */
        uint16_t next_hop_address = find_next_address(nwk_dest_addr);
    5920:	c8 01       	movw	r24, r16
    5922:	0e 94 2b 2b 	call	0x5656	; 0x5656 <find_next_address>
    5926:	9c 01       	movw	r18, r24
    
        /* Could not find a valid address for the next hop. */
        if (0xFFFF == next_hop_address) {
    5928:	8f ef       	ldi	r24, 0xFF	; 255
    592a:	2f 3f       	cpi	r18, 0xFF	; 255
    592c:	38 07       	cpc	r19, r24
    592e:	09 f4       	brne	.+2      	; 0x5932 <mac_data_indication_callback+0x6a>
    5930:	67 c0       	rjmp	.+206    	; 0x5a00 <mac_data_indication_callback+0x138>
            ieee802_15_4_rx_enable();
            return;
        }
    
        /* 7. Build MCPS_DATA.request. */
        relay->SrcAddrMode       = WPAN_ADDRMODE_SHORT;
    5932:	e2 e0       	ldi	r30, 0x02	; 2
    5934:	e8 83       	st	Y, r30
        relay->SrcAddr           = IEEE802_15_4_GET_SHORT_ADDRESS();
    5936:	40 91 3e 11 	lds	r20, 0x113E
    593a:	50 91 3f 11 	lds	r21, 0x113F
    593e:	49 83       	std	Y+1, r20	; 0x01
    5940:	5a 83       	std	Y+2, r21	; 0x02
    5942:	1b 82       	std	Y+3, r1	; 0x03
    5944:	1c 82       	std	Y+4, r1	; 0x04
    5946:	1d 82       	std	Y+5, r1	; 0x05
    5948:	1e 82       	std	Y+6, r1	; 0x06
    594a:	1f 82       	std	Y+7, r1	; 0x07
    594c:	18 86       	std	Y+8, r1	; 0x08
        relay->DstAddrMode       = WPAN_ADDRMODE_SHORT;
    594e:	e9 87       	std	Y+9, r30	; 0x09
        relay->DstPANId          = IEEE802_15_4_GET_PAN_ID();
    5950:	80 91 2c 11 	lds	r24, 0x112C
    5954:	90 91 2d 11 	lds	r25, 0x112D
    5958:	9b 87       	std	Y+11, r25	; 0x0b
    595a:	8a 87       	std	Y+10, r24	; 0x0a
        relay->DstAddr           = next_hop_address;
    595c:	2c 87       	std	Y+12, r18	; 0x0c
    595e:	3d 87       	std	Y+13, r19	; 0x0d
    5960:	1e 86       	std	Y+14, r1	; 0x0e
    5962:	1f 86       	std	Y+15, r1	; 0x0f
    5964:	18 8a       	std	Y+16, r1	; 0x10
    5966:	19 8a       	std	Y+17, r1	; 0x11
    5968:	1a 8a       	std	Y+18, r1	; 0x12
    596a:	1b 8a       	std	Y+19, r1	; 0x13
        relay->TxOptions         = WPAN_TXOPT_ACK;
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	8c 8b       	std	Y+20, r24	; 0x14
        relay->msduLength        = mcdi->msduLength;
    5970:	f7 01       	movw	r30, r14
    5972:	85 89       	ldd	r24, Z+21	; 0x15
    5974:	8d 8b       	std	Y+21, r24	; 0x15

void mac_data_indication_callback(mcps_data_ind_t *mcdi) {
    /* Must at least be enough data available to extract the NWK layer header. */
    if (NWK_MIN_HEADER_OVERHEAD > (mcdi->msduLength)) { return; }
    
    uint8_t *nwk_header = mcdi->msdu;
    5976:	c7 01       	movw	r24, r14
    5978:	46 96       	adiw	r24, 0x16	; 22
        relay->DstAddrMode       = WPAN_ADDRMODE_SHORT;
        relay->DstPANId          = IEEE802_15_4_GET_PAN_ID();
        relay->DstAddr           = next_hop_address;
        relay->TxOptions         = WPAN_TXOPT_ACK;
        relay->msduLength        = mcdi->msduLength;
        relay->data              = nwk_header;
    597a:	9f 8b       	std	Y+23, r25	; 0x17
    597c:	8e 8b       	std	Y+22, r24	; 0x16
        relay->mcps_data_confirm = relay_confirm;
    597e:	8a e7       	ldi	r24, 0x7A	; 122
    5980:	9b e2       	ldi	r25, 0x2B	; 43
    5982:	99 8f       	std	Y+25, r25	; 0x19
    5984:	88 8f       	std	Y+24, r24	; 0x18

        /* 8. Issue primitive. */
        if (true != ieee802_15_4_data_request(relay)) {
    5986:	c6 01       	movw	r24, r12
    5988:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <ieee802_15_4_data_request>
    598c:	88 23       	and	r24, r24
    598e:	d9 f5       	brne	.+118    	; 0x5a06 <mac_data_indication_callback+0x13e>
            MEM_FREE(relay);
    5990:	80 91 68 0d 	lds	r24, 0x0D68
    5994:	90 91 69 0d 	lds	r25, 0x0D69
    5998:	34 c0       	rjmp	.+104    	; 0x5a02 <mac_data_indication_callback+0x13a>
    } else {
        /* Message is for this device. */
        
        /* Allocate memory to build and NLDE_DATA.indication message. */
        /* Try to allocate some memory to build the NLDE_DATA.indication message. */
        nlde_data_ind_t *ndi = (nlde_data_ind_t *)MEM_ALLOC_ARRAY(uint8_t, sizeof(nlde_data_ind_t) + (mcdi->msduLength) - NWK_MIN_HEADER_OVERHEAD);
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	01 97       	sbiw	r24, 0x01	; 1
    599e:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    59a2:	c8 2e       	mov	r12, r24
    59a4:	e6 01       	movw	r28, r12
    59a6:	6e 01       	movw	r12, r28
    59a8:	d9 2e       	mov	r13, r25
    59aa:	e6 01       	movw	r28, r12
        if (NULL == ndi) { return; }
    59ac:	20 97       	sbiw	r28, 0x00	; 0
    59ae:	69 f1       	breq	.+90     	; 0x5a0a <mac_data_indication_callback+0x142>
        
        /* Build indication. */
        ndi->DstAddrMode = 0x01;
    59b0:	81 e0       	ldi	r24, 0x01	; 1
    59b2:	88 83       	st	Y, r24
        
        memcpy((void *)(&(ndi->DstAddr)), (void *)(&nwk_dest_addr), sizeof(uint16_t));
    59b4:	1a 83       	std	Y+2, r17	; 0x02
    59b6:	09 83       	std	Y+1, r16	; 0x01
        
        uint16_t nwk_src_addr = (nwk_header[4] << 8 * 0); // Read Source Address LSB.
        nwk_src_addr         |= (nwk_header[5] << 8 * 1); // Read Source Address MSB.;
    59b8:	f7 01       	movw	r30, r14
    59ba:	33 8d       	ldd	r19, Z+27	; 0x1b
    59bc:	20 e0       	ldi	r18, 0x00	; 0
        /* Build indication. */
        ndi->DstAddrMode = 0x01;
        
        memcpy((void *)(&(ndi->DstAddr)), (void *)(&nwk_dest_addr), sizeof(uint16_t));
        
        uint16_t nwk_src_addr = (nwk_header[4] << 8 * 0); // Read Source Address LSB.
    59be:	82 8d       	ldd	r24, Z+26	; 0x1a
    59c0:	90 e0       	ldi	r25, 0x00	; 0
        nwk_src_addr         |= (nwk_header[5] << 8 * 1); // Read Source Address MSB.;
    59c2:	82 2b       	or	r24, r18
    59c4:	93 2b       	or	r25, r19
        
        memcpy((void *)(&(ndi->SrcAddr)), (void *)(&nwk_src_addr), sizeof(uint16_t));
    59c6:	9c 83       	std	Y+4, r25	; 0x04
    59c8:	8b 83       	std	Y+3, r24	; 0x03
        
        ndi->LinkQuality = mcdi->mpduLinkQuality;
    59ca:	84 89       	ldd	r24, Z+20	; 0x14
    59cc:	8d 83       	std	Y+5, r24	; 0x05
        ndi->NsduLength = (mcdi->msduLength) - NWK_MIN_HEADER_OVERHEAD;
    59ce:	85 89       	ldd	r24, Z+21	; 0x15
    59d0:	88 50       	subi	r24, 0x08	; 8
    59d2:	8e 83       	std	Y+6, r24	; 0x06
        memcpy((void *)(ndi->Nsdu), (void *)(&nwk_header[8]), ((mcdi->msduLength) - NWK_MIN_HEADER_OVERHEAD));
    59d4:	b6 01       	movw	r22, r12
    59d6:	69 5f       	subi	r22, 0xF9	; 249
    59d8:	7f 4f       	sbci	r23, 0xFF	; 255
    59da:	25 89       	ldd	r18, Z+21	; 0x15
    59dc:	30 e0       	ldi	r19, 0x00	; 0
    59de:	28 50       	subi	r18, 0x08	; 8
    59e0:	30 40       	sbci	r19, 0x00	; 0
    59e2:	a7 01       	movw	r20, r14
    59e4:	42 5e       	subi	r20, 0xE2	; 226
    59e6:	5f 4f       	sbci	r21, 0xFF	; 255
    59e8:	cb 01       	movw	r24, r22
    59ea:	ba 01       	movw	r22, r20
    59ec:	a9 01       	movw	r20, r18
    59ee:	0e 94 c2 33 	call	0x6784	; 0x6784 <memcpy>
        
        /* Post this event. */
        if (true != vrt_post_event(zigbee_data_indication_do_callback, (uint8_t *)ndi)) {
    59f2:	83 e8       	ldi	r24, 0x83	; 131
    59f4:	9b e2       	ldi	r25, 0x2B	; 43
    59f6:	b6 01       	movw	r22, r12
    59f8:	0e 94 85 29 	call	0x530a	; 0x530a <vrt_post_event>
    59fc:	88 23       	and	r24, r24
    59fe:	19 f4       	brne	.+6      	; 0x5a06 <mac_data_indication_callback+0x13e>
            MEM_FREE(ndi);
    5a00:	ce 01       	movw	r24, r28
    5a02:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
        }
    }
    
    /* Go back to RX_AACK_ON. */
    ieee802_15_4_rx_enable();
    5a06:	0e 94 06 23 	call	0x460c	; 0x460c <ieee802_15_4_rx_enable>
}
    5a0a:	df 91       	pop	r29
    5a0c:	cf 91       	pop	r28
    5a0e:	1f 91       	pop	r17
    5a10:	0f 91       	pop	r16
    5a12:	ff 90       	pop	r15
    5a14:	ef 90       	pop	r14
    5a16:	df 90       	pop	r13
    5a18:	cf 90       	pop	r12
    5a1a:	08 95       	ret

00005a1c <zigbee_network_discovery_confirm_do_callback>:


void zigbee_network_discovery_confirm_do_callback(void *ndc) {
    /* Cast the ndc to a NLME-NETWORK-DISCOVERY.confirm message. */
    
    ZIGBEE_NWK_SET_STATE(NWK_IDLE);
    5a1c:	10 92 8f 01 	sts	0x018F, r1
    
    /* Execute the event handler. */
    nwk_param.discovery.nlme_callback_discovery_confirm((nlme_network_discovery_conf_t *)ndc);
    5a20:	e0 91 3b 12 	lds	r30, 0x123B
    5a24:	f0 91 3c 12 	lds	r31, 0x123C
    5a28:	09 95       	icall
}
    5a2a:	08 95       	ret

00005a2c <mac_beacon_notify_callback>:
    /* Post the confirm event. */
    (bool)vrt_post_event(zigbee_network_discovery_confirm_do_callback, (uint8_t *)(ndc));
}


static void mac_beacon_notify_callback(mlme_beacon_notify_ind_t *mnbi) {
    5a2c:	cf 93       	push	r28
    5a2e:	df 93       	push	r29
    5a30:	ec 01       	movw	r28, r24
    /* Check that short address is used, and if the node with this beacon is 
     * already known.
     */
    if (WPAN_ADDRMODE_SHORT != (mnbi->PANDescriptor.CoordAddrMode)) {
    5a32:	89 81       	ldd	r24, Y+1	; 0x01
    5a34:	82 30       	cpi	r24, 0x02	; 2
    5a36:	09 f0       	breq	.+2      	; 0x5a3a <mac_beacon_notify_callback+0xe>
    5a38:	4a c0       	rjmp	.+148    	; 0x5ace <mac_beacon_notify_callback+0xa2>
        return;
    }
    
    if (NULL != zigbee_neighbor_table_find(mnbi->PANDescriptor.CoordAddress)) {
    5a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    5a3e:	0e 94 54 31 	call	0x62a8	; 0x62a8 <zigbee_neighbor_table_find>
    5a42:	00 97       	sbiw	r24, 0x00	; 0
    5a44:	09 f0       	breq	.+2      	; 0x5a48 <mac_beacon_notify_callback+0x1c>
    5a46:	43 c0       	rjmp	.+134    	; 0x5ace <mac_beacon_notify_callback+0xa2>
        return;
    }
    
    /* Add PANDescriptor into the neighbor table. */
    zigbee_neighbor_table_item_t *nbi = zigbee_neighbor_table_get();
    5a48:	0e 94 96 30 	call	0x612c	; 0x612c <zigbee_neighbor_table_get>
    5a4c:	fc 01       	movw	r30, r24
        
    /* Verify that an item was available. */
    if (NULL == nbi) {
    5a4e:	00 97       	sbiw	r24, 0x00	; 0
    5a50:	29 f4       	brne	.+10     	; 0x5a5c <mac_beacon_notify_callback+0x30>
        zigbee_neighbor_table_put(nbi);
    5a52:	80 e0       	ldi	r24, 0x00	; 0
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	0e 94 bb 30 	call	0x6176	; 0x6176 <zigbee_neighbor_table_put>
        return;
    5a5a:	39 c0       	rjmp	.+114    	; 0x5ace <mac_beacon_notify_callback+0xa2>
    }
    
    /* Transfer all items to the Network table. */
    ieee802_15_4_pan_descriptor_t *pd = &(mnbi->PANDescriptor);
    
    nbi->ndesc.PanID = pd->CoordPANId;
    5a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a60:	95 83       	std	Z+5, r25	; 0x05
    5a62:	84 83       	std	Z+4, r24	; 0x04
    nbi->ndesc.ExtendedPanID = 0;
    5a64:	16 82       	std	Z+6, r1	; 0x06
    5a66:	17 82       	std	Z+7, r1	; 0x07
    5a68:	10 86       	std	Z+8, r1	; 0x08
    5a6a:	11 86       	std	Z+9, r1	; 0x09
    5a6c:	12 86       	std	Z+10, r1	; 0x0a
    5a6e:	13 86       	std	Z+11, r1	; 0x0b
    5a70:	14 86       	std	Z+12, r1	; 0x0c
    5a72:	15 86       	std	Z+13, r1	; 0x0d
    nbi->ndesc.LogicalChannel = pd->LogicalChannel;;
    5a74:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a76:	86 87       	std	Z+14, r24	; 0x0e
    nbi->ndesc.StackProfile = 0;
    5a78:	17 86       	std	Z+15, r1	; 0x0f
    nbi->ndesc.ZigBeeVersion = 0;
    5a7a:	10 8a       	std	Z+16, r1	; 0x10
    
    uint16_t superframe_spec = pd->SuperframeSpec;
    5a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    
    nbi->ndesc.BeaconOrder = ((uint8_t)superframe_spec) & 0x0F;
    5a80:	28 2f       	mov	r18, r24
    5a82:	2f 70       	andi	r18, 0x0F	; 15
    5a84:	21 8b       	std	Z+17, r18	; 0x11
    nbi->ndesc.SuperframeOrder = (((uint8_t)superframe_spec) >> 4) & 0x0F;;
    5a86:	28 2f       	mov	r18, r24
    5a88:	22 95       	swap	r18
    5a8a:	2f 70       	andi	r18, 0x0F	; 15
    5a8c:	22 8b       	std	Z+18, r18	; 0x12
    
    if (((superframe_spec & (1U << 15)) != (1U << 15))) {
    5a8e:	97 fd       	sbrc	r25, 7
    5a90:	02 c0       	rjmp	.+4      	; 0x5a96 <mac_beacon_notify_callback+0x6a>
        nbi->ndesc.PermitJoining = false;
    5a92:	13 8a       	std	Z+19, r1	; 0x13
    5a94:	02 c0       	rjmp	.+4      	; 0x5a9a <mac_beacon_notify_callback+0x6e>
    } else {
        nbi->ndesc.PermitJoining = true;
    5a96:	81 e0       	ldi	r24, 0x01	; 1
    5a98:	83 8b       	std	Z+19, r24	; 0x13
    }
    
    nbi->ExtendedAddress = 0;
    5a9a:	14 8a       	std	Z+20, r1	; 0x14
    5a9c:	15 8a       	std	Z+21, r1	; 0x15
    5a9e:	16 8a       	std	Z+22, r1	; 0x16
    5aa0:	17 8a       	std	Z+23, r1	; 0x17
    5aa2:	10 8e       	std	Z+24, r1	; 0x18
    5aa4:	11 8e       	std	Z+25, r1	; 0x19
    5aa6:	12 8e       	std	Z+26, r1	; 0x1a
    5aa8:	13 8e       	std	Z+27, r1	; 0x1b
    nbi->NetworkAddress = pd->CoordAddress;
    5aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    5aac:	9d 81       	ldd	r25, Y+5	; 0x05
    5aae:	95 8f       	std	Z+29, r25	; 0x1d
    5ab0:	84 8f       	std	Z+28, r24	; 0x1c
    nbi->DeviceType = ZIGBEE_TYPE_DEVICE;
    5ab2:	83 e0       	ldi	r24, 0x03	; 3
    5ab4:	86 8f       	std	Z+30, r24	; 0x1e
    nbi->RxOnWhenIdle = false;
    5ab6:	17 8e       	std	Z+31, r1	; 0x1f
    nbi->Relationship = ZIGBEE_REL_UNKNOWN;
    5ab8:	80 a3       	std	Z+32, r24	; 0x20
    nbi->Depth = NWK_MAX_DEPTH;
    5aba:	8f e0       	ldi	r24, 0x0F	; 15
    5abc:	81 a3       	std	Z+33, r24	; 0x21
    nbi->TransmitFailure = 0;
    5abe:	12 a2       	std	Z+34, r1	; 0x22
    nbi->PotentialParent = true;
    5ac0:	81 e0       	ldi	r24, 0x01	; 1
    5ac2:	83 a3       	std	Z+35, r24	; 0x23
    nbi->LQI = pd->LinkQuality;
    5ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ac6:	84 a3       	std	Z+36, r24	; 0x24
    
    /* Add Neighbor Table item. */
    zigbee_neighbor_table_append(nbi);
    5ac8:	cf 01       	movw	r24, r30
    5aca:	0e 94 dd 30 	call	0x61ba	; 0x61ba <zigbee_neighbor_table_append>
}
    5ace:	df 91       	pop	r29
    5ad0:	cf 91       	pop	r28
    5ad2:	08 95       	ret

00005ad4 <mac_scan_confirm_callback>:


/*                     IEEE802.15.4 MAC Callbacks                             */


static void mac_scan_confirm_callback(mlme_scan_conf_t *msc) {
    5ad4:	cf 93       	push	r28
    5ad6:	df 93       	push	r29
    5ad8:	ec 01       	movw	r28, r24
    /* Check result of the scan. If any PANs were found, there must be copied into
     * the Neighbor table.
     */
    
    /* Clear the MLME_BEACON_NOTIFY.indication callback. */
    ieee802_15_4_clear_mlme_beacon_notify_indication();
    5ada:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <ieee802_15_4_clear_mlme_beacon_notify_indication>
    
    /* Build the NLME_NETWORK_DISCOVERY.confirm messsage. This is done by simply
     * copying the Network Descriptors from the Neighbor Table.
     */
    
    nlme_network_discovery_conf_t *ndc = nwk_param.discovery.ndc;
    5ade:	60 91 3d 12 	lds	r22, 0x123D
    5ae2:	70 91 3e 12 	lds	r23, 0x123E
    ndc->Status = msc->status;
    5ae6:	fb 01       	movw	r30, r22
    5ae8:	ef 5b       	subi	r30, 0xBF	; 191
    5aea:	ff 4f       	sbci	r31, 0xFF	; 255
    5aec:	88 81       	ld	r24, Y
    5aee:	80 83       	st	Z, r24
    ndc->NetworkCount = NEIGHBOR_TABLE_GET_SIZE();
    5af0:	80 91 49 12 	lds	r24, 0x1249
    5af4:	fb 01       	movw	r30, r22
    5af6:	81 93       	st	Z+, r24
        
    network_desc_t * nd_list = (network_desc_t *)(&(ndc->NetworkDescriptor[0]));
    
    for(zigbee_neighbor_table_item_t *nb_item = NEIGHBOR_TABLE_GET_FIRST(); \
    5af8:	a0 91 4a 12 	lds	r26, 0x124A
    5afc:	b0 91 4b 12 	lds	r27, 0x124B
    5b00:	11 c0       	rjmp	.+34     	; 0x5b24 <mac_scan_confirm_callback+0x50>
        true != NEIGHBOR_TABLE_IS_LAST_ELEMENT(nb_item); nb_item = NEIGHBOR_TABLE_GET_NEXT(nb_item)) {
        memcpy((void *)(nd_list), (void *)(&(nb_item->ndesc)), sizeof(network_desc_t));
    5b02:	cf 01       	movw	r24, r30
    5b04:	ad 01       	movw	r20, r26
    5b06:	4c 5f       	subi	r20, 0xFC	; 252
    5b08:	5f 4f       	sbci	r21, 0xFF	; 255
    5b0a:	20 e1       	ldi	r18, 0x10	; 16
    5b0c:	ea 01       	movw	r28, r20
    5b0e:	09 90       	ld	r0, Y+
    5b10:	ae 01       	movw	r20, r28
    5b12:	ec 01       	movw	r28, r24
    5b14:	09 92       	st	Y+, r0
    5b16:	ce 01       	movw	r24, r28
    5b18:	21 50       	subi	r18, 0x01	; 1
    5b1a:	c1 f7       	brne	.-16     	; 0x5b0c <mac_scan_confirm_callback+0x38>
        nd_list++;
    5b1c:	70 96       	adiw	r30, 0x10	; 16
    ndc->NetworkCount = NEIGHBOR_TABLE_GET_SIZE();
        
    network_desc_t * nd_list = (network_desc_t *)(&(ndc->NetworkDescriptor[0]));
    
    for(zigbee_neighbor_table_item_t *nb_item = NEIGHBOR_TABLE_GET_FIRST(); \
        true != NEIGHBOR_TABLE_IS_LAST_ELEMENT(nb_item); nb_item = NEIGHBOR_TABLE_GET_NEXT(nb_item)) {
    5b1e:	0d 90       	ld	r0, X+
    5b20:	bc 91       	ld	r27, X
    5b22:	a0 2d       	mov	r26, r0
    ndc->Status = msc->status;
    ndc->NetworkCount = NEIGHBOR_TABLE_GET_SIZE();
        
    network_desc_t * nd_list = (network_desc_t *)(&(ndc->NetworkDescriptor[0]));
    
    for(zigbee_neighbor_table_item_t *nb_item = NEIGHBOR_TABLE_GET_FIRST(); \
    5b24:	10 97       	sbiw	r26, 0x00	; 0
    5b26:	69 f7       	brne	.-38     	; 0x5b02 <mac_scan_confirm_callback+0x2e>
        memcpy((void *)(nd_list), (void *)(&(nb_item->ndesc)), sizeof(network_desc_t));
        nd_list++;
    }
    
    /* Post the confirm event. */
    (bool)vrt_post_event(zigbee_network_discovery_confirm_do_callback, (uint8_t *)(ndc));
    5b28:	8e e0       	ldi	r24, 0x0E	; 14
    5b2a:	9d e2       	ldi	r25, 0x2D	; 45
    5b2c:	0e 94 85 29 	call	0x530a	; 0x530a <vrt_post_event>
}
    5b30:	df 91       	pop	r29
    5b32:	cf 91       	pop	r28
    5b34:	08 95       	ret

00005b36 <zigbee_network_discovery_request>:
 *
 */
static void mac_beacon_notify_callback(mlme_beacon_notify_ind_t *mnbi);


bool zigbee_network_discovery_request(nlme_network_discovery_req_t *ndr) {
    5b36:	cf 93       	push	r28
    5b38:	df 93       	push	r29
    5b3a:	fc 01       	movw	r30, r24
    /* Verify that the device is in IDLE state. */
    if (NWK_IDLE != ZIGBEE_NWK_GET_STATE()) {
    5b3c:	80 91 8f 01 	lds	r24, 0x018F
    5b40:	88 23       	and	r24, r24
    5b42:	99 f5       	brne	.+102    	; 0x5baa <zigbee_network_discovery_request+0x74>
        return false;
    }
    
    /* Perform sanity check on function parameters. */
    if (NULL == ndr) {
    5b44:	30 97       	sbiw	r30, 0x00	; 0
    5b46:	89 f1       	breq	.+98     	; 0x5baa <zigbee_network_discovery_request+0x74>
        return false;
    }
    
    if (NULL == (ndr->nlme_callback_discovery_confirm)) {
    5b48:	82 81       	ldd	r24, Z+2	; 0x02
    5b4a:	93 81       	ldd	r25, Z+3	; 0x03
    5b4c:	00 97       	sbiw	r24, 0x00	; 0
    5b4e:	69 f1       	breq	.+90     	; 0x5baa <zigbee_network_discovery_request+0x74>
        return false;
    }
    
    /* Store NWK parameters. */
    nwk_param.discovery.nlme_callback_discovery_confirm = ndr->nlme_callback_discovery_confirm;
    5b50:	90 93 3c 12 	sts	0x123C, r25
    5b54:	80 93 3b 12 	sts	0x123B, r24
    nwk_param.discovery.ndc = &(ndr->ndc);
    5b58:	cf 01       	movw	r24, r30
    5b5a:	04 96       	adiw	r24, 0x04	; 4
    5b5c:	90 93 3e 12 	sts	0x123E, r25
    5b60:	80 93 3d 12 	sts	0x123D, r24
    
    /* Build and send MLME_SCAN.request. */
    mlme_scan_req_t *msr = &(ndr->msr);
    msr->ScanType = MLME_SCAN_TYPE_ACTIVE;
    5b64:	ef 01       	movw	r28, r30
    5b66:	ca 5b       	subi	r28, 0xBA	; 186
    5b68:	df 4f       	sbci	r29, 0xFF	; 255
    5b6a:	81 e0       	ldi	r24, 0x01	; 1
    5b6c:	88 83       	st	Y, r24
    msr->ScanChannel = ndr->ChannelToScan;
    5b6e:	df 01       	movw	r26, r30
    5b70:	a9 5b       	subi	r26, 0xB9	; 185
    5b72:	bf 4f       	sbci	r27, 0xFF	; 255
    5b74:	80 81       	ld	r24, Z
    5b76:	8c 93       	st	X, r24
    msr->ScanDuration = ndr->ScanDuration; 
    5b78:	df 01       	movw	r26, r30
    5b7a:	a8 5b       	subi	r26, 0xB8	; 184
    5b7c:	bf 4f       	sbci	r27, 0xFF	; 255
    5b7e:	81 81       	ldd	r24, Z+1	; 0x01
    5b80:	8c 93       	st	X, r24
    msr->mlme_scan_confirm = mac_scan_confirm_callback;
    5b82:	e7 5b       	subi	r30, 0xB7	; 183
    5b84:	ff 4f       	sbci	r31, 0xFF	; 255
    5b86:	8a e6       	ldi	r24, 0x6A	; 106
    5b88:	9d e2       	ldi	r25, 0x2D	; 45
    5b8a:	91 83       	std	Z+1, r25	; 0x01
    5b8c:	80 83       	st	Z, r24
    
    /* Set the MLME_BEACON_NOTIFY.indication callback. */
    ieee802_15_4_set_mlme_beacon_notify_indication(mac_beacon_notify_callback);
    5b8e:	86 e1       	ldi	r24, 0x16	; 22
    5b90:	9d e2       	ldi	r25, 0x2D	; 45
    5b92:	0e 94 d6 17 	call	0x2fac	; 0x2fac <ieee802_15_4_set_mlme_beacon_notify_indication>
    
    /* Issue MLME_SCAN.request primitive. */
    bool discovery_status = false;
    if (true != ieee802_15_4_scan_request(msr)) {
    5b96:	ce 01       	movw	r24, r28
    5b98:	0e 94 8b 23 	call	0x4716	; 0x4716 <ieee802_15_4_scan_request>
    5b9c:	88 23       	and	r24, r24
    5b9e:	29 f0       	breq	.+10     	; 0x5baa <zigbee_network_discovery_request+0x74>
    } else {
        ZIGBEE_NWK_SET_STATE(NWK_BUSY_DISCOVERING);
    5ba0:	82 e0       	ldi	r24, 0x02	; 2
    5ba2:	80 93 8f 01 	sts	0x018F, r24
        discovery_status = true;
    5ba6:	81 e0       	ldi	r24, 0x01	; 1
    5ba8:	01 c0       	rjmp	.+2      	; 0x5bac <zigbee_network_discovery_request+0x76>
    
    /* Set the MLME_BEACON_NOTIFY.indication callback. */
    ieee802_15_4_set_mlme_beacon_notify_indication(mac_beacon_notify_callback);
    
    /* Issue MLME_SCAN.request primitive. */
    bool discovery_status = false;
    5baa:	80 e0       	ldi	r24, 0x00	; 0
        ZIGBEE_NWK_SET_STATE(NWK_BUSY_DISCOVERING);
        discovery_status = true;
    }
    
    return discovery_status;
}
    5bac:	df 91       	pop	r29
    5bae:	cf 91       	pop	r28
    5bb0:	08 95       	ret

00005bb2 <zigbee_formation_request>:
/*================================= TYEPDEFS         =========================*/
/*================================= GLOBAL VARIABLES =========================*/
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

bool zigbee_formation_request(nlme_formation_req_t *nfr) {
    5bb2:	fc 01       	movw	r30, r24
    /* Add check of current state. */
    if (NWK_IDLE != ZIGBEE_NWK_GET_STATE()) {
    5bb4:	80 91 8f 01 	lds	r24, 0x018F
    5bb8:	88 23       	and	r24, r24
    5bba:	51 f5       	brne	.+84     	; 0x5c10 <zigbee_formation_request+0x5e>
        return false;
    }
    
    /* Peform sanity check on the function arguments. */
    if (NULL == nfr) {
    5bbc:	30 97       	sbiw	r30, 0x00	; 0
    5bbe:	41 f1       	breq	.+80     	; 0x5c10 <zigbee_formation_request+0x5e>
    
    /* Form the newtork by issuing the MLME_START.request primitive to the
     * the IEEE 802.15.4 MAC. If this primitive is successful, set the device's
     * short address to 0x0000. Finally enable the receiver.
     */
    if (MAC_SUCCESS != ieee802_15_4_start_request((nfr->pan_id), (nfr->channel), true)) {
    5bc0:	81 81       	ldd	r24, Z+1	; 0x01
    5bc2:	92 81       	ldd	r25, Z+2	; 0x02
    5bc4:	60 81       	ld	r22, Z
    5bc6:	41 e0       	ldi	r20, 0x01	; 1
    5bc8:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <ieee802_15_4_start_request>
    5bcc:	88 23       	and	r24, r24
    5bce:	01 f5       	brne	.+64     	; 0x5c10 <zigbee_formation_request+0x5e>
    } else if (MAC_SUCCESS != ieee802_15_4_set_short_address(0x0000)) {
    5bd0:	80 e0       	ldi	r24, 0x00	; 0
    5bd2:	90 e0       	ldi	r25, 0x00	; 0
    5bd4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ieee802_15_4_set_short_address>
    5bd8:	88 23       	and	r24, r24
    5bda:	d1 f4       	brne	.+52     	; 0x5c10 <zigbee_formation_request+0x5e>
    } else if (MAC_SUCCESS != ieee802_15_4_rx_enable()) {
    5bdc:	0e 94 06 23 	call	0x460c	; 0x460c <ieee802_15_4_rx_enable>
    5be0:	88 23       	and	r24, r24
    5be2:	c1 f4       	brne	.+48     	; 0x5c14 <zigbee_formation_request+0x62>
    } else {
        /* Network Formation is only used to start a Coordinator. Set network
         * depth to zero, calculate Cskip and set next nwkAddress.
         */
        
        NWK_NIB_SET_NWK_ADDRESS(0);
    5be4:	10 92 68 12 	sts	0x1268, r1
    5be8:	10 92 67 12 	sts	0x1267, r1
            
        uint16_t c_skip = zigbee_nib_c_skip(0);
    5bec:	0e 94 71 32 	call	0x64e2	; 0x64e2 <zigbee_nib_c_skip>
        NWK_NIB_SET_ADDRESS_INCREMENT(c_skip);
    5bf0:	90 93 54 12 	sts	0x1254, r25
    5bf4:	80 93 53 12 	sts	0x1253, r24
        NWK_NIB_SET_PARENT_ADDRESS_INCREMENT(c_skip);
    5bf8:	90 93 52 12 	sts	0x1252, r25
    5bfc:	80 93 51 12 	sts	0x1251, r24
        
        ZIGBEE_NWK_SET_STATE(NWK_FORMED);
    5c00:	83 e0       	ldi	r24, 0x03	; 3
    5c02:	80 93 8f 01 	sts	0x018F, r24
        NWK_NIB_SET_NODE_ROLE(ZIGBEE_TYPE_ROUTER);
    5c06:	82 e0       	ldi	r24, 0x02	; 2
    5c08:	80 93 55 12 	sts	0x1255, r24
        
        formation_status = true;
    5c0c:	81 e0       	ldi	r24, 0x01	; 1
    5c0e:	08 95       	ret
    /* Peform sanity check on the function arguments. */
    if (NULL == nfr) {
        return false;
    }
    
    bool formation_status = false;
    5c10:	80 e0       	ldi	r24, 0x00	; 0
    5c12:	08 95       	ret
    5c14:	80 e0       	ldi	r24, 0x00	; 0
        
        formation_status = true;
    }
    
    return formation_status;
}
    5c16:	08 95       	ret

00005c18 <zigbee_join_indication_do_callback>:
        return false;
    }
}


void zigbee_join_indication_do_callback(void *nji) {
    5c18:	cf 93       	push	r28
    5c1a:	df 93       	push	r29
    5c1c:	ec 01       	movw	r28, r24
    /* Verify that the */
    if (NULL == nji) {
    5c1e:	00 97       	sbiw	r24, 0x00	; 0
    5c20:	51 f0       	breq	.+20     	; 0x5c36 <zigbee_join_indication_do_callback+0x1e>
        return;
    }
    
    /* Check if a callback is registered. */
    zigbee_join_indication_t nji_callback = zigbee_get_nlme_join_indication();
    5c22:	0e 94 c5 2a 	call	0x558a	; 0x558a <zigbee_get_nlme_join_indication>
    5c26:	fc 01       	movw	r30, r24
    if (NULL == nji_callback) {
    5c28:	00 97       	sbiw	r24, 0x00	; 0
    5c2a:	11 f0       	breq	.+4      	; 0x5c30 <zigbee_join_indication_do_callback+0x18>
        MEM_FREE(nji);
        return;
    }
    
    /* Execute the callback. */
    nji_callback((nlme_join_ind_t *)nji);
    5c2c:	ce 01       	movw	r24, r28
    5c2e:	09 95       	icall
    MEM_FREE(nji);
    5c30:	ce 01       	movw	r24, r28
    5c32:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
}
    5c36:	df 91       	pop	r29
    5c38:	cf 91       	pop	r28
    5c3a:	08 95       	ret

00005c3c <mac_associate_confim_callback>:
        MEM_FREE(nji);
    }
}


static void mac_associate_confim_callback(mlme_associate_conf_t *mac) {
    5c3c:	cf 93       	push	r28
    5c3e:	df 93       	push	r29
    5c40:	fc 01       	movw	r30, r24
    /* Build NLME_JOIN.confirm. */
    nlme_join_conf_t *njc = nwk_param.join.njc;
    5c42:	c0 91 3f 12 	lds	r28, 0x123F
    5c46:	d0 91 40 12 	lds	r29, 0x1240
    memcpy((void *)(&(njc->ShortAddress)), (void *)(&(mac->AssocShortAddress)), sizeof(uint16_t));
    5c4a:	80 81       	ld	r24, Z
    5c4c:	91 81       	ldd	r25, Z+1	; 0x01
    5c4e:	99 83       	std	Y+1, r25	; 0x01
    5c50:	88 83       	st	Y, r24
    memcpy((void *)(&(njc->PANId)), (void *)(&IEEE802_15_4_GET_PAN_ID()), sizeof(uint16_t));
    5c52:	80 91 2c 11 	lds	r24, 0x112C
    5c56:	90 91 2d 11 	lds	r25, 0x112D
    5c5a:	9b 83       	std	Y+3, r25	; 0x03
    5c5c:	8a 83       	std	Y+2, r24	; 0x02
    njc->Status = mac->status;
    5c5e:	82 81       	ldd	r24, Z+2	; 0x02
    5c60:	8c 83       	std	Y+4, r24	; 0x04
    
    /* Set state to NWK_JOINED if the association process was successful. */
    if (ASSOCIATION_SUCCESSFUL == (mac->status)) {
    5c62:	82 81       	ldd	r24, Z+2	; 0x02
    5c64:	88 23       	and	r24, r24
    5c66:	11 f5       	brne	.+68     	; 0x5cac <mac_associate_confim_callback+0x70>
        NWK_NIB_SET_NWK_ADDRESS(mac->AssocShortAddress);
    5c68:	80 81       	ld	r24, Z
    5c6a:	91 81       	ldd	r25, Z+1	; 0x01
    5c6c:	90 93 68 12 	sts	0x1268, r25
    5c70:	80 93 67 12 	sts	0x1267, r24
        NWK_NIB_SET_ADDRESS_INCREMENT(0);
    5c74:	10 92 54 12 	sts	0x1254, r1
    5c78:	10 92 53 12 	sts	0x1253, r1
        
        uint8_t depth = zigbee_neighbor_table_find_depth(IEEE802_15_4_GET_COORD_SHORT_ADDRESS(), \
    5c7c:	60 91 3e 11 	lds	r22, 0x113E
    5c80:	70 91 3f 11 	lds	r23, 0x113F
    5c84:	80 91 2a 11 	lds	r24, 0x112A
    5c88:	90 91 2b 11 	lds	r25, 0x112B
    5c8c:	0e 94 26 32 	call	0x644c	; 0x644c <zigbee_neighbor_table_find_depth>
                                                         IEEE802_15_4_GET_SHORT_ADDRESS());
        
        uint16_t c_skip = zigbee_nib_c_skip(depth - 1);
    5c90:	81 50       	subi	r24, 0x01	; 1
    5c92:	0e 94 71 32 	call	0x64e2	; 0x64e2 <zigbee_nib_c_skip>
        NWK_NIB_SET_PARENT_ADDRESS_INCREMENT(c_skip); 
    5c96:	90 93 52 12 	sts	0x1252, r25
    5c9a:	80 93 51 12 	sts	0x1251, r24
        
        ZIGBEE_NWK_SET_STATE(NWK_JOINED);
    5c9e:	85 e0       	ldi	r24, 0x05	; 5
    5ca0:	80 93 8f 01 	sts	0x018F, r24
        NWK_NIB_SET_NODE_ROLE(ZIGBEE_TYPE_DEVICE);
    5ca4:	83 e0       	ldi	r24, 0x03	; 3
    5ca6:	80 93 55 12 	sts	0x1255, r24
    5caa:	0a c0       	rjmp	.+20     	; 0x5cc0 <mac_associate_confim_callback+0x84>
    } else {
        /* Remove this node from the Neighbor Table. */
        zigbee_neighbor_table_item_t *nb = zigbee_neighbor_table_find(nwk_param.join.parent_address);
    5cac:	80 91 3b 12 	lds	r24, 0x123B
    5cb0:	90 91 3c 12 	lds	r25, 0x123C
    5cb4:	0e 94 54 31 	call	0x62a8	; 0x62a8 <zigbee_neighbor_table_find>
        if (NULL != nb) { zigbee_neighbor_table_delete(nb); }
    5cb8:	00 97       	sbiw	r24, 0x00	; 0
    5cba:	11 f0       	breq	.+4      	; 0x5cc0 <mac_associate_confim_callback+0x84>
    5cbc:	0e 94 0f 31 	call	0x621e	; 0x621e <zigbee_neighbor_table_delete>
    }
    
    /* Execute callback. */
    nwk_param.join.nlme_callback_join_confirm(njc);
    5cc0:	e0 91 3d 12 	lds	r30, 0x123D
    5cc4:	f0 91 3e 12 	lds	r31, 0x123E
    5cc8:	ce 01       	movw	r24, r28
    5cca:	09 95       	icall
}
    5ccc:	df 91       	pop	r29
    5cce:	cf 91       	pop	r28
    5cd0:	08 95       	ret

00005cd2 <zigbee_join_request>:
 *  \param[in] mac Pointer to MLME-ASSOCIATE.confirm message.
 */
static void mac_associate_confim_callback(mlme_associate_conf_t *mac);


bool zigbee_join_request(nlme_join_req_t *njr) {
    5cd2:	cf 93       	push	r28
    5cd4:	df 93       	push	r29
    5cd6:	fc 01       	movw	r30, r24
    /* Perform sanity check on parameter set. */
    if (NULL == njr) {
    5cd8:	00 97       	sbiw	r24, 0x00	; 0
    5cda:	09 f4       	brne	.+2      	; 0x5cde <zigbee_join_request+0xc>
    5cdc:	5e c0       	rjmp	.+188    	; 0x5d9a <zigbee_join_request+0xc8>
        return false;
    }
    
    if (NULL == (njr->nlme_callback_join_confirm)) {
    5cde:	c6 81       	ldd	r28, Z+6	; 0x06
    5ce0:	d7 81       	ldd	r29, Z+7	; 0x07
    5ce2:	20 97       	sbiw	r28, 0x00	; 0
    5ce4:	09 f4       	brne	.+2      	; 0x5ce8 <zigbee_join_request+0x16>
    5ce6:	59 c0       	rjmp	.+178    	; 0x5d9a <zigbee_join_request+0xc8>
        return false;
    }
    
    if (NWK_JOIN_THROUGH_ASSOCIATION == (njr->RejoinNetwork)) {
    5ce8:	82 81       	ldd	r24, Z+2	; 0x02
    5cea:	88 23       	and	r24, r24
    5cec:	09 f0       	breq	.+2      	; 0x5cf0 <zigbee_join_request+0x1e>
    5cee:	55 c0       	rjmp	.+170    	; 0x5d9a <zigbee_join_request+0xc8>
        /* Association. */
        
        /* Verify that the device is in idle mode. */
        if (NWK_IDLE != ZIGBEE_NWK_GET_STATE()) {
    5cf0:	80 91 8f 01 	lds	r24, 0x018F
    5cf4:	88 23       	and	r24, r24
    5cf6:	09 f0       	breq	.+2      	; 0x5cfa <zigbee_join_request+0x28>
    5cf8:	50 c0       	rjmp	.+160    	; 0x5d9a <zigbee_join_request+0xc8>
        /* Serach the Neighbor Table for a potential item with the suggested
         * PAN ID.
         */
        bool join_candidate_found = false;
        
        zigbee_neighbor_table_item_t *nb_item = NEIGHBOR_TABLE_GET_FIRST();
    5cfa:	a0 91 4a 12 	lds	r26, 0x124A
    5cfe:	b0 91 4b 12 	lds	r27, 0x124B
        
        while ((true != NEIGHBOR_TABLE_IS_LAST_ELEMENT(nb_item)) && (true != join_candidate_found)) {
    5d02:	11 c0       	rjmp	.+34     	; 0x5d26 <zigbee_join_request+0x54>
            
            if (((nb_item->ndesc.PanID) == (njr->PANId)) && (true == nb_item->ndesc.PermitJoining)) {
    5d04:	14 96       	adiw	r26, 0x04	; 4
    5d06:	8d 91       	ld	r24, X+
    5d08:	9c 91       	ld	r25, X
    5d0a:	15 97       	sbiw	r26, 0x05	; 5
    5d0c:	20 81       	ld	r18, Z
    5d0e:	31 81       	ldd	r19, Z+1	; 0x01
    5d10:	82 17       	cp	r24, r18
    5d12:	93 07       	cpc	r25, r19
    5d14:	29 f4       	brne	.+10     	; 0x5d20 <zigbee_join_request+0x4e>
    5d16:	53 96       	adiw	r26, 0x13	; 19
    5d18:	2c 91       	ld	r18, X
    5d1a:	53 97       	sbiw	r26, 0x13	; 19
    5d1c:	22 23       	and	r18, r18
    5d1e:	31 f4       	brne	.+12     	; 0x5d2c <zigbee_join_request+0x5a>
                join_candidate_found = true;
                break;
            } else {
                nb_item = NEIGHBOR_TABLE_GET_NEXT(nb_item);
    5d20:	0d 90       	ld	r0, X+
    5d22:	bc 91       	ld	r27, X
    5d24:	a0 2d       	mov	r26, r0
         */
        bool join_candidate_found = false;
        
        zigbee_neighbor_table_item_t *nb_item = NEIGHBOR_TABLE_GET_FIRST();
        
        while ((true != NEIGHBOR_TABLE_IS_LAST_ELEMENT(nb_item)) && (true != join_candidate_found)) {
    5d26:	10 97       	sbiw	r26, 0x00	; 0
    5d28:	69 f7       	brne	.-38     	; 0x5d04 <zigbee_join_request+0x32>
    5d2a:	37 c0       	rjmp	.+110    	; 0x5d9a <zigbee_join_request+0xc8>
        if (true != join_candidate_found) {
            return false;
        }
        
        /* Build MLME_ASSOCIATE.request. */
        njr->mar.LogicalChannel = nb_item->ndesc.LogicalChannel;
    5d2c:	1e 96       	adiw	r26, 0x0e	; 14
    5d2e:	2c 91       	ld	r18, X
    5d30:	1e 97       	sbiw	r26, 0x0e	; 14
    5d32:	25 87       	std	Z+13, r18	; 0x0d
        njr->mar.CoordAddrMode = WPAN_ADDRMODE_SHORT;
    5d34:	22 e0       	ldi	r18, 0x02	; 2
    5d36:	26 87       	std	Z+14, r18	; 0x0e
        njr->mar.CoordPANId = njr->PANId;
    5d38:	90 8b       	std	Z+16, r25	; 0x10
    5d3a:	87 87       	std	Z+15, r24	; 0x0f
        njr->mar.CoordAddress = 0;
        njr->mar.CoordAddress = nb_item->NetworkAddress;
    5d3c:	5c 96       	adiw	r26, 0x1c	; 28
    5d3e:	0d 90       	ld	r0, X+
    5d40:	bc 91       	ld	r27, X
    5d42:	a0 2d       	mov	r26, r0
    5d44:	9d 01       	movw	r18, r26
    5d46:	a1 8b       	std	Z+17, r26	; 0x11
    5d48:	32 8b       	std	Z+18, r19	; 0x12
    5d4a:	13 8a       	std	Z+19, r1	; 0x13
    5d4c:	14 8a       	std	Z+20, r1	; 0x14
    5d4e:	15 8a       	std	Z+21, r1	; 0x15
    5d50:	16 8a       	std	Z+22, r1	; 0x16
    5d52:	17 8a       	std	Z+23, r1	; 0x17
    5d54:	10 8e       	std	Z+24, r1	; 0x18
        
        uint8_t capabilities = 0;                  
        if (true == (njr->JoinAsRouter)) { capabilities |= (1 << 1); }
    5d56:	83 81       	ldd	r24, Z+3	; 0x03
    5d58:	81 11       	cpse	r24, r1
    5d5a:	82 e0       	ldi	r24, 0x02	; 2
        if (0x01 == (njr->PowerSource))  { capabilities |= (1 << 2); }
    5d5c:	94 81       	ldd	r25, Z+4	; 0x04
    5d5e:	91 30       	cpi	r25, 0x01	; 1
    5d60:	09 f4       	brne	.+2      	; 0x5d64 <zigbee_join_request+0x92>
    5d62:	84 60       	ori	r24, 0x04	; 4
        if (true == (njr->RxOnWhenIdle)) { capabilities |= (1 << 3); }
    5d64:	95 81       	ldd	r25, Z+5	; 0x05
    5d66:	91 11       	cpse	r25, r1
    5d68:	88 60       	ori	r24, 0x08	; 8
        
        njr->mar.CapabilityInformation = capabilities;
    5d6a:	81 8f       	std	Z+25, r24	; 0x19
        
        njr->mar.mlme_associate_confirm = mac_associate_confim_callback;
    5d6c:	8e e1       	ldi	r24, 0x1E	; 30
    5d6e:	9e e2       	ldi	r25, 0x2E	; 46
    5d70:	93 8f       	std	Z+27, r25	; 0x1b
    5d72:	82 8f       	std	Z+26, r24	; 0x1a
        
        /* Set some of the internal storage pointers. */
        nwk_param.join.nlme_callback_join_confirm = njr->nlme_callback_join_confirm;
    5d74:	d0 93 3e 12 	sts	0x123E, r29
    5d78:	c0 93 3d 12 	sts	0x123D, r28
        nwk_param.join.njc = &(njr->njc);
    5d7c:	cf 01       	movw	r24, r30
    5d7e:	08 96       	adiw	r24, 0x08	; 8
    5d80:	90 93 40 12 	sts	0x1240, r25
    5d84:	80 93 3f 12 	sts	0x123F, r24
        nwk_param.join.parent_address = njr->mar.CoordAddress;
    5d88:	b0 93 3c 12 	sts	0x123C, r27
    5d8c:	a0 93 3b 12 	sts	0x123B, r26
        
        /* Issue request. */
        if (true != ieee802_15_4_associate_request(&(njr->mar))) {
    5d90:	cf 01       	movw	r24, r30
    5d92:	0d 96       	adiw	r24, 0x0d	; 13
    5d94:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <ieee802_15_4_associate_request>
    5d98:	01 c0       	rjmp	.+2      	; 0x5d9c <zigbee_join_request+0xca>
    if (NWK_JOIN_THROUGH_ASSOCIATION == (njr->RejoinNetwork)) {
        /* Association. */
        
        /* Verify that the device is in idle mode. */
        if (NWK_IDLE != ZIGBEE_NWK_GET_STATE()) {
            return false;
    5d9a:	80 e0       	ldi	r24, 0x00	; 0
        return false;
    } else {
        /* Unknown option. */
        return false;
    }
}
    5d9c:	df 91       	pop	r29
    5d9e:	cf 91       	pop	r28
    5da0:	08 95       	ret

00005da2 <mac_associate_indication_callback>:


/*                            IEEE 802.15.4 MAC Callbacks                     */


void mac_associate_indication_callback(mlme_associate_ind_t *mai) {
    5da2:	0f 93       	push	r16
    5da4:	1f 93       	push	r17
    5da6:	cf 93       	push	r28
    5da8:	df 93       	push	r29
    5daa:	ec 01       	movw	r28, r24
    /* Allcoate some memory to build the MLME_ASSOCIATE.response on. */
    mlme_associate_resp_t *response = (mlme_associate_resp_t *)MEM_ALLOC(mlme_associate_resp_t);
    5dac:	8b e0       	ldi	r24, 0x0B	; 11
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    5db4:	8c 01       	movw	r16, r24
    
    if (NULL == response) {
    5db6:	00 97       	sbiw	r24, 0x00	; 0
    5db8:	e9 f1       	breq	.+122    	; 0x5e34 <mac_associate_indication_callback+0x92>
        return;
    }
    
    memcpy((void *)(&(response->DeviceAddress)), (void *)(&(mai->DeviceAddress)), sizeof(uint64_t));
    5dba:	dc 01       	movw	r26, r24
    5dbc:	fe 01       	movw	r30, r28
    5dbe:	88 e0       	ldi	r24, 0x08	; 8
    5dc0:	01 90       	ld	r0, Z+
    5dc2:	0d 92       	st	X+, r0
    5dc4:	81 50       	subi	r24, 0x01	; 1
    5dc6:	e1 f7       	brne	.-8      	; 0x5dc0 <mac_associate_indication_callback+0x1e>
    nwk_param.join_ind.capability_information = mai->CapabilityInformation;
    5dc8:	88 85       	ldd	r24, Y+8	; 0x08
    5dca:	80 93 3d 12 	sts	0x123D, r24
    5dce:	10 92 3e 12 	sts	0x123E, r1
    
    /* Check if the device with this long address has been given a short address
     * already. That is this device is the parent.
     */
    zigbee_neighbor_table_item_t *child = zigbee_neighbor_table_find_long(mai->DeviceAddress);
    5dd2:	28 81       	ld	r18, Y
    5dd4:	39 81       	ldd	r19, Y+1	; 0x01
    5dd6:	4a 81       	ldd	r20, Y+2	; 0x02
    5dd8:	5b 81       	ldd	r21, Y+3	; 0x03
    5dda:	6c 81       	ldd	r22, Y+4	; 0x04
    5ddc:	7d 81       	ldd	r23, Y+5	; 0x05
    5dde:	8e 81       	ldd	r24, Y+6	; 0x06
    5de0:	9f 81       	ldd	r25, Y+7	; 0x07
    5de2:	0e 94 6f 31 	call	0x62de	; 0x62de <zigbee_neighbor_table_find_long>
    if (NULL != child) {
    5de6:	00 97       	sbiw	r24, 0x00	; 0
    5de8:	a1 f4       	brne	.+40     	; 0x5e12 <mac_associate_indication_callback+0x70>
        nwk_param.join_ind.allocted_address = child->NetworkAddress;
    
        response->status = ASSOCIATION_SUCCESSFUL;
    } else {
        /* Check if the joining device is an End device or Router. */
        if (((mai->CapabilityInformation) & (0x02)) != (0x02)) {
    5dea:	88 85       	ldd	r24, Y+8	; 0x08
    5dec:	81 fd       	sbrc	r24, 1
    5dee:	03 c0       	rjmp	.+6      	; 0x5df6 <mac_associate_indication_callback+0x54>
            /* Check if it is possible to join the end device. */
            child = zigbee_neighbor_table_add_device();
    5df0:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <zigbee_neighbor_table_add_device>
    5df4:	02 c0       	rjmp	.+4      	; 0x5dfa <mac_associate_indication_callback+0x58>
        } else {
            /* Check if it is possible to join the router. */
            child = zigbee_neighbor_table_add_router();
    5df6:	0e 94 9f 31 	call	0x633e	; 0x633e <zigbee_neighbor_table_add_router>
        }
        
        if (NULL == child) {
    5dfa:	00 97       	sbiw	r24, 0x00	; 0
    5dfc:	51 f4       	brne	.+20     	; 0x5e12 <mac_associate_indication_callback+0x70>
            response->AssocShortAddress = 0xFFFF;
    5dfe:	8f ef       	ldi	r24, 0xFF	; 255
    5e00:	9f ef       	ldi	r25, 0xFF	; 255
    5e02:	f8 01       	movw	r30, r16
    5e04:	91 87       	std	Z+9, r25	; 0x09
    5e06:	80 87       	std	Z+8, r24	; 0x08
            response->status = PAN_AT_CAPACITY;
    5e08:	81 e0       	ldi	r24, 0x01	; 1
    5e0a:	82 87       	std	Z+10, r24	; 0x0a
            /* Also upate the permit joining PIB in the IEEE 802.15.4 MAC to
             * reflect that the system is now not to associate more devices.
             */
            IEEE802_15_4_SET_ASSOCIATION_PERMITTED(false);
    5e0c:	10 92 23 11 	sts	0x1123, r1
    5e10:	0b c0       	rjmp	.+22     	; 0x5e28 <mac_associate_indication_callback+0x86>
        } else {
            response->AssocShortAddress = child->NetworkAddress;
    5e12:	fc 01       	movw	r30, r24
    5e14:	84 8d       	ldd	r24, Z+28	; 0x1c
    5e16:	95 8d       	ldd	r25, Z+29	; 0x1d
    5e18:	f8 01       	movw	r30, r16
    5e1a:	91 87       	std	Z+9, r25	; 0x09
    5e1c:	80 87       	std	Z+8, r24	; 0x08
            nwk_param.join_ind.allocted_address = child->NetworkAddress;
    5e1e:	90 93 3c 12 	sts	0x123C, r25
    5e22:	80 93 3b 12 	sts	0x123B, r24
            response->status = ASSOCIATION_SUCCESSFUL;
    5e26:	12 86       	std	Z+10, r1	; 0x0a
        }
    }
    
    (bool)ieee802_15_4_associate_response(response);
    5e28:	c8 01       	movw	r24, r16
    5e2a:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <ieee802_15_4_associate_response>
    MEM_FREE(response);
    5e2e:	c8 01       	movw	r24, r16
    5e30:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
}
    5e34:	df 91       	pop	r29
    5e36:	cf 91       	pop	r28
    5e38:	1f 91       	pop	r17
    5e3a:	0f 91       	pop	r16
    5e3c:	08 95       	ret

00005e3e <mac_comm_status_indication_callback>:


void mac_comm_status_indication_callback(mlme_comm_status_ind_t *mcsi) {
    5e3e:	ef 92       	push	r14
    5e40:	ff 92       	push	r15
    5e42:	0f 93       	push	r16
    5e44:	1f 93       	push	r17
    5e46:	cf 93       	push	r28
    5e48:	df 93       	push	r29
    5e4a:	8c 01       	movw	r16, r24
    /* Only generate NLME_JOIN.indication if the association was successful. */
    if (MAC_SUCCESS != (mcsi->status)) {
    5e4c:	fc 01       	movw	r30, r24
    5e4e:	84 89       	ldd	r24, Z+20	; 0x14
    5e50:	88 23       	and	r24, r24
    5e52:	09 f0       	breq	.+2      	; 0x5e56 <mac_comm_status_indication_callback+0x18>
    5e54:	3e c0       	rjmp	.+124    	; 0x5ed2 <mac_comm_status_indication_callback+0x94>
        return;
    }
    
    /* Try to allocate some memory to build the indication on. */
    nlme_join_ind_t *nji = (nlme_join_ind_t *)MEM_ALLOC(nlme_join_ind_t);
    5e56:	8b e0       	ldi	r24, 0x0B	; 11
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    5e5e:	e8 2e       	mov	r14, r24
    5e60:	e7 01       	movw	r28, r14
    5e62:	7e 01       	movw	r14, r28
    5e64:	f9 2e       	mov	r15, r25
    5e66:	e7 01       	movw	r28, r14
    
    /* Verify that memory was allocated. */
    if (NULL == nji) {
    5e68:	20 97       	sbiw	r28, 0x00	; 0
    5e6a:	99 f1       	breq	.+102    	; 0x5ed2 <mac_comm_status_indication_callback+0x94>
        return;
    }
    
    /* Build the NLME_JOIN.indication. */
    nji->ShortAddress = nwk_param.join_ind.allocted_address;
    5e6c:	80 91 3b 12 	lds	r24, 0x123B
    5e70:	90 91 3c 12 	lds	r25, 0x123C
    5e74:	f7 01       	movw	r30, r14
    5e76:	81 93       	st	Z+, r24
    5e78:	91 93       	st	Z+, r25
    memcpy((void *)(&(nji->ExtendedAddress)), (void *)(&(mcsi->DstAddr)),sizeof(uint64_t));
    5e7a:	04 5f       	subi	r16, 0xF4	; 244
    5e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e7e:	d8 01       	movw	r26, r16
    5e80:	88 e0       	ldi	r24, 0x08	; 8
    5e82:	0d 90       	ld	r0, X+
    5e84:	01 92       	st	Z+, r0
    5e86:	81 50       	subi	r24, 0x01	; 1
    5e88:	e1 f7       	brne	.-8      	; 0x5e82 <mac_comm_status_indication_callback+0x44>
    nji->CapabilityInformation = nwk_param.join_ind.capability_information;
    5e8a:	80 91 3d 12 	lds	r24, 0x123D
    5e8e:	8a 87       	std	Y+10, r24	; 0x0a
    
    /* Add information about the newly added node in the Neighbor Table. */
    zigbee_neighbor_table_item_t *child = zigbee_neighbor_table_find(nwk_param.join_ind.allocted_address);
    5e90:	80 91 3b 12 	lds	r24, 0x123B
    5e94:	90 91 3c 12 	lds	r25, 0x123C
    5e98:	0e 94 54 31 	call	0x62a8	; 0x62a8 <zigbee_neighbor_table_find>
    if (NULL != child) { 
    5e9c:	00 97       	sbiw	r24, 0x00	; 0
    5e9e:	79 f0       	breq	.+30     	; 0x5ebe <mac_comm_status_indication_callback+0x80>
        memcpy((void *)(&(child->ExtendedAddress)), (void *)(&(mcsi->DstAddr)), sizeof(uint64_t));
    5ea0:	dc 01       	movw	r26, r24
    5ea2:	54 96       	adiw	r26, 0x14	; 20
    5ea4:	f8 01       	movw	r30, r16
    5ea6:	28 e0       	ldi	r18, 0x08	; 8
    5ea8:	01 90       	ld	r0, Z+
    5eaa:	0d 92       	st	X+, r0
    5eac:	21 50       	subi	r18, 0x01	; 1
    5eae:	e1 f7       	brne	.-8      	; 0x5ea8 <mac_comm_status_indication_callback+0x6a>
        memcpy((void *)(&(child->NetworkAddress)), (void *)(&(nwk_param.join_ind.allocted_address)), sizeof(uint16_t));
    5eb0:	20 91 3b 12 	lds	r18, 0x123B
    5eb4:	30 91 3c 12 	lds	r19, 0x123C
    5eb8:	fc 01       	movw	r30, r24
    5eba:	35 8f       	std	Z+29, r19	; 0x1d
    5ebc:	24 8f       	std	Z+28, r18	; 0x1c
    }
    
    /* Post event. */
    if (true != vrt_post_event(zigbee_join_indication_do_callback, (uint8_t *)nji)) {
    5ebe:	8c e0       	ldi	r24, 0x0C	; 12
    5ec0:	9e e2       	ldi	r25, 0x2E	; 46
    5ec2:	be 01       	movw	r22, r28
    5ec4:	0e 94 85 29 	call	0x530a	; 0x530a <vrt_post_event>
    5ec8:	88 23       	and	r24, r24
    5eca:	19 f4       	brne	.+6      	; 0x5ed2 <mac_comm_status_indication_callback+0x94>
        MEM_FREE(nji);
    5ecc:	ce 01       	movw	r24, r28
    5ece:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
    }
}
    5ed2:	df 91       	pop	r29
    5ed4:	cf 91       	pop	r28
    5ed6:	1f 91       	pop	r17
    5ed8:	0f 91       	pop	r16
    5eda:	ff 90       	pop	r15
    5edc:	ef 90       	pop	r14
    5ede:	08 95       	ret

00005ee0 <mac_disassociate_confirm_callback>:
    /* Release allocated memory. */
    MEM_FREE(nli);
}


static void mac_disassociate_confirm_callback(mlme_disassociate_conf_t *mdc) {
    5ee0:	cf 93       	push	r28
    5ee2:	df 93       	push	r29
    5ee4:	ec 01       	movw	r28, r24
    /* Check if the MLME_DISASSOCIATE.request was initiated by a ZigBee Coordinator,
     * Router or End-device.
     */
    if (ZIGBEE_TYPE_DEVICE == NWK_NIB_GET_NODE_ROLE()) {
    5ee6:	80 91 55 12 	lds	r24, 0x1255
    5eea:	83 30       	cpi	r24, 0x03	; 3
    5eec:	39 f4       	brne	.+14     	; 0x5efc <mac_disassociate_confirm_callback+0x1c>
        /* ZigBee End-device that asked to be relinquished from the network. */
        
        /* Do a full node reset. */
        zigbee_nib_init();
    5eee:	0e 94 2c 32 	call	0x6458	; 0x6458 <zigbee_nib_init>
        zigbee_neighbor_table_init();
    5ef2:	0e 94 70 30 	call	0x60e0	; 0x60e0 <zigbee_neighbor_table_init>
        ZIGBEE_NWK_SET_STATE(NWK_IDLE);
    5ef6:	10 92 8f 01 	sts	0x018F, r1
    5efa:	07 c0       	rjmp	.+14     	; 0x5f0a <mac_disassociate_confirm_callback+0x2a>
    } else if (ZIGBEE_TYPE_COORD == NWK_NIB_GET_NODE_ROLE()) {
    5efc:	81 30       	cpi	r24, 0x01	; 1
    5efe:	11 f4       	brne	.+4      	; 0x5f04 <mac_disassociate_confirm_callback+0x24>
        ZIGBEE_NWK_SET_STATE(NWK_FORMED);
    5f00:	83 e0       	ldi	r24, 0x03	; 3
    5f02:	01 c0       	rjmp	.+2      	; 0x5f06 <mac_disassociate_confirm_callback+0x26>
    } else {
        ZIGBEE_NWK_SET_STATE(NWK_STARTED);
    5f04:	84 e0       	ldi	r24, 0x04	; 4
    5f06:	80 93 8f 01 	sts	0x018F, r24
    }
    
    memcpy((void *)(&(nwk_param.leave.confirm->DeviceAddress)), (void *)(&(nwk_param.leave.node_to_leave)), sizeof(uint64_t));
    5f0a:	e0 91 3d 12 	lds	r30, 0x123D
    5f0e:	f0 91 3e 12 	lds	r31, 0x123E
    5f12:	80 91 3f 12 	lds	r24, 0x123F
    5f16:	80 83       	st	Z, r24
    5f18:	80 91 40 12 	lds	r24, 0x1240
    5f1c:	81 83       	std	Z+1, r24	; 0x01
    5f1e:	80 91 41 12 	lds	r24, 0x1241
    5f22:	82 83       	std	Z+2, r24	; 0x02
    5f24:	80 91 42 12 	lds	r24, 0x1242
    5f28:	83 83       	std	Z+3, r24	; 0x03
    5f2a:	80 91 43 12 	lds	r24, 0x1243
    5f2e:	84 83       	std	Z+4, r24	; 0x04
    5f30:	80 91 44 12 	lds	r24, 0x1244
    5f34:	85 83       	std	Z+5, r24	; 0x05
    5f36:	80 91 45 12 	lds	r24, 0x1245
    5f3a:	86 83       	std	Z+6, r24	; 0x06
    5f3c:	80 91 46 12 	lds	r24, 0x1246
    5f40:	87 83       	std	Z+7, r24	; 0x07
    nwk_param.leave.confirm->Status = mdc->status;
    5f42:	80 91 3d 12 	lds	r24, 0x123D
    5f46:	90 91 3e 12 	lds	r25, 0x123E
    5f4a:	28 81       	ld	r18, Y
    5f4c:	fc 01       	movw	r30, r24
    5f4e:	20 87       	std	Z+8, r18	; 0x08
    
    nwk_param.leave.nlme_callback_leave_confirm(nwk_param.leave.confirm);
    5f50:	e0 91 3b 12 	lds	r30, 0x123B
    5f54:	f0 91 3c 12 	lds	r31, 0x123C
    5f58:	09 95       	icall
}
    5f5a:	df 91       	pop	r29
    5f5c:	cf 91       	pop	r28
    5f5e:	08 95       	ret

00005f60 <zigbee_leave_request>:
 *                 lower layer.
 */
static void mac_disassociate_confirm_callback(mlme_disassociate_conf_t *mdc); 


bool zigbee_leave_request(nlme_leave_req_t *nlr) {
    5f60:	cf 93       	push	r28
    5f62:	df 93       	push	r29
    5f64:	ec 01       	movw	r28, r24
    /* Perform sanity check on function parameters. */
    if (NULL == nlr) {
    5f66:	00 97       	sbiw	r24, 0x00	; 0
    5f68:	09 f4       	brne	.+2      	; 0x5f6c <zigbee_leave_request+0xc>
    5f6a:	78 c0       	rjmp	.+240    	; 0x605c <zigbee_leave_request+0xfc>
        return false;
    }
    
    if (NULL == (nlr->nlme_callback_leave_confirm)) {
    5f6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5f70:	00 97       	sbiw	r24, 0x00	; 0
    5f72:	09 f4       	brne	.+2      	; 0x5f76 <zigbee_leave_request+0x16>
    5f74:	73 c0       	rjmp	.+230    	; 0x605c <zigbee_leave_request+0xfc>
    }
    
    mlme_disassociate_req_t* mdr = &nlr->mdr;
    
    /* Validate the DeviceAddress parameter. */
    if (0 == (nlr->DeviceAddress)) {
    5f76:	28 81       	ld	r18, Y
    5f78:	39 81       	ldd	r19, Y+1	; 0x01
    5f7a:	4a 81       	ldd	r20, Y+2	; 0x02
    5f7c:	5b 81       	ldd	r21, Y+3	; 0x03
    5f7e:	6c 81       	ldd	r22, Y+4	; 0x04
    5f80:	7d 81       	ldd	r23, Y+5	; 0x05
    5f82:	8e 81       	ldd	r24, Y+6	; 0x06
    5f84:	9f 81       	ldd	r25, Y+7	; 0x07
    5f86:	e2 2f       	mov	r30, r18
    5f88:	e3 2b       	or	r30, r19
    5f8a:	e4 2b       	or	r30, r20
    5f8c:	e5 2b       	or	r30, r21
    5f8e:	e6 2b       	or	r30, r22
    5f90:	e7 2b       	or	r30, r23
    5f92:	e8 2b       	or	r30, r24
    5f94:	e9 2b       	or	r30, r25
    5f96:	f0 91 55 12 	lds	r31, 0x1255
    5f9a:	ee 23       	and	r30, r30
    5f9c:	e9 f4       	brne	.+58     	; 0x5fd8 <zigbee_leave_request+0x78>
        /* The node must be an end device to remove itself. In this implementation
         * it is not possible for a router or coordinator to leave.
         */
        if (ZIGBEE_TYPE_DEVICE != NWK_NIB_GET_NODE_ROLE()) { return false; }
    5f9e:	f3 30       	cpi	r31, 0x03	; 3
    5fa0:	09 f0       	breq	.+2      	; 0x5fa4 <zigbee_leave_request+0x44>
    5fa2:	5c c0       	rjmp	.+184    	; 0x605c <zigbee_leave_request+0xfc>
        memcpy((void *)(&(mdr->DeviceAddress)), (void *)(&(IEEE802_15_4_GET_COORD_EXTENDED_ADDRESS())), sizeof(uint64_t));
    5fa4:	80 91 36 11 	lds	r24, 0x1136
    5fa8:	8f 8b       	std	Y+23, r24	; 0x17
    5faa:	80 91 37 11 	lds	r24, 0x1137
    5fae:	88 8f       	std	Y+24, r24	; 0x18
    5fb0:	80 91 38 11 	lds	r24, 0x1138
    5fb4:	89 8f       	std	Y+25, r24	; 0x19
    5fb6:	80 91 39 11 	lds	r24, 0x1139
    5fba:	8a 8f       	std	Y+26, r24	; 0x1a
    5fbc:	80 91 3a 11 	lds	r24, 0x113A
    5fc0:	8b 8f       	std	Y+27, r24	; 0x1b
    5fc2:	80 91 3b 11 	lds	r24, 0x113B
    5fc6:	8c 8f       	std	Y+28, r24	; 0x1c
    5fc8:	80 91 3c 11 	lds	r24, 0x113C
    5fcc:	8d 8f       	std	Y+29, r24	; 0x1d
    5fce:	80 91 3d 11 	lds	r24, 0x113D
    5fd2:	8e 8f       	std	Y+30, r24	; 0x1e
        mdr->DisassociateReason = 0x02; // Device wishes to leave the pan.
    5fd4:	82 e0       	ldi	r24, 0x02	; 2
    5fd6:	13 c0       	rjmp	.+38     	; 0x5ffe <zigbee_leave_request+0x9e>
    } else {
        /* Only a ZigBee Coordinator or Router can force other nodes to leave
         * the network.
         */
        if ((ZIGBEE_TYPE_COORD != NWK_NIB_GET_NODE_ROLE()) && 
    5fd8:	f1 50       	subi	r31, 0x01	; 1
    5fda:	f2 30       	cpi	r31, 0x02	; 2
    5fdc:	08 f0       	brcs	.+2      	; 0x5fe0 <zigbee_leave_request+0x80>
    5fde:	3e c0       	rjmp	.+124    	; 0x605c <zigbee_leave_request+0xfc>
        }
        
        /* Check that the node to be relinquished from the network is child of
         * this node, and hence is known in the Neighbor Table.
         */
        zigbee_neighbor_table_item_t *nb_item = zigbee_neighbor_table_find_long(nlr->DeviceAddress);
    5fe0:	0e 94 6f 31 	call	0x62de	; 0x62de <zigbee_neighbor_table_find_long>
        
        if (NULL == nb_item) {
    5fe4:	00 97       	sbiw	r24, 0x00	; 0
    5fe6:	d1 f1       	breq	.+116    	; 0x605c <zigbee_leave_request+0xfc>
            return false;
        } else {
            /* Delete node. */
            zigbee_neighbor_table_delete(nb_item);
    5fe8:	0e 94 0f 31 	call	0x621e	; 0x621e <zigbee_neighbor_table_delete>
            memcpy((void *)(&(mdr->DeviceAddress)), (void *)(&(nlr->DeviceAddress)), sizeof(uint64_t));
    5fec:	de 01       	movw	r26, r28
    5fee:	57 96       	adiw	r26, 0x17	; 23
    5ff0:	fe 01       	movw	r30, r28
    5ff2:	88 e0       	ldi	r24, 0x08	; 8
    5ff4:	01 90       	ld	r0, Z+
    5ff6:	0d 92       	st	X+, r0
    5ff8:	81 50       	subi	r24, 0x01	; 1
    5ffa:	e1 f7       	brne	.-8      	; 0x5ff4 <zigbee_leave_request+0x94>
            mdr->DisassociateReason = 0x01; // Coordinator wishes that device leaves the pan.
    5ffc:	81 e0       	ldi	r24, 0x01	; 1
    5ffe:	8f 8f       	std	Y+31, r24	; 0x1f
     * Coordinator or Router that wishes another node to leave, or a ZigBee
     * End-device that wishes to leave the network. It is time to build the 
     * MLME_DISASSOCIATE.request message, and post it.
     */
    
    mdr->mlme_disassociate_confirm = mac_disassociate_confirm_callback;
    6000:	80 e7       	ldi	r24, 0x70	; 112
    6002:	9f e2       	ldi	r25, 0x2F	; 47
    6004:	99 a3       	std	Y+33, r25	; 0x21
    6006:	88 a3       	std	Y+32, r24	; 0x20
        
    /* Store some local variable that will be used during the confirm part of
     * this primitive.
     */
    nwk_param.leave.nlme_callback_leave_confirm = nlr->nlme_callback_leave_confirm;
    6008:	8c 85       	ldd	r24, Y+12	; 0x0c
    600a:	9d 85       	ldd	r25, Y+13	; 0x0d
    600c:	90 93 3c 12 	sts	0x123C, r25
    6010:	80 93 3b 12 	sts	0x123B, r24
    nwk_param.leave.confirm = &(nlr->nlc);
    6014:	ce 01       	movw	r24, r28
    6016:	0e 96       	adiw	r24, 0x0e	; 14
    6018:	90 93 3e 12 	sts	0x123E, r25
    601c:	80 93 3d 12 	sts	0x123D, r24
    memcpy((void *)(&(nwk_param.leave.node_to_leave)), (void *)(&(nlr->DeviceAddress)), sizeof(uint64_t));
    6020:	ef e3       	ldi	r30, 0x3F	; 63
    6022:	f2 e1       	ldi	r31, 0x12	; 18
    6024:	88 81       	ld	r24, Y
    6026:	80 93 3f 12 	sts	0x123F, r24
    602a:	89 81       	ldd	r24, Y+1	; 0x01
    602c:	81 83       	std	Z+1, r24	; 0x01
    602e:	8a 81       	ldd	r24, Y+2	; 0x02
    6030:	82 83       	std	Z+2, r24	; 0x02
    6032:	8b 81       	ldd	r24, Y+3	; 0x03
    6034:	83 83       	std	Z+3, r24	; 0x03
    6036:	8c 81       	ldd	r24, Y+4	; 0x04
    6038:	84 83       	std	Z+4, r24	; 0x04
    603a:	8d 81       	ldd	r24, Y+5	; 0x05
    603c:	85 83       	std	Z+5, r24	; 0x05
    603e:	8e 81       	ldd	r24, Y+6	; 0x06
    6040:	86 83       	std	Z+6, r24	; 0x06
    6042:	8f 81       	ldd	r24, Y+7	; 0x07
    6044:	87 83       	std	Z+7, r24	; 0x07
    
    bool leave_status = false;
    if (true != ieee802_15_4_disassociate_request(mdr)) {
    6046:	ce 01       	movw	r24, r28
    6048:	47 96       	adiw	r24, 0x17	; 23
    604a:	0e 94 db 20 	call	0x41b6	; 0x41b6 <ieee802_15_4_disassociate_request>
    604e:	88 23       	and	r24, r24
    6050:	29 f0       	breq	.+10     	; 0x605c <zigbee_leave_request+0xfc>
    } else {
        ZIGBEE_NWK_SET_STATE(NWK_LEAVING);       
    6052:	86 e0       	ldi	r24, 0x06	; 6
    6054:	80 93 8f 01 	sts	0x018F, r24
        return true;
    6058:	81 e0       	ldi	r24, 0x01	; 1
    605a:	01 c0       	rjmp	.+2      	; 0x605e <zigbee_leave_request+0xfe>
    }
    
    return leave_status;
    605c:	80 e0       	ldi	r24, 0x00	; 0
}
    605e:	df 91       	pop	r29
    6060:	cf 91       	pop	r28
    6062:	08 95       	ret

00006064 <mac_disassociate_indication_callback>:


/*                            IEEE 802.15.4 MAC Callbacks                     */


void mac_disassociate_indication_callback(mlme_disassociate_ind_t *mdi) {
    6064:	ef 92       	push	r14
    6066:	ff 92       	push	r15
    6068:	0f 93       	push	r16
    606a:	1f 93       	push	r17
    606c:	cf 93       	push	r28
    606e:	df 93       	push	r29
    6070:	ec 01       	movw	r28, r24
    /* This message can be received by a ZigBee Coordinator or Router that a
     * a child ZigBee End-device wishes to leave the network. Or by a ZigBee
     * End-device that is asked to leave the newtork.
     */
    if ((ZIGBEE_TYPE_COORD == NWK_NIB_GET_NODE_ROLE()) ||
    6072:	80 91 55 12 	lds	r24, 0x1255
    6076:	81 50       	subi	r24, 0x01	; 1
    6078:	82 30       	cpi	r24, 0x02	; 2
    607a:	88 f4       	brcc	.+34     	; 0x609e <mac_disassociate_indication_callback+0x3a>
        (ZIGBEE_TYPE_ROUTER == NWK_NIB_GET_NODE_ROLE())) {
        /* The ZigBee Coordinator or Router must remove this node from its
         * Neighbor Table.
         */
        zigbee_neighbor_table_item_t *nb_item = zigbee_neighbor_table_find_long(mdi->DeviceAddress);
    607c:	28 81       	ld	r18, Y
    607e:	39 81       	ldd	r19, Y+1	; 0x01
    6080:	4a 81       	ldd	r20, Y+2	; 0x02
    6082:	5b 81       	ldd	r21, Y+3	; 0x03
    6084:	6c 81       	ldd	r22, Y+4	; 0x04
    6086:	7d 81       	ldd	r23, Y+5	; 0x05
    6088:	8e 81       	ldd	r24, Y+6	; 0x06
    608a:	9f 81       	ldd	r25, Y+7	; 0x07
    608c:	0e 94 6f 31 	call	0x62de	; 0x62de <zigbee_neighbor_table_find_long>
        if (NULL != nb_item) {
    6090:	00 97       	sbiw	r24, 0x00	; 0
    6092:	29 f0       	breq	.+10     	; 0x609e <mac_disassociate_indication_callback+0x3a>
            /* Delete node, and allow joining again. */
            zigbee_neighbor_table_delete(nb_item);
    6094:	0e 94 0f 31 	call	0x621e	; 0x621e <zigbee_neighbor_table_delete>
            IEEE802_15_4_SET_ASSOCIATION_PERMITTED(true);
    6098:	81 e0       	ldi	r24, 0x01	; 1
    609a:	80 93 23 11 	sts	0x1123, r24
    } else {
        /* The ZigBee End-device should reset itself and go to idle. */
    }
    
    /* Now build the NLME_LEAVE_indication and call the appropriate callback. */
    zigbee_leave_indication_t nli_ind = zigbee_get_nlme_leave_indication();
    609e:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <zigbee_get_nlme_leave_indication>
    60a2:	7c 01       	movw	r14, r24
    
    if (NULL == nli_ind) {
    60a4:	00 97       	sbiw	r24, 0x00	; 0
    60a6:	a9 f0       	breq	.+42     	; 0x60d2 <mac_disassociate_indication_callback+0x6e>
        return;
    }
    
    /* Try to allocate some memory to build the indication on. */
    nlme_leave_ind_t *nli = (nlme_leave_ind_t *)MEM_ALLOC(nlme_leave_ind_t);
    60a8:	89 e0       	ldi	r24, 0x09	; 9
    60aa:	90 e0       	ldi	r25, 0x00	; 0
    60ac:	0e 94 cf 28 	call	0x519e	; 0x519e <vrt_mem_alloc>
    60b0:	8c 01       	movw	r16, r24
    
    /* Verify that memory was allocated. */
    if (NULL == nli) {
    60b2:	00 97       	sbiw	r24, 0x00	; 0
    60b4:	71 f0       	breq	.+28     	; 0x60d2 <mac_disassociate_indication_callback+0x6e>
        return;
    }
    
    /* Build indication message. */
    
    memcpy((void *)(&(nli->DeviceAddress)), (void *)(&(mdi->DeviceAddress)), sizeof(uint64_t));
    60b6:	fc 01       	movw	r30, r24
    60b8:	88 e0       	ldi	r24, 0x08	; 8
    60ba:	09 90       	ld	r0, Y+
    60bc:	01 92       	st	Z+, r0
    60be:	81 50       	subi	r24, 0x01	; 1
    60c0:	e1 f7       	brne	.-8      	; 0x60ba <mac_disassociate_indication_callback+0x56>
    nli->Rejoin = false;
    60c2:	f8 01       	movw	r30, r16
    60c4:	10 86       	std	Z+8, r1	; 0x08
    
    /* Execute the callback. */
    nli_ind(nli);
    60c6:	c8 01       	movw	r24, r16
    60c8:	f7 01       	movw	r30, r14
    60ca:	09 95       	icall
    
    /* Release allocated memory. */
    MEM_FREE(nli);
    60cc:	c8 01       	movw	r24, r16
    60ce:	0e 94 1d 29 	call	0x523a	; 0x523a <vrt_mem_free>
}
    60d2:	df 91       	pop	r29
    60d4:	cf 91       	pop	r28
    60d6:	1f 91       	pop	r17
    60d8:	0f 91       	pop	r16
    60da:	ff 90       	pop	r15
    60dc:	ef 90       	pop	r14
    60de:	08 95       	ret

000060e0 <zigbee_neighbor_table_init>:
static uint8_t devices_joined; //!< Total number of end devices the node has joined.
/*================================= PROTOTYPES       =========================*/

void zigbee_neighbor_table_init(void) {
    /* Initialize the linked list. */
    neighbors = 0;
    60e0:	10 92 49 12 	sts	0x1249, r1
    
    last = NULL;
    60e4:	10 92 48 12 	sts	0x1248, r1
    60e8:	10 92 47 12 	sts	0x1247, r1
    first = NULL;
    60ec:	10 92 4b 12 	sts	0x124B, r1
    60f0:	10 92 4a 12 	sts	0x124A, r1
    
    /* Initialize the list of free zigbee_neighbor_table_item_t's */
    free_list = neighbor_table;
    60f4:	e3 e7       	ldi	r30, 0x73	; 115
    60f6:	fd e0       	ldi	r31, 0x0D	; 13
    60f8:	f0 93 72 0d 	sts	0x0D72, r31
    60fc:	e0 93 71 0d 	sts	0x0D71, r30
    zigbee_neighbor_table_item_t **link = (zigbee_neighbor_table_item_t **)neighbor_table;
    zigbee_neighbor_table_item_t *next_item  = (zigbee_neighbor_table_item_t *)((uint16_t)neighbor_table + sizeof(zigbee_neighbor_table_item_t));
    6100:	cf 01       	movw	r24, r30
    6102:	85 96       	adiw	r24, 0x25	; 37
    
    /* Set-up links between the free items in the queue. */
    for (uint8_t i = 0; i < (ZIGBEE_MAX_NMBR_OF_CHILDREN - 1); i++) {
        *link = (zigbee_neighbor_table_item_t *)next_item;
    6104:	91 83       	std	Z+1, r25	; 0x01
    6106:	80 83       	st	Z, r24
    6108:	fc 01       	movw	r30, r24
        link = (zigbee_neighbor_table_item_t **)next_item;
        next_item++;
    610a:	85 96       	adiw	r24, 0x25	; 37
    free_list = neighbor_table;
    zigbee_neighbor_table_item_t **link = (zigbee_neighbor_table_item_t **)neighbor_table;
    zigbee_neighbor_table_item_t *next_item  = (zigbee_neighbor_table_item_t *)((uint16_t)neighbor_table + sizeof(zigbee_neighbor_table_item_t));
    
    /* Set-up links between the free items in the queue. */
    for (uint8_t i = 0; i < (ZIGBEE_MAX_NMBR_OF_CHILDREN - 1); i++) {
    610c:	21 e1       	ldi	r18, 0x11	; 17
    610e:	80 31       	cpi	r24, 0x10	; 16
    6110:	92 07       	cpc	r25, r18
    6112:	c1 f7       	brne	.-16     	; 0x6104 <zigbee_neighbor_table_init+0x24>
        link = (zigbee_neighbor_table_item_t **)next_item;
        next_item++;
    }
    
    /* Set the last link to NULL and the number of free items.  */
    *link = NULL;
    6114:	10 92 ec 10 	sts	0x10EC, r1
    6118:	10 92 eb 10 	sts	0x10EB, r1
    items_in_free_list = ZIGBEE_MAX_NMBR_OF_CHILDREN;
    611c:	89 e1       	ldi	r24, 0x19	; 25
    611e:	80 93 70 0d 	sts	0x0D70, r24
    
    routers_joined = 0;
    6122:	10 92 6f 0d 	sts	0x0D6F, r1
    devices_joined = 0;
    6126:	10 92 6e 0d 	sts	0x0D6E, r1
}
    612a:	08 95       	ret

0000612c <zigbee_neighbor_table_get>:


zigbee_neighbor_table_item_t* zigbee_neighbor_table_get(void) {
    612c:	df 93       	push	r29
    612e:	cf 93       	push	r28
    6130:	0f 92       	push	r0
    6132:	cd b7       	in	r28, 0x3d	; 61
    6134:	de b7       	in	r29, 0x3e	; 62
    /* Check if there is any packets left to allocate. */
    ENTER_CRITICAL_REGION();
    6136:	8f b7       	in	r24, 0x3f	; 63
    6138:	89 83       	std	Y+1, r24	; 0x01
    613a:	f8 94       	cli

    if (0 == items_in_free_list) {
    613c:	20 91 70 0d 	lds	r18, 0x0D70
    6140:	22 23       	and	r18, r18
    6142:	29 f4       	brne	.+10     	; 0x614e <zigbee_neighbor_table_get+0x22>
        LEAVE_CRITICAL_REGION();
    6144:	89 81       	ldd	r24, Y+1	; 0x01
    6146:	8f bf       	out	0x3f, r24	; 63
        return (zigbee_neighbor_table_item_t*)NULL;
    6148:	e0 e0       	ldi	r30, 0x00	; 0
    614a:	f0 e0       	ldi	r31, 0x00	; 0
    614c:	0f c0       	rjmp	.+30     	; 0x616c <zigbee_neighbor_table_get+0x40>
    }
    
    /* Get hold of the first free packet available from the queue. */
    zigbee_neighbor_table_item_t *allocated = free_list;
    614e:	e0 91 71 0d 	lds	r30, 0x0D71
    6152:	f0 91 72 0d 	lds	r31, 0x0D72
    free_list = *(zigbee_neighbor_table_item_t **)allocated;
    6156:	80 81       	ld	r24, Z
    6158:	91 81       	ldd	r25, Z+1	; 0x01
    615a:	90 93 72 0d 	sts	0x0D72, r25
    615e:	80 93 71 0d 	sts	0x0D71, r24
    items_in_free_list--;
    6162:	21 50       	subi	r18, 0x01	; 1
    6164:	20 93 70 0d 	sts	0x0D70, r18
    
    LEAVE_CRITICAL_REGION();
    6168:	89 81       	ldd	r24, Y+1	; 0x01
    616a:	8f bf       	out	0x3f, r24	; 63
    
    return allocated;
}
    616c:	cf 01       	movw	r24, r30
    616e:	0f 90       	pop	r0
    6170:	cf 91       	pop	r28
    6172:	df 91       	pop	r29
    6174:	08 95       	ret

00006176 <zigbee_neighbor_table_put>:


void zigbee_neighbor_table_put(zigbee_neighbor_table_item_t *nb_item) {
    6176:	df 93       	push	r29
    6178:	cf 93       	push	r28
    617a:	0f 92       	push	r0
    617c:	cd b7       	in	r28, 0x3d	; 61
    617e:	de b7       	in	r29, 0x3e	; 62
    /* Check if all memory already has been freed, and that it is not NULL. */
    ENTER_CRITICAL_REGION();
    6180:	2f b7       	in	r18, 0x3f	; 63
    6182:	29 83       	std	Y+1, r18	; 0x01
    6184:	f8 94       	cli
    if (ZIGBEE_MAX_NMBR_OF_CHILDREN == items_in_free_list) {
    6186:	40 91 70 0d 	lds	r20, 0x0D70
    618a:	49 31       	cpi	r20, 0x19	; 25
    618c:	81 f0       	breq	.+32     	; 0x61ae <zigbee_neighbor_table_put+0x38>
        LEAVE_CRITICAL_REGION();
        return;
    }
    
    if (((zigbee_neighbor_table_item_t *)NULL) == nb_item) {
    618e:	00 97       	sbiw	r24, 0x00	; 0
    6190:	71 f0       	breq	.+28     	; 0x61ae <zigbee_neighbor_table_put+0x38>
        LEAVE_CRITICAL_REGION();
        return;
    }
    
    /* There is room for this packet. Added it to the list of free packets. */
    *(zigbee_neighbor_table_item_t **)nb_item = free_list;
    6192:	20 91 71 0d 	lds	r18, 0x0D71
    6196:	30 91 72 0d 	lds	r19, 0x0D72
    619a:	fc 01       	movw	r30, r24
    619c:	31 83       	std	Z+1, r19	; 0x01
    619e:	20 83       	st	Z, r18
    free_list = nb_item;
    61a0:	90 93 72 0d 	sts	0x0D72, r25
    61a4:	80 93 71 0d 	sts	0x0D71, r24
    items_in_free_list++;
    61a8:	4f 5f       	subi	r20, 0xFF	; 255
    61aa:	40 93 70 0d 	sts	0x0D70, r20
    LEAVE_CRITICAL_REGION();
    61ae:	89 81       	ldd	r24, Y+1	; 0x01
    61b0:	8f bf       	out	0x3f, r24	; 63
}
    61b2:	0f 90       	pop	r0
    61b4:	cf 91       	pop	r28
    61b6:	df 91       	pop	r29
    61b8:	08 95       	ret

000061ba <zigbee_neighbor_table_append>:


void zigbee_neighbor_table_append(zigbee_neighbor_table_item_t *nb_item) {
    61ba:	df 93       	push	r29
    61bc:	cf 93       	push	r28
    61be:	0f 92       	push	r0
    61c0:	cd b7       	in	r28, 0x3d	; 61
    61c2:	de b7       	in	r29, 0x3e	; 62
    61c4:	fc 01       	movw	r30, r24
    if (NULL == nb_item) { return; }
    61c6:	00 97       	sbiw	r24, 0x00	; 0
    61c8:	31 f1       	breq	.+76     	; 0x6216 <zigbee_neighbor_table_append+0x5c>
    
    /* Insert at the end of the neighbor table. */
    ENTER_CRITICAL_REGION();
    61ca:	8f b7       	in	r24, 0x3f	; 63
    61cc:	89 83       	std	Y+1, r24	; 0x01
    61ce:	f8 94       	cli
    
    if (NULL == last) {
    61d0:	a0 91 47 12 	lds	r26, 0x1247
    61d4:	b0 91 48 12 	lds	r27, 0x1248
    61d8:	10 97       	sbiw	r26, 0x00	; 0
    61da:	59 f4       	brne	.+22     	; 0x61f2 <zigbee_neighbor_table_append+0x38>
        last = nb_item;
    61dc:	f0 93 48 12 	sts	0x1248, r31
    61e0:	e0 93 47 12 	sts	0x1247, r30
        first = nb_item;
    61e4:	f0 93 4b 12 	sts	0x124B, r31
    61e8:	e0 93 4a 12 	sts	0x124A, r30
        
        nb_item->prev = NULL;
    61ec:	13 82       	std	Z+3, r1	; 0x03
    61ee:	12 82       	std	Z+2, r1	; 0x02
    61f0:	09 c0       	rjmp	.+18     	; 0x6204 <zigbee_neighbor_table_append+0x4a>
    } else {
        last->next = nb_item;
    61f2:	11 96       	adiw	r26, 0x01	; 1
    61f4:	fc 93       	st	X, r31
    61f6:	ee 93       	st	-X, r30
        nb_item->prev = last;
    61f8:	b3 83       	std	Z+3, r27	; 0x03
    61fa:	a2 83       	std	Z+2, r26	; 0x02
        last = nb_item;
    61fc:	f0 93 48 12 	sts	0x1248, r31
    6200:	e0 93 47 12 	sts	0x1247, r30
    }
    
    nb_item->next = NULL;
    6204:	11 82       	std	Z+1, r1	; 0x01
    6206:	10 82       	st	Z, r1
    
    LEAVE_CRITICAL_REGION();
    6208:	89 81       	ldd	r24, Y+1	; 0x01
    620a:	8f bf       	out	0x3f, r24	; 63
    neighbors++;
    620c:	80 91 49 12 	lds	r24, 0x1249
    6210:	8f 5f       	subi	r24, 0xFF	; 255
    6212:	80 93 49 12 	sts	0x1249, r24
}
    6216:	0f 90       	pop	r0
    6218:	cf 91       	pop	r28
    621a:	df 91       	pop	r29
    621c:	08 95       	ret

0000621e <zigbee_neighbor_table_delete>:


void zigbee_neighbor_table_delete(zigbee_neighbor_table_item_t *nb_item) {
    621e:	df 93       	push	r29
    6220:	cf 93       	push	r28
    6222:	0f 92       	push	r0
    6224:	cd b7       	in	r28, 0x3d	; 61
    6226:	de b7       	in	r29, 0x3e	; 62
    6228:	fc 01       	movw	r30, r24
    if (NULL == nb_item) {
    622a:	00 97       	sbiw	r24, 0x00	; 0
    622c:	c9 f1       	breq	.+114    	; 0x62a0 <zigbee_neighbor_table_delete+0x82>
        return;
    }
    
    ENTER_CRITICAL_REGION();
    622e:	8f b7       	in	r24, 0x3f	; 63
    6230:	89 83       	std	Y+1, r24	; 0x01
    6232:	f8 94       	cli
    
    if (ZIGBEE_TYPE_ROUTER == (nb_item->DeviceType)) {
    6234:	86 8d       	ldd	r24, Z+30	; 0x1e
    6236:	82 30       	cpi	r24, 0x02	; 2
    6238:	31 f4       	brne	.+12     	; 0x6246 <zigbee_neighbor_table_delete+0x28>
        routers_joined--;          
    623a:	80 91 6f 0d 	lds	r24, 0x0D6F
    623e:	81 50       	subi	r24, 0x01	; 1
    6240:	80 93 6f 0d 	sts	0x0D6F, r24
    6244:	05 c0       	rjmp	.+10     	; 0x6250 <zigbee_neighbor_table_delete+0x32>
    } else {
        devices_joined--;      
    6246:	80 91 6e 0d 	lds	r24, 0x0D6E
    624a:	81 50       	subi	r24, 0x01	; 1
    624c:	80 93 6e 0d 	sts	0x0D6E, r24
    }
    
    if (NULL == (nb_item->prev)) {
    6250:	22 81       	ldd	r18, Z+2	; 0x02
    6252:	33 81       	ldd	r19, Z+3	; 0x03
    6254:	80 81       	ld	r24, Z
    6256:	91 81       	ldd	r25, Z+1	; 0x01
    6258:	21 15       	cp	r18, r1
    625a:	31 05       	cpc	r19, r1
    625c:	29 f4       	brne	.+10     	; 0x6268 <zigbee_neighbor_table_delete+0x4a>
        first = nb_item->next;
    625e:	90 93 4b 12 	sts	0x124B, r25
    6262:	80 93 4a 12 	sts	0x124A, r24
    6266:	04 c0       	rjmp	.+8      	; 0x6270 <zigbee_neighbor_table_delete+0x52>
    } else {
        nb_item->prev->next = nb_item->next;    
    6268:	d9 01       	movw	r26, r18
    626a:	11 96       	adiw	r26, 0x01	; 1
    626c:	9c 93       	st	X, r25
    626e:	8e 93       	st	-X, r24
    }
    
    if (NULL == (nb_item->next)) {
    6270:	80 81       	ld	r24, Z
    6272:	91 81       	ldd	r25, Z+1	; 0x01
    6274:	00 97       	sbiw	r24, 0x00	; 0
    6276:	29 f4       	brne	.+10     	; 0x6282 <zigbee_neighbor_table_delete+0x64>
        last = nb_item->prev;
    6278:	30 93 48 12 	sts	0x1248, r19
    627c:	20 93 47 12 	sts	0x1247, r18
    6280:	05 c0       	rjmp	.+10     	; 0x628c <zigbee_neighbor_table_delete+0x6e>
    } else {
        nb_item->next->prev = nb_item->prev;
    6282:	dc 01       	movw	r26, r24
    6284:	13 96       	adiw	r26, 0x03	; 3
    6286:	3c 93       	st	X, r19
    6288:	2e 93       	st	-X, r18
    628a:	12 97       	sbiw	r26, 0x02	; 2
    }
    
    LEAVE_CRITICAL_REGION();
    628c:	89 81       	ldd	r24, Y+1	; 0x01
    628e:	8f bf       	out	0x3f, r24	; 63
    
    neighbors--;
    6290:	80 91 49 12 	lds	r24, 0x1249
    6294:	81 50       	subi	r24, 0x01	; 1
    6296:	80 93 49 12 	sts	0x1249, r24
    
    /* Free the item as well into the list of free Neighbor Table Items. */
    zigbee_neighbor_table_put(nb_item);
    629a:	cf 01       	movw	r24, r30
    629c:	0e 94 bb 30 	call	0x6176	; 0x6176 <zigbee_neighbor_table_put>
}
    62a0:	0f 90       	pop	r0
    62a2:	cf 91       	pop	r28
    62a4:	df 91       	pop	r29
    62a6:	08 95       	ret

000062a8 <zigbee_neighbor_table_find>:


zigbee_neighbor_table_item_t *zigbee_neighbor_table_find(uint16_t short_address) {
    if (0 == neighbors) {
    62a8:	50 91 49 12 	lds	r21, 0x1249
    62ac:	55 23       	and	r21, r21
    62ae:	89 f0       	breq	.+34     	; 0x62d2 <zigbee_neighbor_table_find+0x2a>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    zigbee_neighbor_table_item_t *link = first;
    62b0:	e0 91 4a 12 	lds	r30, 0x124A
    62b4:	f0 91 4b 12 	lds	r31, 0x124B
    
    zigbee_neighbor_table_item_t *scan_result = NULL;
    for(uint8_t i = 0; i < neighbors; i++) {
    62b8:	40 e0       	ldi	r20, 0x00	; 0
    62ba:	09 c0       	rjmp	.+18     	; 0x62ce <zigbee_neighbor_table_find+0x26>
        if (short_address == (link->NetworkAddress)) {
    62bc:	24 8d       	ldd	r18, Z+28	; 0x1c
    62be:	35 8d       	ldd	r19, Z+29	; 0x1d
    62c0:	82 17       	cp	r24, r18
    62c2:	93 07       	cpc	r25, r19
    62c4:	49 f0       	breq	.+18     	; 0x62d8 <zigbee_neighbor_table_find+0x30>
            scan_result = link;
            break;
        }
        
        link = link->next;
    62c6:	01 90       	ld	r0, Z+
    62c8:	f0 81       	ld	r31, Z
    62ca:	e0 2d       	mov	r30, r0
    }
    
    zigbee_neighbor_table_item_t *link = first;
    
    zigbee_neighbor_table_item_t *scan_result = NULL;
    for(uint8_t i = 0; i < neighbors; i++) {
    62cc:	4f 5f       	subi	r20, 0xFF	; 255
    62ce:	45 17       	cp	r20, r21
    62d0:	a8 f3       	brcs	.-22     	; 0x62bc <zigbee_neighbor_table_find+0x14>
}


zigbee_neighbor_table_item_t *zigbee_neighbor_table_find(uint16_t short_address) {
    if (0 == neighbors) {
        return (zigbee_neighbor_table_item_t *)NULL;
    62d2:	20 e0       	ldi	r18, 0x00	; 0
    62d4:	30 e0       	ldi	r19, 0x00	; 0
    62d6:	01 c0       	rjmp	.+2      	; 0x62da <zigbee_neighbor_table_find+0x32>
    
    zigbee_neighbor_table_item_t *link = first;
    
    zigbee_neighbor_table_item_t *scan_result = NULL;
    for(uint8_t i = 0; i < neighbors; i++) {
        if (short_address == (link->NetworkAddress)) {
    62d8:	9f 01       	movw	r18, r30
        
        link = link->next;
    }
    
    return scan_result;
}
    62da:	c9 01       	movw	r24, r18
    62dc:	08 95       	ret

000062de <zigbee_neighbor_table_find_long>:


zigbee_neighbor_table_item_t *zigbee_neighbor_table_find_long(uint64_t long_address) {
    62de:	1f 93       	push	r17
    if (0 == neighbors) {
    62e0:	b0 91 49 12 	lds	r27, 0x1249
    62e4:	bb 23       	and	r27, r27
    62e6:	21 f1       	breq	.+72     	; 0x6330 <zigbee_neighbor_table_find_long+0x52>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    zigbee_neighbor_table_item_t *link = first;
    62e8:	e0 91 4a 12 	lds	r30, 0x124A
    62ec:	f0 91 4b 12 	lds	r31, 0x124B
    
    zigbee_neighbor_table_item_t *scan_result = (zigbee_neighbor_table_item_t *)NULL;
    for(uint8_t i = 0; i < neighbors; i++) {
    62f0:	a0 e0       	ldi	r26, 0x00	; 0
    62f2:	1c c0       	rjmp	.+56     	; 0x632c <zigbee_neighbor_table_find_long+0x4e>
        if (long_address == (link->ExtendedAddress)) {
    62f4:	14 89       	ldd	r17, Z+20	; 0x14
    62f6:	12 17       	cp	r17, r18
    62f8:	a9 f4       	brne	.+42     	; 0x6324 <zigbee_neighbor_table_find_long+0x46>
    62fa:	15 89       	ldd	r17, Z+21	; 0x15
    62fc:	13 17       	cp	r17, r19
    62fe:	91 f4       	brne	.+36     	; 0x6324 <zigbee_neighbor_table_find_long+0x46>
    6300:	16 89       	ldd	r17, Z+22	; 0x16
    6302:	14 17       	cp	r17, r20
    6304:	79 f4       	brne	.+30     	; 0x6324 <zigbee_neighbor_table_find_long+0x46>
    6306:	17 89       	ldd	r17, Z+23	; 0x17
    6308:	15 17       	cp	r17, r21
    630a:	61 f4       	brne	.+24     	; 0x6324 <zigbee_neighbor_table_find_long+0x46>
    630c:	10 8d       	ldd	r17, Z+24	; 0x18
    630e:	16 17       	cp	r17, r22
    6310:	49 f4       	brne	.+18     	; 0x6324 <zigbee_neighbor_table_find_long+0x46>
    6312:	11 8d       	ldd	r17, Z+25	; 0x19
    6314:	17 17       	cp	r17, r23
    6316:	31 f4       	brne	.+12     	; 0x6324 <zigbee_neighbor_table_find_long+0x46>
    6318:	12 8d       	ldd	r17, Z+26	; 0x1a
    631a:	18 17       	cp	r17, r24
    631c:	19 f4       	brne	.+6      	; 0x6324 <zigbee_neighbor_table_find_long+0x46>
    631e:	13 8d       	ldd	r17, Z+27	; 0x1b
    6320:	19 17       	cp	r17, r25
    6322:	49 f0       	breq	.+18     	; 0x6336 <zigbee_neighbor_table_find_long+0x58>
            scan_result = link;
            break;
        }
        
        link = link->next;
    6324:	01 90       	ld	r0, Z+
    6326:	f0 81       	ld	r31, Z
    6328:	e0 2d       	mov	r30, r0
    }
    
    zigbee_neighbor_table_item_t *link = first;
    
    zigbee_neighbor_table_item_t *scan_result = (zigbee_neighbor_table_item_t *)NULL;
    for(uint8_t i = 0; i < neighbors; i++) {
    632a:	af 5f       	subi	r26, 0xFF	; 255
    632c:	ab 17       	cp	r26, r27
    632e:	10 f3       	brcs	.-60     	; 0x62f4 <zigbee_neighbor_table_find_long+0x16>
}


zigbee_neighbor_table_item_t *zigbee_neighbor_table_find_long(uint64_t long_address) {
    if (0 == neighbors) {
        return (zigbee_neighbor_table_item_t *)NULL;
    6330:	20 e0       	ldi	r18, 0x00	; 0
    6332:	30 e0       	ldi	r19, 0x00	; 0
    6334:	01 c0       	rjmp	.+2      	; 0x6338 <zigbee_neighbor_table_find_long+0x5a>
    
    zigbee_neighbor_table_item_t *link = first;
    
    zigbee_neighbor_table_item_t *scan_result = (zigbee_neighbor_table_item_t *)NULL;
    for(uint8_t i = 0; i < neighbors; i++) {
        if (long_address == (link->ExtendedAddress)) {
    6336:	9f 01       	movw	r18, r30
        
        link = link->next;
    }
    
    return scan_result;
}
    6338:	c9 01       	movw	r24, r18
    633a:	1f 91       	pop	r17
    633c:	08 95       	ret

0000633e <zigbee_neighbor_table_add_router>:


zigbee_neighbor_table_item_t *zigbee_neighbor_table_add_router(void) {
    633e:	ef 92       	push	r14
    6340:	ff 92       	push	r15
    6342:	0f 93       	push	r16
    6344:	1f 93       	push	r17
    6346:	cf 93       	push	r28
    6348:	df 93       	push	r29
    if (ZIGBEE_MAX_NMBR_OF_CHILDREN <= (devices_joined + routers_joined)) {
    634a:	20 91 6f 0d 	lds	r18, 0x0D6F
    634e:	80 91 6e 0d 	lds	r24, 0x0D6E
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	82 0f       	add	r24, r18
    6356:	91 1d       	adc	r25, r1
    6358:	89 31       	cpi	r24, 0x19	; 25
    635a:	91 05       	cpc	r25, r1
    635c:	54 f5       	brge	.+84     	; 0x63b2 <zigbee_neighbor_table_add_router+0x74>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    if (ZIGBEE_MAX_NMBR_OF_ROUTERS <= routers_joined) {
    635e:	22 23       	and	r18, r18
    6360:	41 f5       	brne	.+80     	; 0x63b2 <zigbee_neighbor_table_add_router+0x74>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    zigbee_neighbor_table_item_t *router = zigbee_neighbor_table_get();
    6362:	0e 94 96 30 	call	0x612c	; 0x612c <zigbee_neighbor_table_get>
    6366:	ec 01       	movw	r28, r24
    
    if (NULL == router) {
    6368:	00 97       	sbiw	r24, 0x00	; 0
    636a:	29 f1       	breq	.+74     	; 0x63b6 <zigbee_neighbor_table_add_router+0x78>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    /* Allocate short address. */
    uint16_t router_address = 1 + NWK_NIB_GET_NWK_ADDRESS();
    636c:	00 91 67 12 	lds	r16, 0x1267
    6370:	10 91 68 12 	lds	r17, 0x1268
    6374:	0f 5f       	subi	r16, 0xFF	; 255
    6376:	1f 4f       	sbci	r17, 0xFF	; 255
    
    /* Look for potential holes in the tree addressing scheme. Ex. a node that  */
    for (uint8_t i = 0; i < routers_joined; i++) {
    6378:	ff 24       	eor	r15, r15
    637a:	0c c0       	rjmp	.+24     	; 0x6394 <zigbee_neighbor_table_add_router+0x56>
        zigbee_neighbor_table_item_t *this_device = zigbee_neighbor_table_find(router_address);
    637c:	c8 01       	movw	r24, r16
    637e:	0e 94 54 31 	call	0x62a8	; 0x62a8 <zigbee_neighbor_table_find>
            
        if (NULL == this_device) {
    6382:	00 97       	sbiw	r24, 0x00	; 0
    6384:	59 f0       	breq	.+22     	; 0x639c <zigbee_neighbor_table_add_router+0x5e>
            break;
        }
        
        router_address += NWK_NIB_GET_ADDRESS_INCREMENT();
    6386:	80 91 53 12 	lds	r24, 0x1253
    638a:	90 91 54 12 	lds	r25, 0x1254
    638e:	08 0f       	add	r16, r24
    6390:	19 1f       	adc	r17, r25
    
    /* Allocate short address. */
    uint16_t router_address = 1 + NWK_NIB_GET_NWK_ADDRESS();
    
    /* Look for potential holes in the tree addressing scheme. Ex. a node that  */
    for (uint8_t i = 0; i < routers_joined; i++) {
    6392:	f3 94       	inc	r15
    6394:	e0 90 6f 0d 	lds	r14, 0x0D6F
    6398:	fe 14       	cp	r15, r14
    639a:	80 f3       	brcs	.-32     	; 0x637c <zigbee_neighbor_table_add_router+0x3e>
        
        router_address += NWK_NIB_GET_ADDRESS_INCREMENT();
    }
    
    /* Set address and router information. */
    router->NetworkAddress = router_address;
    639c:	1d 8f       	std	Y+29, r17	; 0x1d
    639e:	0c 8f       	std	Y+28, r16	; 0x1c
    router->DeviceType = ZIGBEE_TYPE_ROUTER;
    63a0:	82 e0       	ldi	r24, 0x02	; 2
    63a2:	8e 8f       	std	Y+30, r24	; 0x1e
        
    /* Update number of routers joined. */
    routers_joined++;
    63a4:	e3 94       	inc	r14
    63a6:	e0 92 6f 0d 	sts	0x0D6F, r14
        
    /* Add the router to the Neighbor Table. */
    zigbee_neighbor_table_append(router);
    63aa:	ce 01       	movw	r24, r28
    63ac:	0e 94 dd 30 	call	0x61ba	; 0x61ba <zigbee_neighbor_table_append>
    
    return router;
    63b0:	02 c0       	rjmp	.+4      	; 0x63b6 <zigbee_neighbor_table_add_router+0x78>
    if (ZIGBEE_MAX_NMBR_OF_CHILDREN <= (devices_joined + routers_joined)) {
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    if (ZIGBEE_MAX_NMBR_OF_ROUTERS <= routers_joined) {
        return (zigbee_neighbor_table_item_t *)NULL;
    63b2:	c0 e0       	ldi	r28, 0x00	; 0
    63b4:	d0 e0       	ldi	r29, 0x00	; 0
        
    /* Add the router to the Neighbor Table. */
    zigbee_neighbor_table_append(router);
    
    return router;
}
    63b6:	ce 01       	movw	r24, r28
    63b8:	df 91       	pop	r29
    63ba:	cf 91       	pop	r28
    63bc:	1f 91       	pop	r17
    63be:	0f 91       	pop	r16
    63c0:	ff 90       	pop	r15
    63c2:	ef 90       	pop	r14
    63c4:	08 95       	ret

000063c6 <zigbee_neighbor_table_add_device>:


zigbee_neighbor_table_item_t *zigbee_neighbor_table_add_device(void) {
    63c6:	ef 92       	push	r14
    63c8:	ff 92       	push	r15
    63ca:	0f 93       	push	r16
    63cc:	1f 93       	push	r17
    63ce:	cf 93       	push	r28
    63d0:	df 93       	push	r29
    if (ZIGBEE_MAX_NMBR_OF_CHILDREN <= (devices_joined + routers_joined)) {
    63d2:	20 91 6f 0d 	lds	r18, 0x0D6F
    63d6:	80 91 6e 0d 	lds	r24, 0x0D6E
    63da:	90 e0       	ldi	r25, 0x00	; 0
    63dc:	82 0f       	add	r24, r18
    63de:	91 1d       	adc	r25, r1
    63e0:	89 31       	cpi	r24, 0x19	; 25
    63e2:	91 05       	cpc	r25, r1
    63e4:	4c f5       	brge	.+82     	; 0x6438 <zigbee_neighbor_table_add_device+0x72>
        return (zigbee_neighbor_table_item_t *)NULL;
    }
    
    zigbee_neighbor_table_item_t *device = zigbee_neighbor_table_get();
    63e6:	0e 94 96 30 	call	0x612c	; 0x612c <zigbee_neighbor_table_get>
    63ea:	8c 01       	movw	r16, r24
    
    if (NULL == device) {
    63ec:	00 97       	sbiw	r24, 0x00	; 0
    63ee:	31 f1       	breq	.+76     	; 0x643c <zigbee_neighbor_table_add_device+0x76>
        return device;
    }
    
    /* Allocate short address. */
    uint16_t device_address = 1 + NWK_NIB_GET_NWK_ADDRESS() + \
    63f0:	c0 91 67 12 	lds	r28, 0x1267
    63f4:	d0 91 68 12 	lds	r29, 0x1268
    63f8:	80 91 53 12 	lds	r24, 0x1253
    63fc:	90 91 54 12 	lds	r25, 0x1254
    6400:	c8 0f       	add	r28, r24
    6402:	d9 1f       	adc	r29, r25
    6404:	21 96       	adiw	r28, 0x01	; 1
                              (NWK_NIB_GET_ADDRESS_INCREMENT() * ZIGBEE_MAX_NMBR_OF_ROUTERS);
        
    /* Look for potential holes in the tree addressing scheme. Ex. a node that  */
    for (uint8_t i = 0; i < devices_joined; i++) {
    6406:	ff 24       	eor	r15, r15
    6408:	07 c0       	rjmp	.+14     	; 0x6418 <zigbee_neighbor_table_add_device+0x52>
        zigbee_neighbor_table_item_t *this_device = zigbee_neighbor_table_find(device_address);
    640a:	ce 01       	movw	r24, r28
    640c:	0e 94 54 31 	call	0x62a8	; 0x62a8 <zigbee_neighbor_table_find>
            
        if (NULL == this_device) {
    6410:	00 97       	sbiw	r24, 0x00	; 0
    6412:	31 f0       	breq	.+12     	; 0x6420 <zigbee_neighbor_table_add_device+0x5a>
            break;
        }
        
        device_address++;
    6414:	21 96       	adiw	r28, 0x01	; 1
    /* Allocate short address. */
    uint16_t device_address = 1 + NWK_NIB_GET_NWK_ADDRESS() + \
                              (NWK_NIB_GET_ADDRESS_INCREMENT() * ZIGBEE_MAX_NMBR_OF_ROUTERS);
        
    /* Look for potential holes in the tree addressing scheme. Ex. a node that  */
    for (uint8_t i = 0; i < devices_joined; i++) {
    6416:	f3 94       	inc	r15
    6418:	e0 90 6e 0d 	lds	r14, 0x0D6E
    641c:	fe 14       	cp	r15, r14
    641e:	a8 f3       	brcs	.-22     	; 0x640a <zigbee_neighbor_table_add_device+0x44>
        }
        
        device_address++;
    }
    
    device->NetworkAddress = device_address;
    6420:	f8 01       	movw	r30, r16
    6422:	d5 8f       	std	Z+29, r29	; 0x1d
    6424:	c4 8f       	std	Z+28, r28	; 0x1c
    device->DeviceType = ZIGBEE_TYPE_DEVICE;
    6426:	83 e0       	ldi	r24, 0x03	; 3
    6428:	86 8f       	std	Z+30, r24	; 0x1e
        
    /* Update number of devices joined. */
    devices_joined++;
    642a:	e3 94       	inc	r14
    642c:	e0 92 6e 0d 	sts	0x0D6E, r14
        
    /* Add the router to the Neighbor Table. */
    zigbee_neighbor_table_append(device);
    6430:	c8 01       	movw	r24, r16
    6432:	0e 94 dd 30 	call	0x61ba	; 0x61ba <zigbee_neighbor_table_append>
    
    return device;
    6436:	02 c0       	rjmp	.+4      	; 0x643c <zigbee_neighbor_table_add_device+0x76>
}


zigbee_neighbor_table_item_t *zigbee_neighbor_table_add_device(void) {
    if (ZIGBEE_MAX_NMBR_OF_CHILDREN <= (devices_joined + routers_joined)) {
        return (zigbee_neighbor_table_item_t *)NULL;
    6438:	00 e0       	ldi	r16, 0x00	; 0
    643a:	10 e0       	ldi	r17, 0x00	; 0
        
    /* Add the router to the Neighbor Table. */
    zigbee_neighbor_table_append(device);
    
    return device;
}
    643c:	c8 01       	movw	r24, r16
    643e:	df 91       	pop	r29
    6440:	cf 91       	pop	r28
    6442:	1f 91       	pop	r17
    6444:	0f 91       	pop	r16
    6446:	ff 90       	pop	r15
    6448:	ef 90       	pop	r14
    644a:	08 95       	ret

0000644c <zigbee_neighbor_table_find_depth>:
#if (ZIGBEE_MAX_NMBR_OF_ROUTERS == 0)
    return 1;
#else
    /* Check if the parent is the network coordinator. */
    if (0x0000 == parent_address) {
        return 1;
    644c:	21 e0       	ldi	r18, 0x01	; 1
    644e:	00 97       	sbiw	r24, 0x00	; 0
    6450:	09 f0       	breq	.+2      	; 0x6454 <zigbee_neighbor_table_find_depth+0x8>
    6452:	20 e0       	ldi	r18, 0x00	; 0
        }
    }
    
    return 0;
#endif
}
    6454:	82 2f       	mov	r24, r18
    6456:	08 95       	ret

00006458 <zigbee_nib_init>:
zigbee_device_t nwkRole;
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

void zigbee_nib_init(void) {
    nwkPassiveAckTimeout = 0x03;
    6458:	83 e0       	ldi	r24, 0x03	; 3
    645a:	80 93 6d 12 	sts	0x126D, r24
    nwkMaxBroadcastRetries = 0x03;
    645e:	80 93 4e 12 	sts	0x124E, r24
    nwkReportConstantCost = false;
    6462:	10 92 66 12 	sts	0x1266, r1
    nwkRouteDiscoveryRetriesPermitted = NWK_DISCOVERY_RETRY_LIMIT;
    6466:	80 93 63 12 	sts	0x1263, r24
    nwkSymLink = false;
    646a:	10 92 6a 12 	sts	0x126A, r1
    nwkCapabilityInformation = 0x00;
    646e:	10 92 62 12 	sts	0x1262, r1
    nwkUseTreeAddrAlloc = true;
    6472:	81 e0       	ldi	r24, 0x01	; 1
    6474:	80 93 64 12 	sts	0x1264, r24
    nwkUseTreeRouting = true;
    6478:	80 93 5e 12 	sts	0x125E, r24
    nwkNextAddress = 0x0000;
    647c:	10 92 50 12 	sts	0x1250, r1
    6480:	10 92 4f 12 	sts	0x124F, r1
    nwkAvailableAddresses = 0x0000;
    6484:	10 92 61 12 	sts	0x1261, r1
    6488:	10 92 60 12 	sts	0x1260, r1
    nwkAddressIncrement = 0x0001;
    648c:	81 e0       	ldi	r24, 0x01	; 1
    648e:	90 e0       	ldi	r25, 0x00	; 0
    6490:	90 93 54 12 	sts	0x1254, r25
    6494:	80 93 53 12 	sts	0x1253, r24
    nwkTransactionPersistenceTime = 0x01f4;
    6498:	84 ef       	ldi	r24, 0xF4	; 244
    649a:	91 e0       	ldi	r25, 0x01	; 1
    649c:	90 93 4d 12 	sts	0x124D, r25
    64a0:	80 93 4c 12 	sts	0x124C, r24
    nwkShortAddress = 0xFFFF;
    64a4:	8f ef       	ldi	r24, 0xFF	; 255
    64a6:	9f ef       	ldi	r25, 0xFF	; 255
    64a8:	90 93 68 12 	sts	0x1268, r25
    64ac:	80 93 67 12 	sts	0x1267, r24
    nwkStackProfile = 0;
    64b0:	10 92 5f 12 	sts	0x125F, r1
    nwkExtendedPANID = 0x0000000000000000;
    64b4:	10 92 56 12 	sts	0x1256, r1
    64b8:	10 92 57 12 	sts	0x1257, r1
    64bc:	10 92 58 12 	sts	0x1258, r1
    64c0:	10 92 59 12 	sts	0x1259, r1
    64c4:	10 92 5a 12 	sts	0x125A, r1
    64c8:	10 92 5b 12 	sts	0x125B, r1
    64cc:	10 92 5c 12 	sts	0x125C, r1
    64d0:	10 92 5d 12 	sts	0x125D, r1
    
    c_skip_parent = 0;
    64d4:	10 92 52 12 	sts	0x1252, r1
    64d8:	10 92 51 12 	sts	0x1251, r1
    nwkRole = ZIGBEE_TYPE_UNKNOWN;
    64dc:	10 92 55 12 	sts	0x1255, r1
}
    64e0:	08 95       	ret

000064e2 <zigbee_nib_c_skip>:


uint16_t zigbee_nib_c_skip(uint8_t depth) {
    if (ZIGBEE_MAX_NMBR_OF_ROUTERS == depth) { return 0; }
    64e2:	81 30       	cpi	r24, 0x01	; 1
    64e4:	69 f0       	breq	.+26     	; 0x6500 <zigbee_nib_c_skip+0x1e>
    
    uint16_t c_skip = 0;
    
#if (1 == ZIGBEE_MAX_NMBR_OF_ROUTERS)
        c_skip = 1 + (ZIGBEE_MAX_NMBR_OF_CHILDREN * (ZIGBEE_MAX_NMBR_OF_ROUTERS - depth - 1));
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	47 ee       	ldi	r20, 0xE7	; 231
    64ea:	5f ef       	ldi	r21, 0xFF	; 255
    64ec:	84 9f       	mul	r24, r20
    64ee:	90 01       	movw	r18, r0
    64f0:	85 9f       	mul	r24, r21
    64f2:	30 0d       	add	r19, r0
    64f4:	94 9f       	mul	r25, r20
    64f6:	30 0d       	add	r19, r0
    64f8:	11 24       	eor	r1, r1
    64fa:	2f 5f       	subi	r18, 0xFF	; 255
    64fc:	3f 4f       	sbci	r19, 0xFF	; 255
        c_skip *= ZIGBEE_MAX_NMBR_OF_CHILDREN;
        c_skip /= ZIGBEE_MAX_NMBR_OF_ROUTERS - 1;
        c_skip += 1;
#endif
    
    return c_skip;
    64fe:	02 c0       	rjmp	.+4      	; 0x6504 <zigbee_nib_c_skip+0x22>
    nwkRole = ZIGBEE_TYPE_UNKNOWN;
}


uint16_t zigbee_nib_c_skip(uint8_t depth) {
    if (ZIGBEE_MAX_NMBR_OF_ROUTERS == depth) { return 0; }
    6500:	20 e0       	ldi	r18, 0x00	; 0
    6502:	30 e0       	ldi	r19, 0x00	; 0
        c_skip /= ZIGBEE_MAX_NMBR_OF_ROUTERS - 1;
        c_skip += 1;
#endif
    
    return c_skip;
}
    6504:	c9 01       	movw	r24, r18
    6506:	08 95       	ret

00006508 <zigbee_permit_joining>:
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

bool zigbee_permit_joining(bool join_permitted) {
    /* Check that the device is operating either as router or coordinator. */
    if ((NWK_FORMED != ZIGBEE_NWK_GET_STATE()) && 
    6508:	90 91 8f 01 	lds	r25, 0x018F
    650c:	93 50       	subi	r25, 0x03	; 3
    650e:	92 30       	cpi	r25, 0x02	; 2
    6510:	20 f4       	brcc	.+8      	; 0x651a <zigbee_permit_joining+0x12>
        (NWK_STARTED != ZIGBEE_NWK_GET_STATE())) {
        return false;
    }
    
    /* Set the Associate Permitted flag in the IEEE 802.15.4 MAC. */
    IEEE802_15_4_SET_ASSOCIATION_PERMITTED(join_permitted);
    6512:	80 93 23 11 	sts	0x1123, r24
    return true;
    6516:	81 e0       	ldi	r24, 0x01	; 1
    6518:	08 95       	ret

bool zigbee_permit_joining(bool join_permitted) {
    /* Check that the device is operating either as router or coordinator. */
    if ((NWK_FORMED != ZIGBEE_NWK_GET_STATE()) && 
        (NWK_STARTED != ZIGBEE_NWK_GET_STATE())) {
        return false;
    651a:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    /* Set the Associate Permitted flag in the IEEE 802.15.4 MAC. */
    IEEE802_15_4_SET_ASSOCIATION_PERMITTED(join_permitted);
    return true;
}
    651c:	08 95       	ret

0000651e <vrt_timer_init>:
/*================================= PROTOTYPES       =========================*/


bool vrt_timer_init(void) {
    /* Initialize local variables. */
    vrt_time_msw          = 0;
    651e:	10 92 6f 12 	sts	0x126F, r1
    6522:	10 92 6e 12 	sts	0x126E, r1
    high_pri_delay_cb     = (vrt_timer_cb_t)NULL;
    6526:	10 92 11 11 	sts	0x1111, r1
    652a:	10 92 10 11 	sts	0x1110, r1
    high_pri_delay_param  = (void *)NULL;
    652e:	10 92 13 11 	sts	0x1113, r1
    6532:	10 92 12 11 	sts	0x1112, r1
    delay_msw             = 0;
    6536:	10 92 15 11 	sts	0x1115, r1
    653a:	10 92 14 11 	sts	0x1114, r1
    delay_lsw             = 0;
    653e:	10 92 17 11 	sts	0x1117, r1
    6542:	10 92 16 11 	sts	0x1116, r1
    tick_handler          = (vrt_timer_tick_handler_t)NULL;
    6546:	10 92 1b 11 	sts	0x111B, r1
    654a:	10 92 1a 11 	sts	0x111A, r1
    ticks_waiting         = 0;
    654e:	10 92 19 11 	sts	0x1119, r1
    6552:	10 92 18 11 	sts	0x1118, r1
    
	/* Set up timer. */
    VRT_TIME_ENABLE_MODULE();
    6556:	e4 e6       	ldi	r30, 0x64	; 100
    6558:	f0 e0       	ldi	r31, 0x00	; 0
    655a:	80 81       	ld	r24, Z
    655c:	87 7f       	andi	r24, 0xF7	; 247
    655e:	80 83       	st	Z, r24
    
    VRT_TIME_CONF_REG_B = VRT_TIME_TCCRB_CONFIG;
    6560:	83 e4       	ldi	r24, 0x43	; 67
    6562:	80 93 81 00 	sts	0x0081, r24
    VRT_TIME_OUT_COMP_B = VRT_TIME_TC_VALUE + VRT_TIMER_SLOW_TICK_RELOAD_VALUE;
    6566:	80 91 84 00 	lds	r24, 0x0084
    656a:	90 91 85 00 	lds	r25, 0x0085
    656e:	86 59       	subi	r24, 0x96	; 150
    6570:	97 4e       	sbci	r25, 0xE7	; 231
    6572:	90 93 8b 00 	sts	0x008B, r25
    6576:	80 93 8a 00 	sts	0x008A, r24
    
    VRT_TIME_FLAG_REG = 0xFF;
    657a:	8f ef       	ldi	r24, 0xFF	; 255
    657c:	86 bb       	out	0x16, r24	; 22
    VRT_TIME_ISR_MASK_REG = (1 << VT_OCIE_B) | (1 << VT_TOIE);
    657e:	85 e0       	ldi	r24, 0x05	; 5
    6580:	80 93 6f 00 	sts	0x006F, r24
    
    return true;
}
    6584:	81 e0       	ldi	r24, 0x01	; 1
    6586:	08 95       	ret

00006588 <vrt_timer_deinit>:


void vrt_timer_deinit(void) {
    VRT_TIME_DISABLE();
    6588:	8e ef       	ldi	r24, 0xFE	; 254
    658a:	80 93 6f 00 	sts	0x006F, r24
    VRT_TIME_DISABLE_MODULE();
    658e:	e4 e6       	ldi	r30, 0x64	; 100
    6590:	f0 e0       	ldi	r31, 0x00	; 0
    6592:	80 81       	ld	r24, Z
    6594:	88 60       	ori	r24, 0x08	; 8
    6596:	80 83       	st	Z, r24
}
    6598:	08 95       	ret

0000659a <vrt_timer_get_tick_cnt>:
    
    uint16_t current_time_hi;
    uint32_t current_time;
    
    do {
        current_time_hi = vrt_time_msw;
    659a:	60 91 6e 12 	lds	r22, 0x126E
    659e:	70 91 6f 12 	lds	r23, 0x126F
        current_time = (uint32_t)vrt_time_msw << 16;
    65a2:	20 91 6e 12 	lds	r18, 0x126E
    65a6:	30 91 6f 12 	lds	r19, 0x126F
    65aa:	40 e0       	ldi	r20, 0x00	; 0
    65ac:	50 e0       	ldi	r21, 0x00	; 0
    65ae:	a9 01       	movw	r20, r18
    65b0:	33 27       	eor	r19, r19
    65b2:	22 27       	eor	r18, r18
        current_time |= VRT_TIME_TC_VALUE;
    65b4:	80 91 84 00 	lds	r24, 0x0084
    65b8:	90 91 85 00 	lds	r25, 0x0085
    65bc:	a0 e0       	ldi	r26, 0x00	; 0
    65be:	b0 e0       	ldi	r27, 0x00	; 0
    65c0:	28 2b       	or	r18, r24
    65c2:	39 2b       	or	r19, r25
    65c4:	4a 2b       	or	r20, r26
    65c6:	5b 2b       	or	r21, r27
    } while (current_time_hi != vrt_time_msw);
    65c8:	80 91 6e 12 	lds	r24, 0x126E
    65cc:	90 91 6f 12 	lds	r25, 0x126F
    65d0:	68 17       	cp	r22, r24
    65d2:	79 07       	cpc	r23, r25
    65d4:	11 f7       	brne	.-60     	; 0x659a <vrt_timer_get_tick_cnt>
    
	return current_time;
}
    65d6:	b9 01       	movw	r22, r18
    65d8:	ca 01       	movw	r24, r20
    65da:	08 95       	ret

000065dc <vrt_timer_start_high_pri_delay>:


bool vrt_timer_start_high_pri_delay(uint32_t ticks, vrt_timer_cb_t cb, void *cb_param) {
    65dc:	df 93       	push	r29
    65de:	cf 93       	push	r28
    65e0:	0f 92       	push	r0
    65e2:	cd b7       	in	r28, 0x3d	; 61
    65e4:	de b7       	in	r29, 0x3e	; 62
    /* Verify that the function parameters are valid. */
    if (NULL == cb) { 
    65e6:	41 15       	cp	r20, r1
    65e8:	51 05       	cpc	r21, r1
    65ea:	09 f4       	brne	.+2      	; 0x65ee <vrt_timer_start_high_pri_delay+0x12>
    65ec:	44 c0       	rjmp	.+136    	; 0x6676 <vrt_timer_start_high_pri_delay+0x9a>
        return false;
    }
  
    /* Enter protected region where the timer is installed. */
    ENTER_CRITICAL_REGION();
    65ee:	ef b7       	in	r30, 0x3f	; 63
    65f0:	e9 83       	std	Y+1, r30	; 0x01
    65f2:	f8 94       	cli
    
    /* Check if the high priority timer is already running. */    
    if (NULL != high_pri_delay_cb) {
    65f4:	e0 91 10 11 	lds	r30, 0x1110
    65f8:	f0 91 11 11 	lds	r31, 0x1111
    65fc:	30 97       	sbiw	r30, 0x00	; 0
    65fe:	19 f0       	breq	.+6      	; 0x6606 <vrt_timer_start_high_pri_delay+0x2a>
        LEAVE_CRITICAL_REGION();
    6600:	89 81       	ldd	r24, Y+1	; 0x01
    6602:	8f bf       	out	0x3f, r24	; 63
    6604:	38 c0       	rjmp	.+112    	; 0x6676 <vrt_timer_start_high_pri_delay+0x9a>
        return false;
    }
    
    high_pri_delay_cb = cb;
    6606:	50 93 11 11 	sts	0x1111, r21
    660a:	40 93 10 11 	sts	0x1110, r20
    high_pri_delay_param = cb_param;
    660e:	30 93 13 11 	sts	0x1113, r19
    6612:	20 93 12 11 	sts	0x1112, r18
    
    /* Check if the delay is small enough to only use the  */
    delay_msw = (ticks >> 16 * 1) & 0xFFFF;
    6616:	9c 01       	movw	r18, r24
    6618:	44 27       	eor	r20, r20
    661a:	55 27       	eor	r21, r21
    661c:	f9 01       	movw	r30, r18
    661e:	30 93 15 11 	sts	0x1115, r19
    6622:	20 93 14 11 	sts	0x1114, r18
    delay_lsw = (ticks >> 16 * 0) & 0xFFFF;
    6626:	70 93 17 11 	sts	0x1117, r23
    662a:	60 93 16 11 	sts	0x1116, r22
    
    if (0 == delay_msw) {
    662e:	30 97       	sbiw	r30, 0x00	; 0
    6630:	79 f4       	brne	.+30     	; 0x6650 <vrt_timer_start_high_pri_delay+0x74>
        /* Program compare match register, clear pending compare matches and finally
         * enable the compare match interrupt.
         */
        VRT_TIME_OUT_COMP_A =  VRT_TIME_TC_VALUE + delay_lsw;
    6632:	80 91 84 00 	lds	r24, 0x0084
    6636:	90 91 85 00 	lds	r25, 0x0085
    663a:	86 0f       	add	r24, r22
    663c:	97 1f       	adc	r25, r23
    663e:	90 93 89 00 	sts	0x0089, r25
    6642:	80 93 88 00 	sts	0x0088, r24
        delay_lsw = 0;
    6646:	10 92 17 11 	sts	0x1117, r1
    664a:	10 92 16 11 	sts	0x1116, r1
    664e:	09 c0       	rjmp	.+18     	; 0x6662 <vrt_timer_start_high_pri_delay+0x86>
    } else {
        VRT_TIME_OUT_COMP_A = VRT_TIME_TC_VALUE + 0xFFFF;
    6650:	80 91 84 00 	lds	r24, 0x0084
    6654:	90 91 85 00 	lds	r25, 0x0085
    6658:	01 97       	sbiw	r24, 0x01	; 1
    665a:	90 93 89 00 	sts	0x0089, r25
    665e:	80 93 88 00 	sts	0x0088, r24
    }
    
    VRT_TIME_FLAG_REG |= (1 << VT_OCF_A);
    6662:	b1 9a       	sbi	0x16, 1	; 22
    VRT_TIME_ISR_MASK_REG |= (1 << VT_OCIE_A);
    6664:	80 91 6f 00 	lds	r24, 0x006F
    6668:	82 60       	ori	r24, 0x02	; 2
    666a:	80 93 6f 00 	sts	0x006F, r24
    
    LEAVE_CRITICAL_REGION();
    666e:	89 81       	ldd	r24, Y+1	; 0x01
    6670:	8f bf       	out	0x3f, r24	; 63
    
    return true;
    6672:	81 e0       	ldi	r24, 0x01	; 1
    6674:	01 c0       	rjmp	.+2      	; 0x6678 <vrt_timer_start_high_pri_delay+0x9c>


bool vrt_timer_start_high_pri_delay(uint32_t ticks, vrt_timer_cb_t cb, void *cb_param) {
    /* Verify that the function parameters are valid. */
    if (NULL == cb) { 
        return false;
    6676:	80 e0       	ldi	r24, 0x00	; 0
    VRT_TIME_ISR_MASK_REG |= (1 << VT_OCIE_A);
    
    LEAVE_CRITICAL_REGION();
    
    return true;
}
    6678:	0f 90       	pop	r0
    667a:	cf 91       	pop	r28
    667c:	df 91       	pop	r29
    667e:	08 95       	ret

00006680 <vrt_timer_stop_high_pri_delay>:


void vrt_timer_stop_high_pri_delay(void) {
    6680:	df 93       	push	r29
    6682:	cf 93       	push	r28
    6684:	0f 92       	push	r0
    6686:	cd b7       	in	r28, 0x3d	; 61
    6688:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    668a:	8f b7       	in	r24, 0x3f	; 63
    668c:	89 83       	std	Y+1, r24	; 0x01
    668e:	f8 94       	cli
    
    /* Turn off timer1 OCR1C interrupt */
    VRT_TIME_ISR_MASK_REG &= ~(1 << VT_OCIE_A);
    6690:	ef e6       	ldi	r30, 0x6F	; 111
    6692:	f0 e0       	ldi	r31, 0x00	; 0
    6694:	80 81       	ld	r24, Z
    6696:	8d 7f       	andi	r24, 0xFD	; 253
    6698:	80 83       	st	Z, r24
    high_pri_delay_cb = NULL;
    669a:	10 92 11 11 	sts	0x1111, r1
    669e:	10 92 10 11 	sts	0x1110, r1
    
    LEAVE_CRITICAL_REGION();
    66a2:	89 81       	ldd	r24, Y+1	; 0x01
    66a4:	8f bf       	out	0x3f, r24	; 63
}
    66a6:	0f 90       	pop	r0
    66a8:	cf 91       	pop	r28
    66aa:	df 91       	pop	r29
    66ac:	08 95       	ret

000066ae <vrt_timer_install_tick_handler>:


void vrt_timer_install_tick_handler(vrt_timer_tick_handler_t handler) {
    66ae:	df 93       	push	r29
    66b0:	cf 93       	push	r28
    66b2:	0f 92       	push	r0
    66b4:	cd b7       	in	r28, 0x3d	; 61
    66b6:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    66b8:	2f b7       	in	r18, 0x3f	; 63
    66ba:	29 83       	std	Y+1, r18	; 0x01
    66bc:	f8 94       	cli
    tick_handler = handler;
    66be:	90 93 1b 11 	sts	0x111B, r25
    66c2:	80 93 1a 11 	sts	0x111A, r24
    LEAVE_CRITICAL_REGION();
    66c6:	89 81       	ldd	r24, Y+1	; 0x01
    66c8:	8f bf       	out	0x3f, r24	; 63
}
    66ca:	0f 90       	pop	r0
    66cc:	cf 91       	pop	r28
    66ce:	df 91       	pop	r29
    66d0:	08 95       	ret

000066d2 <vrt_timer_get_tick_handler>:


vrt_timer_tick_handler_t vrt_timer_get_tick_handler(void) {
    66d2:	df 93       	push	r29
    66d4:	cf 93       	push	r28
    66d6:	0f 92       	push	r0
    66d8:	cd b7       	in	r28, 0x3d	; 61
    66da:	de b7       	in	r29, 0x3e	; 62
   
    vrt_timer_tick_handler_t handler = NULL;
        
    ENTER_CRITICAL_REGION();
    66dc:	8f b7       	in	r24, 0x3f	; 63
    66de:	89 83       	std	Y+1, r24	; 0x01
    66e0:	f8 94       	cli
    handler = tick_handler;
    66e2:	80 91 1a 11 	lds	r24, 0x111A
    66e6:	90 91 1b 11 	lds	r25, 0x111B
    LEAVE_CRITICAL_REGION();
    66ea:	29 81       	ldd	r18, Y+1	; 0x01
    66ec:	2f bf       	out	0x3f, r18	; 63
    
    return handler;
}
    66ee:	0f 90       	pop	r0
    66f0:	cf 91       	pop	r28
    66f2:	df 91       	pop	r29
    66f4:	08 95       	ret

000066f6 <vrt_timer_remove_tick_handler>:


void vrt_timer_remove_tick_handler(void) {
    66f6:	df 93       	push	r29
    66f8:	cf 93       	push	r28
    66fa:	0f 92       	push	r0
    66fc:	cd b7       	in	r28, 0x3d	; 61
    66fe:	de b7       	in	r29, 0x3e	; 62
    ENTER_CRITICAL_REGION();
    6700:	8f b7       	in	r24, 0x3f	; 63
    6702:	89 83       	std	Y+1, r24	; 0x01
    6704:	f8 94       	cli
    tick_handler = (vrt_timer_tick_handler_t)NULL;
    6706:	10 92 1b 11 	sts	0x111B, r1
    670a:	10 92 1a 11 	sts	0x111A, r1
    LEAVE_CRITICAL_REGION();
    670e:	89 81       	ldd	r24, Y+1	; 0x01
    6710:	8f bf       	out	0x3f, r24	; 63
}
    6712:	0f 90       	pop	r0
    6714:	cf 91       	pop	r28
    6716:	df 91       	pop	r29
    6718:	08 95       	ret

0000671a <vrt_timer_task>:


void vrt_timer_task(void) {
    671a:	df 93       	push	r29
    671c:	cf 93       	push	r28
    671e:	0f 92       	push	r0
    6720:	cd b7       	in	r28, 0x3d	; 61
    6722:	de b7       	in	r29, 0x3e	; 62
    /* Check first if any tick handler is installed. */
    if (NULL == tick_handler) {
    6724:	80 91 1a 11 	lds	r24, 0x111A
    6728:	90 91 1b 11 	lds	r25, 0x111B
    672c:	00 97       	sbiw	r24, 0x00	; 0
    672e:	e9 f4       	brne	.+58     	; 0x676a <vrt_timer_task+0x50>
        
        ENTER_CRITICAL_REGION();
    6730:	8f b7       	in	r24, 0x3f	; 63
    6732:	89 83       	std	Y+1, r24	; 0x01
    6734:	f8 94       	cli
        ticks_waiting = 0;
    6736:	10 92 19 11 	sts	0x1119, r1
    673a:	10 92 18 11 	sts	0x1118, r1
        LEAVE_CRITICAL_REGION();
    673e:	89 81       	ldd	r24, Y+1	; 0x01
    6740:	8f bf       	out	0x3f, r24	; 63
        
        return;
    6742:	19 c0       	rjmp	.+50     	; 0x6776 <vrt_timer_task+0x5c>
    }
    
    /* Run the installed*/
    while (0 != ticks_waiting) {
        tick_handler();
    6744:	e0 91 1a 11 	lds	r30, 0x111A
    6748:	f0 91 1b 11 	lds	r31, 0x111B
    674c:	09 95       	icall
        
        ENTER_CRITICAL_REGION();
    674e:	8f b7       	in	r24, 0x3f	; 63
    6750:	89 83       	std	Y+1, r24	; 0x01
    6752:	f8 94       	cli
        ticks_waiting--;
    6754:	80 91 18 11 	lds	r24, 0x1118
    6758:	90 91 19 11 	lds	r25, 0x1119
    675c:	01 97       	sbiw	r24, 0x01	; 1
    675e:	90 93 19 11 	sts	0x1119, r25
    6762:	80 93 18 11 	sts	0x1118, r24
        LEAVE_CRITICAL_REGION();
    6766:	89 81       	ldd	r24, Y+1	; 0x01
    6768:	8f bf       	out	0x3f, r24	; 63
        
        return;
    }
    
    /* Run the installed*/
    while (0 != ticks_waiting) {
    676a:	80 91 18 11 	lds	r24, 0x1118
    676e:	90 91 19 11 	lds	r25, 0x1119
    6772:	00 97       	sbiw	r24, 0x00	; 0
    6774:	39 f7       	brne	.-50     	; 0x6744 <vrt_timer_task+0x2a>
        
        ENTER_CRITICAL_REGION();
        ticks_waiting--;
        LEAVE_CRITICAL_REGION();
    }
}
    6776:	0f 90       	pop	r0
    6778:	cf 91       	pop	r28
    677a:	df 91       	pop	r29
    677c:	08 95       	ret

0000677e <exit>:
    677e:	f8 94       	cli
    6780:	0c 94 14 34 	jmp	0x6828	; 0x6828 <_exit>

00006784 <memcpy>:
    6784:	fb 01       	movw	r30, r22
    6786:	dc 01       	movw	r26, r24
    6788:	02 c0       	rjmp	.+4      	; 0x678e <memcpy+0xa>
    678a:	01 90       	ld	r0, Z+
    678c:	0d 92       	st	X+, r0
    678e:	41 50       	subi	r20, 0x01	; 1
    6790:	50 40       	sbci	r21, 0x00	; 0
    6792:	d8 f7       	brcc	.-10     	; 0x678a <memcpy+0x6>
    6794:	08 95       	ret

00006796 <__eerd_byte_usb1287>:
    6796:	f9 99       	sbic	0x1f, 1	; 31
    6798:	fe cf       	rjmp	.-4      	; 0x6796 <__eerd_byte_usb1287>
    679a:	92 bd       	out	0x22, r25	; 34
    679c:	81 bd       	out	0x21, r24	; 33
    679e:	f8 9a       	sbi	0x1f, 0	; 31
    67a0:	99 27       	eor	r25, r25
    67a2:	80 b5       	in	r24, 0x20	; 32
    67a4:	08 95       	ret

000067a6 <__eewr_byte_usb1287>:
    67a6:	26 2f       	mov	r18, r22

000067a8 <__eewr_r18_usb1287>:
    67a8:	f9 99       	sbic	0x1f, 1	; 31
    67aa:	fe cf       	rjmp	.-4      	; 0x67a8 <__eewr_r18_usb1287>
    67ac:	1f ba       	out	0x1f, r1	; 31
    67ae:	92 bd       	out	0x22, r25	; 34
    67b0:	81 bd       	out	0x21, r24	; 33
    67b2:	20 bd       	out	0x20, r18	; 32
    67b4:	0f b6       	in	r0, 0x3f	; 63
    67b6:	f8 94       	cli
    67b8:	fa 9a       	sbi	0x1f, 2	; 31
    67ba:	f9 9a       	sbi	0x1f, 1	; 31
    67bc:	0f be       	out	0x3f, r0	; 63
    67be:	01 96       	adiw	r24, 0x01	; 1
    67c0:	08 95       	ret

000067c2 <__mulsi3>:
    67c2:	62 9f       	mul	r22, r18
    67c4:	d0 01       	movw	r26, r0
    67c6:	73 9f       	mul	r23, r19
    67c8:	f0 01       	movw	r30, r0
    67ca:	82 9f       	mul	r24, r18
    67cc:	e0 0d       	add	r30, r0
    67ce:	f1 1d       	adc	r31, r1
    67d0:	64 9f       	mul	r22, r20
    67d2:	e0 0d       	add	r30, r0
    67d4:	f1 1d       	adc	r31, r1
    67d6:	92 9f       	mul	r25, r18
    67d8:	f0 0d       	add	r31, r0
    67da:	83 9f       	mul	r24, r19
    67dc:	f0 0d       	add	r31, r0
    67de:	74 9f       	mul	r23, r20
    67e0:	f0 0d       	add	r31, r0
    67e2:	65 9f       	mul	r22, r21
    67e4:	f0 0d       	add	r31, r0
    67e6:	99 27       	eor	r25, r25
    67e8:	72 9f       	mul	r23, r18
    67ea:	b0 0d       	add	r27, r0
    67ec:	e1 1d       	adc	r30, r1
    67ee:	f9 1f       	adc	r31, r25
    67f0:	63 9f       	mul	r22, r19
    67f2:	b0 0d       	add	r27, r0
    67f4:	e1 1d       	adc	r30, r1
    67f6:	f9 1f       	adc	r31, r25
    67f8:	bd 01       	movw	r22, r26
    67fa:	cf 01       	movw	r24, r30
    67fc:	11 24       	eor	r1, r1
    67fe:	08 95       	ret

00006800 <__udivmodhi4>:
    6800:	aa 1b       	sub	r26, r26
    6802:	bb 1b       	sub	r27, r27
    6804:	51 e1       	ldi	r21, 0x11	; 17
    6806:	07 c0       	rjmp	.+14     	; 0x6816 <__udivmodhi4_ep>

00006808 <__udivmodhi4_loop>:
    6808:	aa 1f       	adc	r26, r26
    680a:	bb 1f       	adc	r27, r27
    680c:	a6 17       	cp	r26, r22
    680e:	b7 07       	cpc	r27, r23
    6810:	10 f0       	brcs	.+4      	; 0x6816 <__udivmodhi4_ep>
    6812:	a6 1b       	sub	r26, r22
    6814:	b7 0b       	sbc	r27, r23

00006816 <__udivmodhi4_ep>:
    6816:	88 1f       	adc	r24, r24
    6818:	99 1f       	adc	r25, r25
    681a:	5a 95       	dec	r21
    681c:	a9 f7       	brne	.-22     	; 0x6808 <__udivmodhi4_loop>
    681e:	80 95       	com	r24
    6820:	90 95       	com	r25
    6822:	bc 01       	movw	r22, r24
    6824:	cd 01       	movw	r24, r26
    6826:	08 95       	ret

00006828 <_exit>:
    6828:	f8 94       	cli

0000682a <__stop_program>:
    682a:	ff cf       	rjmp	.-2      	; 0x682a <__stop_program>
